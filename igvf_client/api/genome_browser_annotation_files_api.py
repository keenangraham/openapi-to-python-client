# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from igvf_client.models.genome_browser_annotation_file_results import GenomeBrowserAnnotationFileResults

from igvf_client.api_client import ApiClient, RequestSerialized
from igvf_client.api_response import ApiResponse
from igvf_client.rest import RESTResponseType


class GenomeBrowserAnnotationFilesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def genome_browser_annotation_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[StrictStr], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[StrictStr], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[StrictStr], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[StrictStr], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[StrictStr], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[StrictStr], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[StrictStr], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[StrictStr], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[StrictStr], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[Any]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[Any]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[Any]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[Any]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[StrictStr], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[Dict[str, Any]], Field(description="Filter by upload_credentials")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenomeBrowserAnnotationFileResults:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: str
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param file_format_type: Filter by file_format_type
        :type file_format_type: str
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: str
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: str
        :param content_type: Filter by content_type
        :type content_type: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: str
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: str
        :param file_size: Filter by file_size
        :type file_size: int
        :param md5sum: Filter by md5sum
        :type md5sum: str
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: str
        :param upload_status: Filter by upload_status
        :type upload_status: str
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: str
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[object]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[object]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[object]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[object]
        :param href: Filter by href
        :type href: str
        :param s3_uri: Filter by s3_uri
        :type s3_uri: str
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def genome_browser_annotation_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[StrictStr], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[StrictStr], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[StrictStr], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[StrictStr], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[StrictStr], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[StrictStr], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[StrictStr], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[StrictStr], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[StrictStr], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[Any]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[Any]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[Any]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[Any]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[StrictStr], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[Dict[str, Any]], Field(description="Filter by upload_credentials")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenomeBrowserAnnotationFileResults]:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: str
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param file_format_type: Filter by file_format_type
        :type file_format_type: str
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: str
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: str
        :param content_type: Filter by content_type
        :type content_type: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: str
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: str
        :param file_size: Filter by file_size
        :type file_size: int
        :param md5sum: Filter by md5sum
        :type md5sum: str
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: str
        :param upload_status: Filter by upload_status
        :type upload_status: str
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: str
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[object]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[object]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[object]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[object]
        :param href: Filter by href
        :type href: str
        :param s3_uri: Filter by s3_uri
        :type s3_uri: str
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def genome_browser_annotation_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[StrictStr], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[StrictStr], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[StrictStr], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[StrictStr], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[StrictStr], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[StrictStr], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[Annotated[str, Field(strict=True, max_length=32)]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[StrictStr], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[StrictStr], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[StrictStr], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[Any]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[Any]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[Any]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[Any]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[StrictStr], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[Dict[str, Any]], Field(description="Filter by upload_credentials")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: str
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param file_format_type: Filter by file_format_type
        :type file_format_type: str
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: str
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: str
        :param content_type: Filter by content_type
        :type content_type: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: str
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: str
        :param file_size: Filter by file_size
        :type file_size: int
        :param md5sum: Filter by md5sum
        :type md5sum: str
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: str
        :param upload_status: Filter by upload_status
        :type upload_status: str
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: str
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[object]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[object]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[object]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[object]
        :param href: Filter by href
        :type href: str
        :param s3_uri: Filter by s3_uri
        :type s3_uri: str
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _genome_browser_annotation_files_serialize(
        self,
        query,
        limit,
        sort,
        assembly,
        release_timestamp,
        file_format_type,
        transcriptome_annotation,
        documents,
        lab,
        award,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        schema_version,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitted_by,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'documents': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'aliases': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format_specifications': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            if isinstance(release_timestamp, datetime):
                _query_params.append(
                    (
                        'release_timestamp',
                        release_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('release_timestamp', release_timestamp))
            
        if file_format_type is not None:
            
            _query_params.append(('file_format_type', file_format_type))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if lab is not None:
            
            _query_params.append(('lab', lab))
            
        if award is not None:
            
            _query_params.append(('award', award))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if schema_version is not None:
            
            _query_params.append(('schema_version', schema_version))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            if isinstance(creation_timestamp, datetime):
                _query_params.append(
                    (
                        'creation_timestamp',
                        creation_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitted_by is not None:
            
            _query_params.append(('submitted_by', submitted_by))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            for k, v in upload_credentials.items():
                _query_params.append((k, v))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/genome-browser-annotation-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


