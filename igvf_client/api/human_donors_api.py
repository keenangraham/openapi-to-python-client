# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from igvf_client.models.human_donor_results import HumanDonorResults
from igvf_client.models.related_donor import RelatedDonor

from igvf_client.api_client import ApiClient, RequestSerialized
from igvf_client.api_response import ApiResponse
from igvf_client.rest import RESTResponseType


class HumanDonorsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def human_donors(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[StrictStr], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[StrictStr], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[StrictStr], Field(description="Filter by sex")] = None,
        phenotypic_features: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features")] = None,
        virtual: Annotated[Optional[StrictBool], Field(description="Filter by virtual")] = None,
        related_donors: Annotated[Optional[List[RelatedDonor]], Field(description="Filter by related_donors")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HumanDonorResults:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param taxa: Filter by taxa
        :type taxa: str
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: str
        :param phenotypic_features: Filter by phenotypic_features
        :type phenotypic_features: List[str]
        :param virtual: Filter by virtual
        :type virtual: bool
        :param related_donors: Filter by related_donors
        :type related_donors: List[RelatedDonor]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            phenotypic_features=phenotypic_features,
            virtual=virtual,
            related_donors=related_donors,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def human_donors_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[StrictStr], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[StrictStr], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[StrictStr], Field(description="Filter by sex")] = None,
        phenotypic_features: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features")] = None,
        virtual: Annotated[Optional[StrictBool], Field(description="Filter by virtual")] = None,
        related_donors: Annotated[Optional[List[RelatedDonor]], Field(description="Filter by related_donors")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HumanDonorResults]:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param taxa: Filter by taxa
        :type taxa: str
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: str
        :param phenotypic_features: Filter by phenotypic_features
        :type phenotypic_features: List[str]
        :param virtual: Filter by virtual
        :type virtual: bool
        :param related_donors: Filter by related_donors
        :type related_donors: List[RelatedDonor]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            phenotypic_features=phenotypic_features,
            virtual=virtual,
            related_donors=related_donors,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def human_donors_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[datetime], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[StrictStr], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[StrictStr], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        lab: Annotated[Optional[StrictStr], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[StrictStr], Field(description="Filter by award")] = None,
        accession: Annotated[Optional[StrictStr], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by revoke_detail")] = None,
        schema_version: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by schema_version")] = None,
        uuid: Annotated[Optional[StrictStr], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[datetime], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[StrictStr], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[StrictStr], Field(description="Filter by sex")] = None,
        phenotypic_features: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features")] = None,
        virtual: Annotated[Optional[StrictBool], Field(description="Filter by virtual")] = None,
        related_donors: Annotated[Optional[List[RelatedDonor]], Field(description="Filter by related_donors")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[StrictStr], Field(description="Filter by summary")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Use 'all' for all results.
        :type limit: SearchLimitParameter
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: datetime
        :param taxa: Filter by taxa
        :type taxa: str
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: str
        :param documents: Filter by documents
        :type documents: List[str]
        :param lab: Filter by lab
        :type lab: str
        :param award: Filter by award
        :type award: str
        :param accession: Filter by accession
        :type accession: str
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: str
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: str
        :param schema_version: Filter by schema_version
        :type schema_version: str
        :param uuid: Filter by uuid
        :type uuid: str
        :param notes: Filter by notes
        :type notes: str
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: datetime
        :param submitted_by: Filter by submitted_by
        :type submitted_by: str
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: str
        :param description: Filter by description
        :type description: str
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: str
        :param phenotypic_features: Filter by phenotypic_features
        :type phenotypic_features: List[str]
        :param virtual: Filter by virtual
        :type virtual: bool
        :param related_donors: Filter by related_donors
        :type related_donors: List[RelatedDonor]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: str
        :param summary: Filter by summary
        :type summary: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            lab=lab,
            award=award,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            schema_version=schema_version,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            phenotypic_features=phenotypic_features,
            virtual=virtual,
            related_donors=related_donors,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _human_donors_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        taxa,
        publications,
        publication_identifiers,
        url,
        documents,
        lab,
        award,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        schema_version,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitted_by,
        submitter_comment,
        description,
        dbxrefs,
        sex,
        phenotypic_features,
        virtual,
        related_donors,
        ethnicities,
        human_donor_identifiers,
        id,
        summary,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'aliases': 'multi',
            'dbxrefs': 'multi',
            'phenotypic_features': 'multi',
            'related_donors': 'multi',
            'ethnicities': 'multi',
            'human_donor_identifiers': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            if isinstance(release_timestamp, datetime):
                _query_params.append(
                    (
                        'release_timestamp',
                        release_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('release_timestamp', release_timestamp))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if lab is not None:
            
            _query_params.append(('lab', lab))
            
        if award is not None:
            
            _query_params.append(('award', award))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if schema_version is not None:
            
            _query_params.append(('schema_version', schema_version))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            if isinstance(creation_timestamp, datetime):
                _query_params.append(
                    (
                        'creation_timestamp',
                        creation_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitted_by is not None:
            
            _query_params.append(('submitted_by', submitted_by))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if phenotypic_features is not None:
            
            _query_params.append(('phenotypic_features', phenotypic_features))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if related_donors is not None:
            
            _query_params.append(('related_donors', related_donors))
            
        if ethnicities is not None:
            
            _query_params.append(('ethnicities', ethnicities))
            
        if human_donor_identifiers is not None:
            
            _query_params.append(('human_donor_identifiers', human_donor_identifiers))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/human-donors/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


