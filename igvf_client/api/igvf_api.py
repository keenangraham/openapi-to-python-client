# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated
from igvf_client.models.access_key_results import AccessKeyResults
from igvf_client.models.alignment_file_results import AlignmentFileResults
from igvf_client.models.analysis_set_results import AnalysisSetResults
from igvf_client.models.analysis_step_results import AnalysisStepResults
from igvf_client.models.analysis_step_version_results import AnalysisStepVersionResults
from igvf_client.models.assay_term_results import AssayTermResults
from igvf_client.models.auxiliary_set_results import AuxiliarySetResults
from igvf_client.models.award_results import AwardResults
from igvf_client.models.biomarker_results import BiomarkerResults
from igvf_client.models.configuration_file_results import ConfigurationFileResults
from igvf_client.models.construct_library_set_results import ConstructLibrarySetResults
from igvf_client.models.crispr_modification_results import CrisprModificationResults
from igvf_client.models.curated_set_results import CuratedSetResults
from igvf_client.models.degron_modification_results import DegronModificationResults
from igvf_client.models.document_results import DocumentResults
from igvf_client.models.gene_location import GeneLocation
from igvf_client.models.gene_results import GeneResults
from igvf_client.models.genome_browser_annotation_file_results import GenomeBrowserAnnotationFileResults
from igvf_client.models.human_donor_results import HumanDonorResults
from igvf_client.models.image_file_results import ImageFileResults
from igvf_client.models.image_results import ImageResults
from igvf_client.models.in_vitro_system_results import InVitroSystemResults
from igvf_client.models.institutional_certificate_results import InstitutionalCertificateResults
from igvf_client.models.item import Item
from igvf_client.models.item_type import ItemType
from igvf_client.models.lab_results import LabResults
from igvf_client.models.locus import Locus
from igvf_client.models.matrix_file_results import MatrixFileResults
from igvf_client.models.measurement_set_results import MeasurementSetResults
from igvf_client.models.model_file_results import ModelFileResults
from igvf_client.models.model_set_results import ModelSetResults
from igvf_client.models.multiplexed_sample_results import MultiplexedSampleResults
from igvf_client.models.open_reading_frame_results import OpenReadingFrameResults
from igvf_client.models.page_results import PageResults
from igvf_client.models.phenotype_term_results import PhenotypeTermResults
from igvf_client.models.phenotypic_feature_results import PhenotypicFeatureResults
from igvf_client.models.platform_term_results import PlatformTermResults
from igvf_client.models.prediction_set_results import PredictionSetResults
from igvf_client.models.primary_cell_results import PrimaryCellResults
from igvf_client.models.publication_results import PublicationResults
from igvf_client.models.reference_file_results import ReferenceFileResults
from igvf_client.models.rodent_donor_results import RodentDonorResults
from igvf_client.models.sample_term_results import SampleTermResults
from igvf_client.models.search_results import SearchResults
from igvf_client.models.sequence_file_results import SequenceFileResults
from igvf_client.models.signal_file_results import SignalFileResults
from igvf_client.models.software_results import SoftwareResults
from igvf_client.models.software_version_results import SoftwareVersionResults
from igvf_client.models.source_results import SourceResults
from igvf_client.models.tabular_file_results import TabularFileResults
from igvf_client.models.technical_sample_results import TechnicalSampleResults
from igvf_client.models.tissue_results import TissueResults
from igvf_client.models.treatment_results import TreatmentResults
from igvf_client.models.user_results import UserResults
from igvf_client.models.whole_organism_results import WholeOrganismResults
from igvf_client.models.workflow_results import WorkflowResults

from igvf_client.api_client import ApiClient, RequestSerialized
from igvf_client.api_response import ApiResponse
from igvf_client.rest import RESTResponseType


class IgvfApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def access_keys(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        user: Annotated[Optional[List[StrictStr]], Field(description="Filter by user")] = None,
        access_key_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by access_key_id")] = None,
        secret_access_key_hash: Annotated[Optional[List[StrictStr]], Field(description="Filter by secret_access_key_hash")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccessKeyResults:
        """List items in the AccessKey collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param user: Filter by user
        :type user: List[str]
        :param access_key_id: Filter by access_key_id
        :type access_key_id: List[str]
        :param secret_access_key_hash: Filter by secret_access_key_hash
        :type secret_access_key_hash: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._access_keys_serialize(
            query=query,
            limit=limit,
            sort=sort,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            status=status,
            user=user,
            access_key_id=access_key_id,
            secret_access_key_hash=secret_access_key_hash,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessKeyResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def access_keys_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        user: Annotated[Optional[List[StrictStr]], Field(description="Filter by user")] = None,
        access_key_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by access_key_id")] = None,
        secret_access_key_hash: Annotated[Optional[List[StrictStr]], Field(description="Filter by secret_access_key_hash")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccessKeyResults]:
        """List items in the AccessKey collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param user: Filter by user
        :type user: List[str]
        :param access_key_id: Filter by access_key_id
        :type access_key_id: List[str]
        :param secret_access_key_hash: Filter by secret_access_key_hash
        :type secret_access_key_hash: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._access_keys_serialize(
            query=query,
            limit=limit,
            sort=sort,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            status=status,
            user=user,
            access_key_id=access_key_id,
            secret_access_key_hash=secret_access_key_hash,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessKeyResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def access_keys_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        user: Annotated[Optional[List[StrictStr]], Field(description="Filter by user")] = None,
        access_key_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by access_key_id")] = None,
        secret_access_key_hash: Annotated[Optional[List[StrictStr]], Field(description="Filter by secret_access_key_hash")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AccessKey collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param user: Filter by user
        :type user: List[str]
        :param access_key_id: Filter by access_key_id
        :type access_key_id: List[str]
        :param secret_access_key_hash: Filter by secret_access_key_hash
        :type secret_access_key_hash: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._access_keys_serialize(
            query=query,
            limit=limit,
            sort=sort,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            status=status,
            user=user,
            access_key_id=access_key_id,
            secret_access_key_hash=secret_access_key_hash,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccessKeyResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _access_keys_serialize(
        self,
        query,
        limit,
        sort,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        status,
        user,
        access_key_id,
        secret_access_key_hash,
        id,
        summary,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'status': 'multi',
            'user': 'multi',
            'access_key_id': 'multi',
            'secret_access_key_hash': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if user is not None:
            
            _query_params.append(('user', user))
            
        if access_key_id is not None:
            
            _query_params.append(('access_key_id', access_key_id))
            
        if secret_access_key_hash is not None:
            
            _query_params.append(('secret_access_key_hash', secret_access_key_hash))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/access-keys/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def alignment_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        redacted: Annotated[Optional[List[StrictBool]], Field(description="Filter by redacted")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AlignmentFileResults:
        """List items in the AlignmentFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param redacted: Filter by redacted
        :type redacted: List[bool]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alignment_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            redacted=redacted,
            filtered=filtered,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlignmentFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def alignment_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        redacted: Annotated[Optional[List[StrictBool]], Field(description="Filter by redacted")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AlignmentFileResults]:
        """List items in the AlignmentFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param redacted: Filter by redacted
        :type redacted: List[bool]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alignment_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            redacted=redacted,
            filtered=filtered,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlignmentFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def alignment_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        redacted: Annotated[Optional[List[StrictBool]], Field(description="Filter by redacted")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AlignmentFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param redacted: Filter by redacted
        :type redacted: List[bool]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._alignment_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            redacted=redacted,
            filtered=filtered,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AlignmentFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _alignment_files_serialize(
        self,
        query,
        limit,
        sort,
        controlled_access,
        anvil_url,
        transcriptome_annotation,
        assembly,
        release_timestamp,
        reference_files,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        redacted,
        filtered,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        content_summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'controlled_access': 'multi',
            'anvil_url': 'multi',
            'transcriptome_annotation': 'multi',
            'assembly': 'multi',
            'release_timestamp': 'multi',
            'reference_files': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'redacted': 'multi',
            'filtered': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'content_summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if anvil_url is not None:
            
            _query_params.append(('anvil_url', anvil_url))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if reference_files is not None:
            
            _query_params.append(('reference_files', reference_files))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if redacted is not None:
            
            _query_params.append(('redacted', redacted))
            
        if filtered is not None:
            
            _query_params.append(('filtered', filtered))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if content_summary is not None:
            
            _query_params.append(('content_summary', content_summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/alignment-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analysis_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_titles")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        input_file_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.file_set_type")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalysisSetResults:
        """List items in the AnalysisSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_titles: Filter by assay_titles
        :type assay_titles: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param input_file_sets_file_set_type: Filter by input_file_sets.file_set_type
        :type input_file_sets_file_set_type: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_titles=assay_titles,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            input_file_sets_file_set_type=input_file_sets_file_set_type,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analysis_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_titles")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        input_file_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.file_set_type")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalysisSetResults]:
        """List items in the AnalysisSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_titles: Filter by assay_titles
        :type assay_titles: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param input_file_sets_file_set_type: Filter by input_file_sets.file_set_type
        :type input_file_sets_file_set_type: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_titles=assay_titles,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            input_file_sets_file_set_type=input_file_sets_file_set_type,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analysis_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_titles")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        input_file_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.file_set_type")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AnalysisSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_titles: Filter by assay_titles
        :type assay_titles: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param input_file_sets_file_set_type: Filter by input_file_sets.file_set_type
        :type input_file_sets_file_set_type: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_titles=assay_titles,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            input_file_sets_file_set_type=input_file_sets_file_set_type,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analysis_sets_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        assay_titles,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform,
        files_submitted_file_name,
        files_upload_status,
        input_file_sets_id,
        input_file_sets_accession,
        input_file_sets_aliases,
        input_file_sets_file_set_type,
        lab_id,
        lab_title,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments,
        samples_classifications,
        samples_construct_library_sets,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'assay_titles': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'input_file_sets.@id': 'multi',
            'input_file_sets.accession': 'multi',
            'input_file_sets.aliases': 'multi',
            'input_file_sets.file_set_type': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if assay_titles is not None:
            
            _query_params.append(('assay_titles', assay_titles))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform is not None:
            
            _query_params.append(('files.sequencing_platform', files_sequencing_platform))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if input_file_sets_id is not None:
            
            _query_params.append(('input_file_sets.@id', input_file_sets_id))
            
        if input_file_sets_accession is not None:
            
            _query_params.append(('input_file_sets.accession', input_file_sets_accession))
            
        if input_file_sets_aliases is not None:
            
            _query_params.append(('input_file_sets.aliases', input_file_sets_aliases))
            
        if input_file_sets_file_set_type is not None:
            
            _query_params.append(('input_file_sets.file_set_type', input_file_sets_file_set_type))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments', samples_cell_fate_change_treatments))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets is not None:
            
            _query_params.append(('samples.construct_library_sets', samples_construct_library_sets))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications is not None:
            
            _query_params.append(('samples.modifications', samples_modifications))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments is not None:
            
            _query_params.append(('samples.treatments', samples_treatments))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analysis-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analysis_step_versions(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_step_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.@id")] = None,
        analysis_step_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_versions_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.@id")] = None,
        software_versions_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalysisStepVersionResults:
        """List items in the AnalysisStepVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_step_id: Filter by analysis_step.@id
        :type analysis_step_id: List[str]
        :param analysis_step_name: Filter by analysis_step.name
        :type analysis_step_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_versions_id: Filter by software_versions.@id
        :type software_versions_id: List[str]
        :param software_versions_name: Filter by software_versions.name
        :type software_versions_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_step_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            id=id,
            summary=summary,
            analysis_step_id=analysis_step_id,
            analysis_step_name=analysis_step_name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_versions_id=software_versions_id,
            software_versions_name=software_versions_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analysis_step_versions_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_step_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.@id")] = None,
        analysis_step_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_versions_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.@id")] = None,
        software_versions_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalysisStepVersionResults]:
        """List items in the AnalysisStepVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_step_id: Filter by analysis_step.@id
        :type analysis_step_id: List[str]
        :param analysis_step_name: Filter by analysis_step.name
        :type analysis_step_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_versions_id: Filter by software_versions.@id
        :type software_versions_id: List[str]
        :param software_versions_name: Filter by software_versions.name
        :type software_versions_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_step_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            id=id,
            summary=summary,
            analysis_step_id=analysis_step_id,
            analysis_step_name=analysis_step_name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_versions_id=software_versions_id,
            software_versions_name=software_versions_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analysis_step_versions_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_step_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.@id")] = None,
        analysis_step_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step.name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_versions_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.@id")] = None,
        software_versions_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AnalysisStepVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_step_id: Filter by analysis_step.@id
        :type analysis_step_id: List[str]
        :param analysis_step_name: Filter by analysis_step.name
        :type analysis_step_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_versions_id: Filter by software_versions.@id
        :type software_versions_id: List[str]
        :param software_versions_name: Filter by software_versions.name
        :type software_versions_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_step_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            id=id,
            summary=summary,
            analysis_step_id=analysis_step_id,
            analysis_step_name=analysis_step_name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_versions_id=software_versions_id,
            software_versions_name=software_versions_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analysis_step_versions_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        id,
        summary,
        analysis_step_id,
        analysis_step_name,
        award_id,
        award_component,
        lab_id,
        lab_title,
        software_versions_id,
        software_versions_name,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'analysis_step.@id': 'multi',
            'analysis_step.name': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'software_versions.@id': 'multi',
            'software_versions.name': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if analysis_step_id is not None:
            
            _query_params.append(('analysis_step.@id', analysis_step_id))
            
        if analysis_step_name is not None:
            
            _query_params.append(('analysis_step.name', analysis_step_name))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if software_versions_id is not None:
            
            _query_params.append(('software_versions.@id', software_versions_id))
            
        if software_versions_name is not None:
            
            _query_params.append(('software_versions.name', software_versions_name))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analysis-step-versions/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def analysis_steps(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_types")] = None,
        step_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by step_label")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        input_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_content_types")] = None,
        output_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by output_content_types")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        parents_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by parents.@id")] = None,
        parents_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by parents.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        workflow_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.@id")] = None,
        workflow_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.accession")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalysisStepResults:
        """List items in the AnalysisStep collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_types: Filter by analysis_step_types
        :type analysis_step_types: List[str]
        :param step_label: Filter by step_label
        :type step_label: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param input_content_types: Filter by input_content_types
        :type input_content_types: List[str]
        :param output_content_types: Filter by output_content_types
        :type output_content_types: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param parents_id: Filter by parents.@id
        :type parents_id: List[str]
        :param parents_title: Filter by parents.title
        :type parents_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param workflow_id: Filter by workflow.@id
        :type workflow_id: List[str]
        :param workflow_accession: Filter by workflow.accession
        :type workflow_accession: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_steps_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_types=analysis_step_types,
            step_label=step_label,
            title=title,
            input_content_types=input_content_types,
            output_content_types=output_content_types,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            parents_id=parents_id,
            parents_title=parents_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            workflow_id=workflow_id,
            workflow_accession=workflow_accession,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analysis_steps_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_types")] = None,
        step_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by step_label")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        input_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_content_types")] = None,
        output_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by output_content_types")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        parents_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by parents.@id")] = None,
        parents_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by parents.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        workflow_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.@id")] = None,
        workflow_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.accession")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalysisStepResults]:
        """List items in the AnalysisStep collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_types: Filter by analysis_step_types
        :type analysis_step_types: List[str]
        :param step_label: Filter by step_label
        :type step_label: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param input_content_types: Filter by input_content_types
        :type input_content_types: List[str]
        :param output_content_types: Filter by output_content_types
        :type output_content_types: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param parents_id: Filter by parents.@id
        :type parents_id: List[str]
        :param parents_title: Filter by parents.title
        :type parents_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param workflow_id: Filter by workflow.@id
        :type workflow_id: List[str]
        :param workflow_accession: Filter by workflow.accession
        :type workflow_accession: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_steps_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_types=analysis_step_types,
            step_label=step_label,
            title=title,
            input_content_types=input_content_types,
            output_content_types=output_content_types,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            parents_id=parents_id,
            parents_title=parents_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            workflow_id=workflow_id,
            workflow_accession=workflow_accession,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analysis_steps_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_types")] = None,
        step_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by step_label")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        input_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_content_types")] = None,
        output_content_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by output_content_types")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        parents_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by parents.@id")] = None,
        parents_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by parents.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        workflow_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.@id")] = None,
        workflow_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow.accession")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AnalysisStep collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_types: Filter by analysis_step_types
        :type analysis_step_types: List[str]
        :param step_label: Filter by step_label
        :type step_label: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param input_content_types: Filter by input_content_types
        :type input_content_types: List[str]
        :param output_content_types: Filter by output_content_types
        :type output_content_types: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param parents_id: Filter by parents.@id
        :type parents_id: List[str]
        :param parents_title: Filter by parents.title
        :type parents_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param workflow_id: Filter by workflow.@id
        :type workflow_id: List[str]
        :param workflow_accession: Filter by workflow.accession
        :type workflow_accession: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analysis_steps_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_types=analysis_step_types,
            step_label=step_label,
            title=title,
            input_content_types=input_content_types,
            output_content_types=output_content_types,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            parents_id=parents_id,
            parents_title=parents_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            workflow_id=workflow_id,
            workflow_accession=workflow_accession,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalysisStepResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analysis_steps_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_types,
        step_label,
        title,
        input_content_types,
        output_content_types,
        id,
        summary,
        name,
        award_id,
        award_component,
        lab_id,
        lab_title,
        parents_id,
        parents_title,
        submitted_by_id,
        submitted_by_title,
        workflow_id,
        workflow_accession,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_types': 'multi',
            'step_label': 'multi',
            'title': 'multi',
            'input_content_types': 'multi',
            'output_content_types': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'parents.@id': 'multi',
            'parents.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'workflow.@id': 'multi',
            'workflow.accession': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_types is not None:
            
            _query_params.append(('analysis_step_types', analysis_step_types))
            
        if step_label is not None:
            
            _query_params.append(('step_label', step_label))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if input_content_types is not None:
            
            _query_params.append(('input_content_types', input_content_types))
            
        if output_content_types is not None:
            
            _query_params.append(('output_content_types', output_content_types))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if parents_id is not None:
            
            _query_params.append(('parents.@id', parents_id))
            
        if parents_title is not None:
            
            _query_params.append(('parents.title', parents_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if workflow_id is not None:
            
            _query_params.append(('workflow.@id', workflow_id))
            
        if workflow_accession is not None:
            
            _query_params.append(('workflow.accession', workflow_accession))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analysis-steps/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def assay_terms(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        preferred_assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_titles")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        assay_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_slims")] = None,
        category_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by category_slims")] = None,
        objective_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by objective_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssayTermResults:
        """List items in the AssayTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param preferred_assay_titles: Filter by preferred_assay_titles
        :type preferred_assay_titles: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param assay_slims: Filter by assay_slims
        :type assay_slims: List[str]
        :param category_slims: Filter by category_slims
        :type category_slims: List[str]
        :param objective_slims: Filter by objective_slims
        :type objective_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assay_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            preferred_assay_titles=preferred_assay_titles,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            assay_slims=assay_slims,
            category_slims=category_slims,
            objective_slims=objective_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssayTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def assay_terms_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        preferred_assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_titles")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        assay_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_slims")] = None,
        category_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by category_slims")] = None,
        objective_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by objective_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssayTermResults]:
        """List items in the AssayTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param preferred_assay_titles: Filter by preferred_assay_titles
        :type preferred_assay_titles: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param assay_slims: Filter by assay_slims
        :type assay_slims: List[str]
        :param category_slims: Filter by category_slims
        :type category_slims: List[str]
        :param objective_slims: Filter by objective_slims
        :type objective_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assay_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            preferred_assay_titles=preferred_assay_titles,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            assay_slims=assay_slims,
            category_slims=category_slims,
            objective_slims=objective_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssayTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def assay_terms_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        preferred_assay_titles: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_titles")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        assay_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_slims")] = None,
        category_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by category_slims")] = None,
        objective_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by objective_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AssayTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param preferred_assay_titles: Filter by preferred_assay_titles
        :type preferred_assay_titles: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param assay_slims: Filter by assay_slims
        :type assay_slims: List[str]
        :param category_slims: Filter by category_slims
        :type category_slims: List[str]
        :param objective_slims: Filter by objective_slims
        :type objective_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._assay_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            preferred_assay_titles=preferred_assay_titles,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            assay_slims=assay_slims,
            category_slims=category_slims,
            objective_slims=objective_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssayTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _assay_terms_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        term_id,
        term_name,
        deprecated_ntr_terms,
        is_a,
        preferred_assay_titles,
        id,
        summary,
        name,
        synonyms,
        ancestors,
        ontology,
        assay_slims,
        category_slims,
        objective_slims,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'term_id': 'multi',
            'term_name': 'multi',
            'deprecated_ntr_terms': 'multi',
            'is_a': 'multi',
            'preferred_assay_titles': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'synonyms': 'multi',
            'ancestors': 'multi',
            'ontology': 'multi',
            'assay_slims': 'multi',
            'category_slims': 'multi',
            'objective_slims': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if term_id is not None:
            
            _query_params.append(('term_id', term_id))
            
        if term_name is not None:
            
            _query_params.append(('term_name', term_name))
            
        if deprecated_ntr_terms is not None:
            
            _query_params.append(('deprecated_ntr_terms', deprecated_ntr_terms))
            
        if is_a is not None:
            
            _query_params.append(('is_a', is_a))
            
        if preferred_assay_titles is not None:
            
            _query_params.append(('preferred_assay_titles', preferred_assay_titles))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if ancestors is not None:
            
            _query_params.append(('ancestors', ancestors))
            
        if ontology is not None:
            
            _query_params.append(('ontology', ontology))
            
        if assay_slims is not None:
            
            _query_params.append(('assay_slims', assay_slims))
            
        if category_slims is not None:
            
            _query_params.append(('category_slims', category_slims))
            
        if objective_slims is not None:
            
            _query_params.append(('objective_slims', objective_slims))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/assay-terms/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def auxiliary_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        library_construction_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        measurement_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.@id")] = None,
        measurement_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.accession")] = None,
        measurement_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by measurement_sets.aliases")] = None,
        measurement_sets_preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.preferred_assay_title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AuxiliarySetResults:
        """List items in the AuxiliarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param library_construction_platform: Filter by library_construction_platform
        :type library_construction_platform: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param measurement_sets_id: Filter by measurement_sets.@id
        :type measurement_sets_id: List[str]
        :param measurement_sets_accession: Filter by measurement_sets.accession
        :type measurement_sets_accession: List[str]
        :param measurement_sets_aliases: Filter by measurement_sets.aliases
        :type measurement_sets_aliases: List[str]
        :param measurement_sets_preferred_assay_title: Filter by measurement_sets.preferred_assay_title
        :type measurement_sets_preferred_assay_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._auxiliary_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            library_construction_platform=library_construction_platform,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            measurement_sets_id=measurement_sets_id,
            measurement_sets_accession=measurement_sets_accession,
            measurement_sets_aliases=measurement_sets_aliases,
            measurement_sets_preferred_assay_title=measurement_sets_preferred_assay_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuxiliarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def auxiliary_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        library_construction_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        measurement_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.@id")] = None,
        measurement_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.accession")] = None,
        measurement_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by measurement_sets.aliases")] = None,
        measurement_sets_preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.preferred_assay_title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AuxiliarySetResults]:
        """List items in the AuxiliarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param library_construction_platform: Filter by library_construction_platform
        :type library_construction_platform: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param measurement_sets_id: Filter by measurement_sets.@id
        :type measurement_sets_id: List[str]
        :param measurement_sets_accession: Filter by measurement_sets.accession
        :type measurement_sets_accession: List[str]
        :param measurement_sets_aliases: Filter by measurement_sets.aliases
        :type measurement_sets_aliases: List[str]
        :param measurement_sets_preferred_assay_title: Filter by measurement_sets.preferred_assay_title
        :type measurement_sets_preferred_assay_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._auxiliary_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            library_construction_platform=library_construction_platform,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            measurement_sets_id=measurement_sets_id,
            measurement_sets_accession=measurement_sets_accession,
            measurement_sets_aliases=measurement_sets_aliases,
            measurement_sets_preferred_assay_title=measurement_sets_preferred_assay_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuxiliarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def auxiliary_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        library_construction_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        measurement_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.@id")] = None,
        measurement_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.accession")] = None,
        measurement_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by measurement_sets.aliases")] = None,
        measurement_sets_preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by measurement_sets.preferred_assay_title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the AuxiliarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param library_construction_platform: Filter by library_construction_platform
        :type library_construction_platform: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param measurement_sets_id: Filter by measurement_sets.@id
        :type measurement_sets_id: List[str]
        :param measurement_sets_accession: Filter by measurement_sets.accession
        :type measurement_sets_accession: List[str]
        :param measurement_sets_aliases: Filter by measurement_sets.aliases
        :type measurement_sets_aliases: List[str]
        :param measurement_sets_preferred_assay_title: Filter by measurement_sets.preferred_assay_title
        :type measurement_sets_preferred_assay_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._auxiliary_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            library_construction_platform=library_construction_platform,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            measurement_sets_id=measurement_sets_id,
            measurement_sets_accession=measurement_sets_accession,
            measurement_sets_aliases=measurement_sets_aliases,
            measurement_sets_preferred_assay_title=measurement_sets_preferred_assay_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AuxiliarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _auxiliary_sets_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        library_construction_platform,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform,
        files_submitted_file_name,
        files_upload_status,
        lab_id,
        lab_title,
        measurement_sets_id,
        measurement_sets_accession,
        measurement_sets_aliases,
        measurement_sets_preferred_assay_title,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments,
        samples_classifications,
        samples_construct_library_sets,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            'library_construction_platform': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'measurement_sets.@id': 'multi',
            'measurement_sets.accession': 'multi',
            'measurement_sets.aliases': 'multi',
            'measurement_sets.preferred_assay_title': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if library_construction_platform is not None:
            
            _query_params.append(('library_construction_platform', library_construction_platform))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform is not None:
            
            _query_params.append(('files.sequencing_platform', files_sequencing_platform))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if measurement_sets_id is not None:
            
            _query_params.append(('measurement_sets.@id', measurement_sets_id))
            
        if measurement_sets_accession is not None:
            
            _query_params.append(('measurement_sets.accession', measurement_sets_accession))
            
        if measurement_sets_aliases is not None:
            
            _query_params.append(('measurement_sets.aliases', measurement_sets_aliases))
            
        if measurement_sets_preferred_assay_title is not None:
            
            _query_params.append(('measurement_sets.preferred_assay_title', measurement_sets_preferred_assay_title))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments', samples_cell_fate_change_treatments))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets is not None:
            
            _query_params.append(('samples.construct_library_sets', samples_construct_library_sets))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications is not None:
            
            _query_params.append(('samples.modifications', samples_modifications))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments is not None:
            
            _query_params.append(('samples.treatments', samples_treatments))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auxiliary-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def awards(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        start_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by start_date")] = None,
        end_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by end_date")] = None,
        pis: Annotated[Optional[List[StrictStr]], Field(description="Filter by pis")] = None,
        contact_pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by contact_pi")] = None,
        project: Annotated[Optional[List[StrictStr]], Field(description="Filter by project")] = None,
        viewing_group: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_group")] = None,
        component: Annotated[Optional[List[StrictStr]], Field(description="Filter by component")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AwardResults:
        """List items in the Award collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param start_date: Filter by start_date
        :type start_date: List[str]
        :param end_date: Filter by end_date
        :type end_date: List[str]
        :param pis: Filter by pis
        :type pis: List[str]
        :param contact_pi: Filter by contact_pi
        :type contact_pi: List[str]
        :param project: Filter by project
        :type project: List[str]
        :param viewing_group: Filter by viewing_group
        :type viewing_group: List[str]
        :param component: Filter by component
        :type component: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._awards_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            start_date=start_date,
            end_date=end_date,
            pis=pis,
            contact_pi=contact_pi,
            project=project,
            viewing_group=viewing_group,
            component=component,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwardResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def awards_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        start_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by start_date")] = None,
        end_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by end_date")] = None,
        pis: Annotated[Optional[List[StrictStr]], Field(description="Filter by pis")] = None,
        contact_pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by contact_pi")] = None,
        project: Annotated[Optional[List[StrictStr]], Field(description="Filter by project")] = None,
        viewing_group: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_group")] = None,
        component: Annotated[Optional[List[StrictStr]], Field(description="Filter by component")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AwardResults]:
        """List items in the Award collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param start_date: Filter by start_date
        :type start_date: List[str]
        :param end_date: Filter by end_date
        :type end_date: List[str]
        :param pis: Filter by pis
        :type pis: List[str]
        :param contact_pi: Filter by contact_pi
        :type contact_pi: List[str]
        :param project: Filter by project
        :type project: List[str]
        :param viewing_group: Filter by viewing_group
        :type viewing_group: List[str]
        :param component: Filter by component
        :type component: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._awards_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            start_date=start_date,
            end_date=end_date,
            pis=pis,
            contact_pi=contact_pi,
            project=project,
            viewing_group=viewing_group,
            component=component,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwardResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def awards_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        start_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by start_date")] = None,
        end_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by end_date")] = None,
        pis: Annotated[Optional[List[StrictStr]], Field(description="Filter by pis")] = None,
        contact_pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by contact_pi")] = None,
        project: Annotated[Optional[List[StrictStr]], Field(description="Filter by project")] = None,
        viewing_group: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_group")] = None,
        component: Annotated[Optional[List[StrictStr]], Field(description="Filter by component")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Award collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param start_date: Filter by start_date
        :type start_date: List[str]
        :param end_date: Filter by end_date
        :type end_date: List[str]
        :param pis: Filter by pis
        :type pis: List[str]
        :param contact_pi: Filter by contact_pi
        :type contact_pi: List[str]
        :param project: Filter by project
        :type project: List[str]
        :param viewing_group: Filter by viewing_group
        :type viewing_group: List[str]
        :param component: Filter by component
        :type component: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._awards_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            start_date=start_date,
            end_date=end_date,
            pis=pis,
            contact_pi=contact_pi,
            project=project,
            viewing_group=viewing_group,
            component=component,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwardResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _awards_serialize(
        self,
        query,
        limit,
        sort,
        status,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        title,
        name,
        start_date,
        end_date,
        pis,
        contact_pi,
        project,
        viewing_group,
        component,
        id,
        summary,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'status': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'title': 'multi',
            'name': 'multi',
            'start_date': 'multi',
            'end_date': 'multi',
            'pis': 'multi',
            'contact_pi': 'multi',
            'project': 'multi',
            'viewing_group': 'multi',
            'component': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if start_date is not None:
            
            _query_params.append(('start_date', start_date))
            
        if end_date is not None:
            
            _query_params.append(('end_date', end_date))
            
        if pis is not None:
            
            _query_params.append(('pis', pis))
            
        if contact_pi is not None:
            
            _query_params.append(('contact_pi', contact_pi))
            
        if project is not None:
            
            _query_params.append(('project', project))
            
        if viewing_group is not None:
            
            _query_params.append(('viewing_group', viewing_group))
            
        if component is not None:
            
            _query_params.append(('component', component))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/awards/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def batch_download(
        self,
        type: Annotated[List[StrictStr], Field(description="Type of objects to return. Can be repeated for multiple types.")],
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """List files to download based on search query. All results are returned.

        Generates TSV of files contained in FileSets in search results.

        :param type: Type of objects to return. Can be repeated for multiple types. (required)
        :type type: List[str]
        :param query: Query string for searching.
        :type query: str
        :param field_filters: Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_download_serialize(
            type=type,
            query=query,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def batch_download_with_http_info(
        self,
        type: Annotated[List[StrictStr], Field(description="Type of objects to return. Can be repeated for multiple types.")],
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """List files to download based on search query. All results are returned.

        Generates TSV of files contained in FileSets in search results.

        :param type: Type of objects to return. Can be repeated for multiple types. (required)
        :type type: List[str]
        :param query: Query string for searching.
        :type query: str
        :param field_filters: Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_download_serialize(
            type=type,
            query=query,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def batch_download_without_preload_content(
        self,
        type: Annotated[List[StrictStr], Field(description="Type of objects to return. Can be repeated for multiple types.")],
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List files to download based on search query. All results are returned.

        Generates TSV of files contained in FileSets in search results.

        :param type: Type of objects to return. Can be repeated for multiple types. (required)
        :type type: List[str]
        :param query: Query string for searching.
        :type query: str
        :param field_filters: Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_download_serialize(
            type=type,
            query=query,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _batch_download_serialize(
        self,
        type,
        query,
        field_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if field_filters is not None:
            for k, v in field_filters.items():
                _query_params.append((k, v))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/tab-separated-values', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/batch-download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def biomarkers(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        classification: Annotated[Optional[List[StrictStr]], Field(description="Filter by classification")] = None,
        quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantification")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name_quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by name_quantification")] = None,
        biomarker_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarker_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BiomarkerResults:
        """List items in the Biomarker collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param classification: Filter by classification
        :type classification: List[str]
        :param quantification: Filter by quantification
        :type quantification: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param gene: Filter by gene
        :type gene: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name_quantification: Filter by name_quantification
        :type name_quantification: List[str]
        :param biomarker_for: Filter by biomarker_for
        :type biomarker_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_name: Filter by award.name
        :type award_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._biomarkers_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            classification=classification,
            quantification=quantification,
            synonyms=synonyms,
            gene=gene,
            id=id,
            summary=summary,
            name_quantification=name_quantification,
            biomarker_for=biomarker_for,
            award_id=award_id,
            award_component=award_component,
            award_name=award_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiomarkerResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def biomarkers_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        classification: Annotated[Optional[List[StrictStr]], Field(description="Filter by classification")] = None,
        quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantification")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name_quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by name_quantification")] = None,
        biomarker_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarker_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BiomarkerResults]:
        """List items in the Biomarker collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param classification: Filter by classification
        :type classification: List[str]
        :param quantification: Filter by quantification
        :type quantification: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param gene: Filter by gene
        :type gene: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name_quantification: Filter by name_quantification
        :type name_quantification: List[str]
        :param biomarker_for: Filter by biomarker_for
        :type biomarker_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_name: Filter by award.name
        :type award_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._biomarkers_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            classification=classification,
            quantification=quantification,
            synonyms=synonyms,
            gene=gene,
            id=id,
            summary=summary,
            name_quantification=name_quantification,
            biomarker_for=biomarker_for,
            award_id=award_id,
            award_component=award_component,
            award_name=award_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiomarkerResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def biomarkers_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        classification: Annotated[Optional[List[StrictStr]], Field(description="Filter by classification")] = None,
        quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantification")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name_quantification: Annotated[Optional[List[StrictStr]], Field(description="Filter by name_quantification")] = None,
        biomarker_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarker_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Biomarker collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param classification: Filter by classification
        :type classification: List[str]
        :param quantification: Filter by quantification
        :type quantification: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param gene: Filter by gene
        :type gene: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name_quantification: Filter by name_quantification
        :type name_quantification: List[str]
        :param biomarker_for: Filter by biomarker_for
        :type biomarker_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_name: Filter by award.name
        :type award_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._biomarkers_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            classification=classification,
            quantification=quantification,
            synonyms=synonyms,
            gene=gene,
            id=id,
            summary=summary,
            name_quantification=name_quantification,
            biomarker_for=biomarker_for,
            award_id=award_id,
            award_component=award_component,
            award_name=award_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BiomarkerResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _biomarkers_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        name,
        classification,
        quantification,
        synonyms,
        gene,
        id,
        summary,
        name_quantification,
        biomarker_for,
        award_id,
        award_component,
        award_name,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'name': 'multi',
            'classification': 'multi',
            'quantification': 'multi',
            'synonyms': 'multi',
            'gene': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name_quantification': 'multi',
            'biomarker_for': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.name': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if classification is not None:
            
            _query_params.append(('classification', classification))
            
        if quantification is not None:
            
            _query_params.append(('quantification', quantification))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if gene is not None:
            
            _query_params.append(('gene', gene))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name_quantification is not None:
            
            _query_params.append(('name_quantification', name_quantification))
            
        if biomarker_for is not None:
            
            _query_params.append(('biomarker_for', biomarker_for))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_name is not None:
            
            _query_params.append(('award.name', award_name))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/biomarkers/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def configuration_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        seqspec_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspec_of")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConfigurationFileResults:
        """List items in the ConfigurationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param seqspec_of: Filter by seqspec_of
        :type seqspec_of: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._configuration_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            seqspec_of=seqspec_of,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def configuration_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        seqspec_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspec_of")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConfigurationFileResults]:
        """List items in the ConfigurationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param seqspec_of: Filter by seqspec_of
        :type seqspec_of: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._configuration_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            seqspec_of=seqspec_of,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def configuration_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        seqspec_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspec_of")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ConfigurationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param seqspec_of: Filter by seqspec_of
        :type seqspec_of: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._configuration_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            seqspec_of=seqspec_of,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConfigurationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _configuration_files_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        seqspec_of,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'seqspec_of': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if seqspec_of is not None:
            
            _query_params.append(('seqspec_of', seqspec_of))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/configuration-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def construct_library_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        selection_criteria: Annotated[Optional[List[StrictStr]], Field(description="Filter by selection_criteria")] = None,
        integrated_content_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_content_files")] = None,
        exon: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by exon")] = None,
        guide_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by guide_type")] = None,
        tiling_modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by tiling_modality")] = None,
        average_guide_coverage: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_guide_coverage")] = None,
        lower_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_guide_coverage")] = None,
        upper_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_guide_coverage")] = None,
        average_insert_size: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_insert_size")] = None,
        lower_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_insert_size")] = None,
        upper_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_insert_size")] = None,
        targeton: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeton")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        applied_to_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.@id")] = None,
        applied_to_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.accession")] = None,
        applied_to_samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.aliases")] = None,
        applied_to_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.disease_terms.@id")] = None,
        applied_to_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.disease_terms.term_name")] = None,
        applied_to_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.sample_terms.@id")] = None,
        applied_to_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.sample_terms.term_name")] = None,
        applied_to_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.status")] = None,
        applied_to_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.summary")] = None,
        associated_phenotypes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by associated_phenotypes.@id")] = None,
        associated_phenotypes_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_id")] = None,
        associated_phenotypes_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        orf_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.@id")] = None,
        orf_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.aliases")] = None,
        orf_list_gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.gene")] = None,
        orf_list_orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.orf_id")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ConstructLibrarySetResults:
        """List items in the ConstructLibrarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param selection_criteria: Filter by selection_criteria
        :type selection_criteria: List[str]
        :param integrated_content_files: Filter by integrated_content_files
        :type integrated_content_files: List[str]
        :param exon: Filter by exon
        :type exon: List[str]
        :param guide_type: Filter by guide_type
        :type guide_type: List[str]
        :param tiling_modality: Filter by tiling_modality
        :type tiling_modality: List[str]
        :param average_guide_coverage: Filter by average_guide_coverage
        :type average_guide_coverage: List[float]
        :param lower_bound_guide_coverage: Filter by lower_bound_guide_coverage
        :type lower_bound_guide_coverage: List[int]
        :param upper_bound_guide_coverage: Filter by upper_bound_guide_coverage
        :type upper_bound_guide_coverage: List[int]
        :param average_insert_size: Filter by average_insert_size
        :type average_insert_size: List[float]
        :param lower_bound_insert_size: Filter by lower_bound_insert_size
        :type lower_bound_insert_size: List[int]
        :param upper_bound_insert_size: Filter by upper_bound_insert_size
        :type upper_bound_insert_size: List[int]
        :param targeton: Filter by targeton
        :type targeton: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param applied_to_samples_id: Filter by applied_to_samples.@id
        :type applied_to_samples_id: List[str]
        :param applied_to_samples_accession: Filter by applied_to_samples.accession
        :type applied_to_samples_accession: List[str]
        :param applied_to_samples_aliases: Filter by applied_to_samples.aliases
        :type applied_to_samples_aliases: List[str]
        :param applied_to_samples_disease_terms_id: Filter by applied_to_samples.disease_terms.@id
        :type applied_to_samples_disease_terms_id: List[str]
        :param applied_to_samples_disease_terms_term_name: Filter by applied_to_samples.disease_terms.term_name
        :type applied_to_samples_disease_terms_term_name: List[str]
        :param applied_to_samples_sample_terms_id: Filter by applied_to_samples.sample_terms.@id
        :type applied_to_samples_sample_terms_id: List[str]
        :param applied_to_samples_sample_terms_term_name: Filter by applied_to_samples.sample_terms.term_name
        :type applied_to_samples_sample_terms_term_name: List[str]
        :param applied_to_samples_status: Filter by applied_to_samples.status
        :type applied_to_samples_status: List[str]
        :param applied_to_samples_summary: Filter by applied_to_samples.summary
        :type applied_to_samples_summary: List[str]
        :param associated_phenotypes_id: Filter by associated_phenotypes.@id
        :type associated_phenotypes_id: List[str]
        :param associated_phenotypes_term_id: Filter by associated_phenotypes.term_id
        :type associated_phenotypes_term_id: List[str]
        :param associated_phenotypes_term_name: Filter by associated_phenotypes.term_name
        :type associated_phenotypes_term_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param orf_list_id: Filter by orf_list.@id
        :type orf_list_id: List[str]
        :param orf_list_aliases: Filter by orf_list.aliases
        :type orf_list_aliases: List[str]
        :param orf_list_gene: Filter by orf_list.gene
        :type orf_list_gene: List[str]
        :param orf_list_orf_id: Filter by orf_list.orf_id
        :type orf_list_orf_id: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._construct_library_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            file_set_type=file_set_type,
            scope=scope,
            selection_criteria=selection_criteria,
            integrated_content_files=integrated_content_files,
            exon=exon,
            guide_type=guide_type,
            tiling_modality=tiling_modality,
            average_guide_coverage=average_guide_coverage,
            lower_bound_guide_coverage=lower_bound_guide_coverage,
            upper_bound_guide_coverage=upper_bound_guide_coverage,
            average_insert_size=average_insert_size,
            lower_bound_insert_size=lower_bound_insert_size,
            upper_bound_insert_size=upper_bound_insert_size,
            targeton=targeton,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            applied_to_samples_id=applied_to_samples_id,
            applied_to_samples_accession=applied_to_samples_accession,
            applied_to_samples_aliases=applied_to_samples_aliases,
            applied_to_samples_disease_terms_id=applied_to_samples_disease_terms_id,
            applied_to_samples_disease_terms_term_name=applied_to_samples_disease_terms_term_name,
            applied_to_samples_sample_terms_id=applied_to_samples_sample_terms_id,
            applied_to_samples_sample_terms_term_name=applied_to_samples_sample_terms_term_name,
            applied_to_samples_status=applied_to_samples_status,
            applied_to_samples_summary=applied_to_samples_summary,
            associated_phenotypes_id=associated_phenotypes_id,
            associated_phenotypes_term_id=associated_phenotypes_term_id,
            associated_phenotypes_term_name=associated_phenotypes_term_name,
            award_id=award_id,
            award_component=award_component,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_file_format=files_file_format,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            orf_list_id=orf_list_id,
            orf_list_aliases=orf_list_aliases,
            orf_list_gene=orf_list_gene,
            orf_list_orf_id=orf_list_orf_id,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConstructLibrarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def construct_library_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        selection_criteria: Annotated[Optional[List[StrictStr]], Field(description="Filter by selection_criteria")] = None,
        integrated_content_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_content_files")] = None,
        exon: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by exon")] = None,
        guide_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by guide_type")] = None,
        tiling_modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by tiling_modality")] = None,
        average_guide_coverage: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_guide_coverage")] = None,
        lower_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_guide_coverage")] = None,
        upper_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_guide_coverage")] = None,
        average_insert_size: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_insert_size")] = None,
        lower_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_insert_size")] = None,
        upper_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_insert_size")] = None,
        targeton: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeton")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        applied_to_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.@id")] = None,
        applied_to_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.accession")] = None,
        applied_to_samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.aliases")] = None,
        applied_to_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.disease_terms.@id")] = None,
        applied_to_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.disease_terms.term_name")] = None,
        applied_to_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.sample_terms.@id")] = None,
        applied_to_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.sample_terms.term_name")] = None,
        applied_to_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.status")] = None,
        applied_to_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.summary")] = None,
        associated_phenotypes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by associated_phenotypes.@id")] = None,
        associated_phenotypes_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_id")] = None,
        associated_phenotypes_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        orf_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.@id")] = None,
        orf_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.aliases")] = None,
        orf_list_gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.gene")] = None,
        orf_list_orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.orf_id")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ConstructLibrarySetResults]:
        """List items in the ConstructLibrarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param selection_criteria: Filter by selection_criteria
        :type selection_criteria: List[str]
        :param integrated_content_files: Filter by integrated_content_files
        :type integrated_content_files: List[str]
        :param exon: Filter by exon
        :type exon: List[str]
        :param guide_type: Filter by guide_type
        :type guide_type: List[str]
        :param tiling_modality: Filter by tiling_modality
        :type tiling_modality: List[str]
        :param average_guide_coverage: Filter by average_guide_coverage
        :type average_guide_coverage: List[float]
        :param lower_bound_guide_coverage: Filter by lower_bound_guide_coverage
        :type lower_bound_guide_coverage: List[int]
        :param upper_bound_guide_coverage: Filter by upper_bound_guide_coverage
        :type upper_bound_guide_coverage: List[int]
        :param average_insert_size: Filter by average_insert_size
        :type average_insert_size: List[float]
        :param lower_bound_insert_size: Filter by lower_bound_insert_size
        :type lower_bound_insert_size: List[int]
        :param upper_bound_insert_size: Filter by upper_bound_insert_size
        :type upper_bound_insert_size: List[int]
        :param targeton: Filter by targeton
        :type targeton: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param applied_to_samples_id: Filter by applied_to_samples.@id
        :type applied_to_samples_id: List[str]
        :param applied_to_samples_accession: Filter by applied_to_samples.accession
        :type applied_to_samples_accession: List[str]
        :param applied_to_samples_aliases: Filter by applied_to_samples.aliases
        :type applied_to_samples_aliases: List[str]
        :param applied_to_samples_disease_terms_id: Filter by applied_to_samples.disease_terms.@id
        :type applied_to_samples_disease_terms_id: List[str]
        :param applied_to_samples_disease_terms_term_name: Filter by applied_to_samples.disease_terms.term_name
        :type applied_to_samples_disease_terms_term_name: List[str]
        :param applied_to_samples_sample_terms_id: Filter by applied_to_samples.sample_terms.@id
        :type applied_to_samples_sample_terms_id: List[str]
        :param applied_to_samples_sample_terms_term_name: Filter by applied_to_samples.sample_terms.term_name
        :type applied_to_samples_sample_terms_term_name: List[str]
        :param applied_to_samples_status: Filter by applied_to_samples.status
        :type applied_to_samples_status: List[str]
        :param applied_to_samples_summary: Filter by applied_to_samples.summary
        :type applied_to_samples_summary: List[str]
        :param associated_phenotypes_id: Filter by associated_phenotypes.@id
        :type associated_phenotypes_id: List[str]
        :param associated_phenotypes_term_id: Filter by associated_phenotypes.term_id
        :type associated_phenotypes_term_id: List[str]
        :param associated_phenotypes_term_name: Filter by associated_phenotypes.term_name
        :type associated_phenotypes_term_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param orf_list_id: Filter by orf_list.@id
        :type orf_list_id: List[str]
        :param orf_list_aliases: Filter by orf_list.aliases
        :type orf_list_aliases: List[str]
        :param orf_list_gene: Filter by orf_list.gene
        :type orf_list_gene: List[str]
        :param orf_list_orf_id: Filter by orf_list.orf_id
        :type orf_list_orf_id: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._construct_library_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            file_set_type=file_set_type,
            scope=scope,
            selection_criteria=selection_criteria,
            integrated_content_files=integrated_content_files,
            exon=exon,
            guide_type=guide_type,
            tiling_modality=tiling_modality,
            average_guide_coverage=average_guide_coverage,
            lower_bound_guide_coverage=lower_bound_guide_coverage,
            upper_bound_guide_coverage=upper_bound_guide_coverage,
            average_insert_size=average_insert_size,
            lower_bound_insert_size=lower_bound_insert_size,
            upper_bound_insert_size=upper_bound_insert_size,
            targeton=targeton,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            applied_to_samples_id=applied_to_samples_id,
            applied_to_samples_accession=applied_to_samples_accession,
            applied_to_samples_aliases=applied_to_samples_aliases,
            applied_to_samples_disease_terms_id=applied_to_samples_disease_terms_id,
            applied_to_samples_disease_terms_term_name=applied_to_samples_disease_terms_term_name,
            applied_to_samples_sample_terms_id=applied_to_samples_sample_terms_id,
            applied_to_samples_sample_terms_term_name=applied_to_samples_sample_terms_term_name,
            applied_to_samples_status=applied_to_samples_status,
            applied_to_samples_summary=applied_to_samples_summary,
            associated_phenotypes_id=associated_phenotypes_id,
            associated_phenotypes_term_id=associated_phenotypes_term_id,
            associated_phenotypes_term_name=associated_phenotypes_term_name,
            award_id=award_id,
            award_component=award_component,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_file_format=files_file_format,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            orf_list_id=orf_list_id,
            orf_list_aliases=orf_list_aliases,
            orf_list_gene=orf_list_gene,
            orf_list_orf_id=orf_list_orf_id,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConstructLibrarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def construct_library_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        selection_criteria: Annotated[Optional[List[StrictStr]], Field(description="Filter by selection_criteria")] = None,
        integrated_content_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_content_files")] = None,
        exon: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by exon")] = None,
        guide_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by guide_type")] = None,
        tiling_modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by tiling_modality")] = None,
        average_guide_coverage: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_guide_coverage")] = None,
        lower_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_guide_coverage")] = None,
        upper_bound_guide_coverage: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_guide_coverage")] = None,
        average_insert_size: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by average_insert_size")] = None,
        lower_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by lower_bound_insert_size")] = None,
        upper_bound_insert_size: Annotated[Optional[List[StrictInt]], Field(description="Filter by upper_bound_insert_size")] = None,
        targeton: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeton")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        applied_to_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.@id")] = None,
        applied_to_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.accession")] = None,
        applied_to_samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.aliases")] = None,
        applied_to_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.disease_terms.@id")] = None,
        applied_to_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.disease_terms.term_name")] = None,
        applied_to_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.sample_terms.@id")] = None,
        applied_to_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by applied_to_samples.sample_terms.term_name")] = None,
        applied_to_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.status")] = None,
        applied_to_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by applied_to_samples.summary")] = None,
        associated_phenotypes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by associated_phenotypes.@id")] = None,
        associated_phenotypes_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_id")] = None,
        associated_phenotypes_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by associated_phenotypes.term_name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        orf_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.@id")] = None,
        orf_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.aliases")] = None,
        orf_list_gene: Annotated[Optional[List[StrictStr]], Field(description="Filter by orf_list.gene")] = None,
        orf_list_orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_list.orf_id")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ConstructLibrarySet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param selection_criteria: Filter by selection_criteria
        :type selection_criteria: List[str]
        :param integrated_content_files: Filter by integrated_content_files
        :type integrated_content_files: List[str]
        :param exon: Filter by exon
        :type exon: List[str]
        :param guide_type: Filter by guide_type
        :type guide_type: List[str]
        :param tiling_modality: Filter by tiling_modality
        :type tiling_modality: List[str]
        :param average_guide_coverage: Filter by average_guide_coverage
        :type average_guide_coverage: List[float]
        :param lower_bound_guide_coverage: Filter by lower_bound_guide_coverage
        :type lower_bound_guide_coverage: List[int]
        :param upper_bound_guide_coverage: Filter by upper_bound_guide_coverage
        :type upper_bound_guide_coverage: List[int]
        :param average_insert_size: Filter by average_insert_size
        :type average_insert_size: List[float]
        :param lower_bound_insert_size: Filter by lower_bound_insert_size
        :type lower_bound_insert_size: List[int]
        :param upper_bound_insert_size: Filter by upper_bound_insert_size
        :type upper_bound_insert_size: List[int]
        :param targeton: Filter by targeton
        :type targeton: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param applied_to_samples_id: Filter by applied_to_samples.@id
        :type applied_to_samples_id: List[str]
        :param applied_to_samples_accession: Filter by applied_to_samples.accession
        :type applied_to_samples_accession: List[str]
        :param applied_to_samples_aliases: Filter by applied_to_samples.aliases
        :type applied_to_samples_aliases: List[str]
        :param applied_to_samples_disease_terms_id: Filter by applied_to_samples.disease_terms.@id
        :type applied_to_samples_disease_terms_id: List[str]
        :param applied_to_samples_disease_terms_term_name: Filter by applied_to_samples.disease_terms.term_name
        :type applied_to_samples_disease_terms_term_name: List[str]
        :param applied_to_samples_sample_terms_id: Filter by applied_to_samples.sample_terms.@id
        :type applied_to_samples_sample_terms_id: List[str]
        :param applied_to_samples_sample_terms_term_name: Filter by applied_to_samples.sample_terms.term_name
        :type applied_to_samples_sample_terms_term_name: List[str]
        :param applied_to_samples_status: Filter by applied_to_samples.status
        :type applied_to_samples_status: List[str]
        :param applied_to_samples_summary: Filter by applied_to_samples.summary
        :type applied_to_samples_summary: List[str]
        :param associated_phenotypes_id: Filter by associated_phenotypes.@id
        :type associated_phenotypes_id: List[str]
        :param associated_phenotypes_term_id: Filter by associated_phenotypes.term_id
        :type associated_phenotypes_term_id: List[str]
        :param associated_phenotypes_term_name: Filter by associated_phenotypes.term_name
        :type associated_phenotypes_term_name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param orf_list_id: Filter by orf_list.@id
        :type orf_list_id: List[str]
        :param orf_list_aliases: Filter by orf_list.aliases
        :type orf_list_aliases: List[str]
        :param orf_list_gene: Filter by orf_list.gene
        :type orf_list_gene: List[str]
        :param orf_list_orf_id: Filter by orf_list.orf_id
        :type orf_list_orf_id: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._construct_library_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            file_set_type=file_set_type,
            scope=scope,
            selection_criteria=selection_criteria,
            integrated_content_files=integrated_content_files,
            exon=exon,
            guide_type=guide_type,
            tiling_modality=tiling_modality,
            average_guide_coverage=average_guide_coverage,
            lower_bound_guide_coverage=lower_bound_guide_coverage,
            upper_bound_guide_coverage=upper_bound_guide_coverage,
            average_insert_size=average_insert_size,
            lower_bound_insert_size=lower_bound_insert_size,
            upper_bound_insert_size=upper_bound_insert_size,
            targeton=targeton,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            applied_to_samples_id=applied_to_samples_id,
            applied_to_samples_accession=applied_to_samples_accession,
            applied_to_samples_aliases=applied_to_samples_aliases,
            applied_to_samples_disease_terms_id=applied_to_samples_disease_terms_id,
            applied_to_samples_disease_terms_term_name=applied_to_samples_disease_terms_term_name,
            applied_to_samples_sample_terms_id=applied_to_samples_sample_terms_id,
            applied_to_samples_sample_terms_term_name=applied_to_samples_sample_terms_term_name,
            applied_to_samples_status=applied_to_samples_status,
            applied_to_samples_summary=applied_to_samples_summary,
            associated_phenotypes_id=associated_phenotypes_id,
            associated_phenotypes_term_id=associated_phenotypes_term_id,
            associated_phenotypes_term_name=associated_phenotypes_term_name,
            award_id=award_id,
            award_component=award_component,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_file_format=files_file_format,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            orf_list_id=orf_list_id,
            orf_list_aliases=orf_list_aliases,
            orf_list_gene=orf_list_gene,
            orf_list_orf_id=orf_list_orf_id,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ConstructLibrarySetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _construct_library_sets_serialize(
        self,
        query,
        limit,
        sort,
        small_scale_loci_list,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        sources,
        lot_id,
        product_id,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        file_set_type,
        scope,
        selection_criteria,
        integrated_content_files,
        exon,
        guide_type,
        tiling_modality,
        average_guide_coverage,
        lower_bound_guide_coverage,
        upper_bound_guide_coverage,
        average_insert_size,
        lower_bound_insert_size,
        upper_bound_insert_size,
        targeton,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        applied_to_samples_id,
        applied_to_samples_accession,
        applied_to_samples_aliases,
        applied_to_samples_disease_terms_id,
        applied_to_samples_disease_terms_term_name,
        applied_to_samples_sample_terms_id,
        applied_to_samples_sample_terms_term_name,
        applied_to_samples_status,
        applied_to_samples_summary,
        associated_phenotypes_id,
        associated_phenotypes_term_id,
        associated_phenotypes_term_name,
        award_id,
        award_component,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_file_format,
        files_upload_status,
        lab_id,
        lab_title,
        large_scale_gene_list_id,
        large_scale_gene_list_accession,
        large_scale_gene_list_aliases,
        large_scale_loci_list_id,
        large_scale_loci_list_accession,
        large_scale_loci_list_aliases,
        orf_list_id,
        orf_list_aliases,
        orf_list_gene,
        orf_list_orf_id,
        small_scale_gene_list_id,
        small_scale_gene_list_geneid,
        small_scale_gene_list_name,
        small_scale_gene_list_symbol,
        small_scale_gene_list_synonyms,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'small_scale_loci_list': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'sources': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'file_set_type': 'multi',
            'scope': 'multi',
            'selection_criteria': 'multi',
            'integrated_content_files': 'multi',
            'exon': 'multi',
            'guide_type': 'multi',
            'tiling_modality': 'multi',
            'average_guide_coverage': 'multi',
            'lower_bound_guide_coverage': 'multi',
            'upper_bound_guide_coverage': 'multi',
            'average_insert_size': 'multi',
            'lower_bound_insert_size': 'multi',
            'upper_bound_insert_size': 'multi',
            'targeton': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'applied_to_samples.@id': 'multi',
            'applied_to_samples.accession': 'multi',
            'applied_to_samples.aliases': 'multi',
            'applied_to_samples.disease_terms.@id': 'multi',
            'applied_to_samples.disease_terms.term_name': 'multi',
            'applied_to_samples.sample_terms.@id': 'multi',
            'applied_to_samples.sample_terms.term_name': 'multi',
            'applied_to_samples.status': 'multi',
            'applied_to_samples.summary': 'multi',
            'associated_phenotypes.@id': 'multi',
            'associated_phenotypes.term_id': 'multi',
            'associated_phenotypes.term_name': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.file_format': 'multi',
            'files.upload_status': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'large_scale_gene_list.@id': 'multi',
            'large_scale_gene_list.accession': 'multi',
            'large_scale_gene_list.aliases': 'multi',
            'large_scale_loci_list.@id': 'multi',
            'large_scale_loci_list.accession': 'multi',
            'large_scale_loci_list.aliases': 'multi',
            'orf_list.@id': 'multi',
            'orf_list.aliases': 'multi',
            'orf_list.gene': 'multi',
            'orf_list.orf_id': 'multi',
            'small_scale_gene_list.@id': 'multi',
            'small_scale_gene_list.geneid': 'multi',
            'small_scale_gene_list.name': 'multi',
            'small_scale_gene_list.symbol': 'multi',
            'small_scale_gene_list.synonyms': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if small_scale_loci_list is not None:
            
            _query_params.append(('small_scale_loci_list', small_scale_loci_list))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if selection_criteria is not None:
            
            _query_params.append(('selection_criteria', selection_criteria))
            
        if integrated_content_files is not None:
            
            _query_params.append(('integrated_content_files', integrated_content_files))
            
        if exon is not None:
            
            _query_params.append(('exon', exon))
            
        if guide_type is not None:
            
            _query_params.append(('guide_type', guide_type))
            
        if tiling_modality is not None:
            
            _query_params.append(('tiling_modality', tiling_modality))
            
        if average_guide_coverage is not None:
            
            _query_params.append(('average_guide_coverage', average_guide_coverage))
            
        if lower_bound_guide_coverage is not None:
            
            _query_params.append(('lower_bound_guide_coverage', lower_bound_guide_coverage))
            
        if upper_bound_guide_coverage is not None:
            
            _query_params.append(('upper_bound_guide_coverage', upper_bound_guide_coverage))
            
        if average_insert_size is not None:
            
            _query_params.append(('average_insert_size', average_insert_size))
            
        if lower_bound_insert_size is not None:
            
            _query_params.append(('lower_bound_insert_size', lower_bound_insert_size))
            
        if upper_bound_insert_size is not None:
            
            _query_params.append(('upper_bound_insert_size', upper_bound_insert_size))
            
        if targeton is not None:
            
            _query_params.append(('targeton', targeton))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if applied_to_samples_id is not None:
            
            _query_params.append(('applied_to_samples.@id', applied_to_samples_id))
            
        if applied_to_samples_accession is not None:
            
            _query_params.append(('applied_to_samples.accession', applied_to_samples_accession))
            
        if applied_to_samples_aliases is not None:
            
            _query_params.append(('applied_to_samples.aliases', applied_to_samples_aliases))
            
        if applied_to_samples_disease_terms_id is not None:
            
            _query_params.append(('applied_to_samples.disease_terms.@id', applied_to_samples_disease_terms_id))
            
        if applied_to_samples_disease_terms_term_name is not None:
            
            _query_params.append(('applied_to_samples.disease_terms.term_name', applied_to_samples_disease_terms_term_name))
            
        if applied_to_samples_sample_terms_id is not None:
            
            _query_params.append(('applied_to_samples.sample_terms.@id', applied_to_samples_sample_terms_id))
            
        if applied_to_samples_sample_terms_term_name is not None:
            
            _query_params.append(('applied_to_samples.sample_terms.term_name', applied_to_samples_sample_terms_term_name))
            
        if applied_to_samples_status is not None:
            
            _query_params.append(('applied_to_samples.status', applied_to_samples_status))
            
        if applied_to_samples_summary is not None:
            
            _query_params.append(('applied_to_samples.summary', applied_to_samples_summary))
            
        if associated_phenotypes_id is not None:
            
            _query_params.append(('associated_phenotypes.@id', associated_phenotypes_id))
            
        if associated_phenotypes_term_id is not None:
            
            _query_params.append(('associated_phenotypes.term_id', associated_phenotypes_term_id))
            
        if associated_phenotypes_term_name is not None:
            
            _query_params.append(('associated_phenotypes.term_name', associated_phenotypes_term_name))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if large_scale_gene_list_id is not None:
            
            _query_params.append(('large_scale_gene_list.@id', large_scale_gene_list_id))
            
        if large_scale_gene_list_accession is not None:
            
            _query_params.append(('large_scale_gene_list.accession', large_scale_gene_list_accession))
            
        if large_scale_gene_list_aliases is not None:
            
            _query_params.append(('large_scale_gene_list.aliases', large_scale_gene_list_aliases))
            
        if large_scale_loci_list_id is not None:
            
            _query_params.append(('large_scale_loci_list.@id', large_scale_loci_list_id))
            
        if large_scale_loci_list_accession is not None:
            
            _query_params.append(('large_scale_loci_list.accession', large_scale_loci_list_accession))
            
        if large_scale_loci_list_aliases is not None:
            
            _query_params.append(('large_scale_loci_list.aliases', large_scale_loci_list_aliases))
            
        if orf_list_id is not None:
            
            _query_params.append(('orf_list.@id', orf_list_id))
            
        if orf_list_aliases is not None:
            
            _query_params.append(('orf_list.aliases', orf_list_aliases))
            
        if orf_list_gene is not None:
            
            _query_params.append(('orf_list.gene', orf_list_gene))
            
        if orf_list_orf_id is not None:
            
            _query_params.append(('orf_list.orf_id', orf_list_orf_id))
            
        if small_scale_gene_list_id is not None:
            
            _query_params.append(('small_scale_gene_list.@id', small_scale_gene_list_id))
            
        if small_scale_gene_list_geneid is not None:
            
            _query_params.append(('small_scale_gene_list.geneid', small_scale_gene_list_geneid))
            
        if small_scale_gene_list_name is not None:
            
            _query_params.append(('small_scale_gene_list.name', small_scale_gene_list_name))
            
        if small_scale_gene_list_symbol is not None:
            
            _query_params.append(('small_scale_gene_list.symbol', small_scale_gene_list_symbol))
            
        if small_scale_gene_list_synonyms is not None:
            
            _query_params.append(('small_scale_gene_list.synonyms', small_scale_gene_list_synonyms))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/construct-library-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def crispr_modifications(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        cas: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas")] = None,
        fused_domain: Annotated[Optional[List[StrictStr]], Field(description="Filter by fused_domain")] = None,
        tagged_protein: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_protein")] = None,
        cas_species: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas_species")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CrisprModificationResults:
        """List items in the CrisprModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param cas: Filter by cas
        :type cas: List[str]
        :param fused_domain: Filter by fused_domain
        :type fused_domain: List[str]
        :param tagged_protein: Filter by tagged_protein
        :type tagged_protein: List[str]
        :param cas_species: Filter by cas_species
        :type cas_species: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crispr_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            cas=cas,
            fused_domain=fused_domain,
            tagged_protein=tagged_protein,
            cas_species=cas_species,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrisprModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def crispr_modifications_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        cas: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas")] = None,
        fused_domain: Annotated[Optional[List[StrictStr]], Field(description="Filter by fused_domain")] = None,
        tagged_protein: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_protein")] = None,
        cas_species: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas_species")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CrisprModificationResults]:
        """List items in the CrisprModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param cas: Filter by cas
        :type cas: List[str]
        :param fused_domain: Filter by fused_domain
        :type fused_domain: List[str]
        :param tagged_protein: Filter by tagged_protein
        :type tagged_protein: List[str]
        :param cas_species: Filter by cas_species
        :type cas_species: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crispr_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            cas=cas,
            fused_domain=fused_domain,
            tagged_protein=tagged_protein,
            cas_species=cas_species,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrisprModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def crispr_modifications_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        cas: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas")] = None,
        fused_domain: Annotated[Optional[List[StrictStr]], Field(description="Filter by fused_domain")] = None,
        tagged_protein: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_protein")] = None,
        cas_species: Annotated[Optional[List[StrictStr]], Field(description="Filter by cas_species")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the CrisprModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param cas: Filter by cas
        :type cas: List[str]
        :param fused_domain: Filter by fused_domain
        :type fused_domain: List[str]
        :param tagged_protein: Filter by tagged_protein
        :type tagged_protein: List[str]
        :param cas_species: Filter by cas_species
        :type cas_species: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._crispr_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            cas=cas,
            fused_domain=fused_domain,
            tagged_protein=tagged_protein,
            cas_species=cas_species,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CrisprModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _crispr_modifications_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        sources,
        lot_id,
        product_id,
        documents,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        activated,
        activating_agent_term_id,
        activating_agent_term_name,
        modality,
        cas,
        fused_domain,
        tagged_protein,
        cas_species,
        id,
        summary,
        biosamples_modified,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'sources': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'activated': 'multi',
            'activating_agent_term_id': 'multi',
            'activating_agent_term_name': 'multi',
            'modality': 'multi',
            'cas': 'multi',
            'fused_domain': 'multi',
            'tagged_protein': 'multi',
            'cas_species': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'biosamples_modified': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if activated is not None:
            
            _query_params.append(('activated', activated))
            
        if activating_agent_term_id is not None:
            
            _query_params.append(('activating_agent_term_id', activating_agent_term_id))
            
        if activating_agent_term_name is not None:
            
            _query_params.append(('activating_agent_term_name', activating_agent_term_name))
            
        if modality is not None:
            
            _query_params.append(('modality', modality))
            
        if cas is not None:
            
            _query_params.append(('cas', cas))
            
        if fused_domain is not None:
            
            _query_params.append(('fused_domain', fused_domain))
            
        if tagged_protein is not None:
            
            _query_params.append(('tagged_protein', tagged_protein))
            
        if cas_species is not None:
            
            _query_params.append(('cas_species', cas_species))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if biosamples_modified is not None:
            
            _query_params.append(('biosamples_modified', biosamples_modified))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/crispr-modifications/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def curated_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assemblies: Annotated[Optional[List[StrictStr]], Field(description="Filter by assemblies")] = None,
        transcriptome_annotations: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotations")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CuratedSetResults:
        """List items in the CuratedSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assemblies: Filter by assemblies
        :type assemblies: List[str]
        :param transcriptome_annotations: Filter by transcriptome_annotations
        :type transcriptome_annotations: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._curated_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assemblies=assemblies,
            transcriptome_annotations=transcriptome_annotations,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CuratedSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def curated_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assemblies: Annotated[Optional[List[StrictStr]], Field(description="Filter by assemblies")] = None,
        transcriptome_annotations: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotations")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CuratedSetResults]:
        """List items in the CuratedSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assemblies: Filter by assemblies
        :type assemblies: List[str]
        :param transcriptome_annotations: Filter by transcriptome_annotations
        :type transcriptome_annotations: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._curated_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assemblies=assemblies,
            transcriptome_annotations=transcriptome_annotations,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CuratedSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def curated_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assemblies: Annotated[Optional[List[StrictStr]], Field(description="Filter by assemblies")] = None,
        transcriptome_annotations: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotations")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the CuratedSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assemblies: Filter by assemblies
        :type assemblies: List[str]
        :param transcriptome_annotations: Filter by transcriptome_annotations
        :type transcriptome_annotations: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._curated_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assemblies=assemblies,
            transcriptome_annotations=transcriptome_annotations,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CuratedSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _curated_sets_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        taxa,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        assemblies,
        transcriptome_annotations,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform,
        files_submitted_file_name,
        files_upload_status,
        lab_id,
        lab_title,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments,
        samples_classifications,
        samples_construct_library_sets,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'taxa': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'assemblies': 'multi',
            'transcriptome_annotations': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if assemblies is not None:
            
            _query_params.append(('assemblies', assemblies))
            
        if transcriptome_annotations is not None:
            
            _query_params.append(('transcriptome_annotations', transcriptome_annotations))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform is not None:
            
            _query_params.append(('files.sequencing_platform', files_sequencing_platform))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments', samples_cell_fate_change_treatments))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets is not None:
            
            _query_params.append(('samples.construct_library_sets', samples_construct_library_sets))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications is not None:
            
            _query_params.append(('samples.modifications', samples_modifications))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments is not None:
            
            _query_params.append(('samples.treatments', samples_treatments))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/curated-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def degron_modifications(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        degron_system: Annotated[Optional[List[StrictStr]], Field(description="Filter by degron_system")] = None,
        tagged_proteins: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_proteins")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DegronModificationResults:
        """List items in the DegronModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param degron_system: Filter by degron_system
        :type degron_system: List[str]
        :param tagged_proteins: Filter by tagged_proteins
        :type tagged_proteins: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._degron_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            degron_system=degron_system,
            tagged_proteins=tagged_proteins,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DegronModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def degron_modifications_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        degron_system: Annotated[Optional[List[StrictStr]], Field(description="Filter by degron_system")] = None,
        tagged_proteins: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_proteins")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DegronModificationResults]:
        """List items in the DegronModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param degron_system: Filter by degron_system
        :type degron_system: List[str]
        :param tagged_proteins: Filter by tagged_proteins
        :type tagged_proteins: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._degron_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            degron_system=degron_system,
            tagged_proteins=tagged_proteins,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DegronModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def degron_modifications_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        activated: Annotated[Optional[List[StrictBool]], Field(description="Filter by activated")] = None,
        activating_agent_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by activating_agent_term_id")] = None,
        activating_agent_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by activating_agent_term_name")] = None,
        modality: Annotated[Optional[List[StrictStr]], Field(description="Filter by modality")] = None,
        degron_system: Annotated[Optional[List[StrictStr]], Field(description="Filter by degron_system")] = None,
        tagged_proteins: Annotated[Optional[List[StrictStr]], Field(description="Filter by tagged_proteins")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_modified: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_modified")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the DegronModification collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param activated: Filter by activated
        :type activated: List[bool]
        :param activating_agent_term_id: Filter by activating_agent_term_id
        :type activating_agent_term_id: List[str]
        :param activating_agent_term_name: Filter by activating_agent_term_name
        :type activating_agent_term_name: List[str]
        :param modality: Filter by modality
        :type modality: List[str]
        :param degron_system: Filter by degron_system
        :type degron_system: List[str]
        :param tagged_proteins: Filter by tagged_proteins
        :type tagged_proteins: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_modified: Filter by biosamples_modified
        :type biosamples_modified: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._degron_modifications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            sources=sources,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            activated=activated,
            activating_agent_term_id=activating_agent_term_id,
            activating_agent_term_name=activating_agent_term_name,
            modality=modality,
            degron_system=degron_system,
            tagged_proteins=tagged_proteins,
            id=id,
            summary=summary,
            biosamples_modified=biosamples_modified,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DegronModificationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _degron_modifications_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        sources,
        lot_id,
        product_id,
        documents,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        activated,
        activating_agent_term_id,
        activating_agent_term_name,
        modality,
        degron_system,
        tagged_proteins,
        id,
        summary,
        biosamples_modified,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'sources': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'activated': 'multi',
            'activating_agent_term_id': 'multi',
            'activating_agent_term_name': 'multi',
            'modality': 'multi',
            'degron_system': 'multi',
            'tagged_proteins': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'biosamples_modified': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if activated is not None:
            
            _query_params.append(('activated', activated))
            
        if activating_agent_term_id is not None:
            
            _query_params.append(('activating_agent_term_id', activating_agent_term_id))
            
        if activating_agent_term_name is not None:
            
            _query_params.append(('activating_agent_term_name', activating_agent_term_name))
            
        if modality is not None:
            
            _query_params.append(('modality', modality))
            
        if degron_system is not None:
            
            _query_params.append(('degron_system', degron_system))
            
        if tagged_proteins is not None:
            
            _query_params.append(('tagged_proteins', tagged_proteins))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if biosamples_modified is not None:
            
            _query_params.append(('biosamples_modified', biosamples_modified))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/degron-modifications/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def documents(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        document_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by document_type")] = None,
        characterization_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by characterization_method")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentResults:
        """List items in the Document collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param document_type: Filter by document_type
        :type document_type: List[str]
        :param characterization_method: Filter by characterization_method
        :type characterization_method: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._documents_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            document_type=document_type,
            characterization_method=characterization_method,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def documents_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        document_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by document_type")] = None,
        characterization_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by characterization_method")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentResults]:
        """List items in the Document collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param document_type: Filter by document_type
        :type document_type: List[str]
        :param characterization_method: Filter by characterization_method
        :type characterization_method: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._documents_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            document_type=document_type,
            characterization_method=characterization_method,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def documents_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        document_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by document_type")] = None,
        characterization_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by characterization_method")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Document collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param document_type: Filter by document_type
        :type document_type: List[str]
        :param characterization_method: Filter by characterization_method
        :type characterization_method: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._documents_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            document_type=document_type,
            characterization_method=characterization_method,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _documents_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        document_type,
        characterization_method,
        urls,
        id,
        summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'document_type': 'multi',
            'characterization_method': 'multi',
            'urls': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if document_type is not None:
            
            _query_params.append(('document_type', document_type))
            
        if characterization_method is not None:
            
            _query_params.append(('characterization_method', characterization_method))
            
        if urls is not None:
            
            _query_params.append(('urls', urls))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/documents/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def download(
        self,
        file_id: Annotated[StrictStr, Field(description="The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """Download file.

        Returns underlying file associated with file metadata

        :param file_id: The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`). (required)
        :type file_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_serialize(
            file_id=file_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def download_with_http_info(
        self,
        file_id: Annotated[StrictStr, Field(description="The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """Download file.

        Returns underlying file associated with file metadata

        :param file_id: The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`). (required)
        :type file_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_serialize(
            file_id=file_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def download_without_preload_content(
        self,
        file_id: Annotated[StrictStr, Field(description="The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download file.

        Returns underlying file associated with file metadata

        :param file_id: The unique identifier for the file to download, i.e. @id (`/tabular-files/IGVFFI8092FZKL/`), accession (`IGVFFI8092FZKL`), or UUID (`fdbdc159-e5b9-40a8-b788-3f72c9886b03`). (required)
        :type file_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_serialize(
            file_id=file_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _download_serialize(
        self,
        file_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_id is not None:
            _path_params['file_id'] = file_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/octet-stream'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{file_id}/@@download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def genes(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by geneid")] = None,
        symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by symbol")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        locations: Annotated[Optional[List[GeneLocation]], Field(description="Filter by locations")] = None,
        version_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        geneid_with_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by geneid_with_version")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GeneResults:
        """List items in the Gene collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param geneid: Filter by geneid
        :type geneid: List[str]
        :param symbol: Filter by symbol
        :type symbol: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param locations: Filter by locations
        :type locations: List[GeneLocation]
        :param version_number: Filter by version_number
        :type version_number: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param geneid_with_version: Filter by geneid_with_version
        :type geneid_with_version: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genes_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            transcriptome_annotation=transcriptome_annotation,
            taxa=taxa,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            geneid=geneid,
            symbol=symbol,
            name=name,
            synonyms=synonyms,
            dbxrefs=dbxrefs,
            locations=locations,
            version_number=version_number,
            id=id,
            summary=summary,
            title=title,
            geneid_with_version=geneid_with_version,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeneResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def genes_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by geneid")] = None,
        symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by symbol")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        locations: Annotated[Optional[List[GeneLocation]], Field(description="Filter by locations")] = None,
        version_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        geneid_with_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by geneid_with_version")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GeneResults]:
        """List items in the Gene collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param geneid: Filter by geneid
        :type geneid: List[str]
        :param symbol: Filter by symbol
        :type symbol: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param locations: Filter by locations
        :type locations: List[GeneLocation]
        :param version_number: Filter by version_number
        :type version_number: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param geneid_with_version: Filter by geneid_with_version
        :type geneid_with_version: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genes_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            transcriptome_annotation=transcriptome_annotation,
            taxa=taxa,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            geneid=geneid,
            symbol=symbol,
            name=name,
            synonyms=synonyms,
            dbxrefs=dbxrefs,
            locations=locations,
            version_number=version_number,
            id=id,
            summary=summary,
            title=title,
            geneid_with_version=geneid_with_version,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeneResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def genes_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by geneid")] = None,
        symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by symbol")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        locations: Annotated[Optional[List[GeneLocation]], Field(description="Filter by locations")] = None,
        version_number: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        geneid_with_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by geneid_with_version")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Gene collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param geneid: Filter by geneid
        :type geneid: List[str]
        :param symbol: Filter by symbol
        :type symbol: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param locations: Filter by locations
        :type locations: List[GeneLocation]
        :param version_number: Filter by version_number
        :type version_number: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param geneid_with_version: Filter by geneid_with_version
        :type geneid_with_version: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genes_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            transcriptome_annotation=transcriptome_annotation,
            taxa=taxa,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            geneid=geneid,
            symbol=symbol,
            name=name,
            synonyms=synonyms,
            dbxrefs=dbxrefs,
            locations=locations,
            version_number=version_number,
            id=id,
            summary=summary,
            title=title,
            geneid_with_version=geneid_with_version,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GeneResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _genes_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        transcriptome_annotation,
        taxa,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        geneid,
        symbol,
        name,
        synonyms,
        dbxrefs,
        locations,
        version_number,
        id,
        summary,
        title,
        geneid_with_version,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'transcriptome_annotation': 'multi',
            'taxa': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'geneid': 'multi',
            'symbol': 'multi',
            'name': 'multi',
            'synonyms': 'multi',
            'dbxrefs': 'multi',
            'locations': 'multi',
            'version_number': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'title': 'multi',
            'geneid_with_version': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if geneid is not None:
            
            _query_params.append(('geneid', geneid))
            
        if symbol is not None:
            
            _query_params.append(('symbol', symbol))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if locations is not None:
            
            _query_params.append(('locations', locations))
            
        if version_number is not None:
            
            _query_params.append(('version_number', version_number))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if geneid_with_version is not None:
            
            _query_params.append(('geneid_with_version', geneid_with_version))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/genes/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def genome_browser_annotation_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenomeBrowserAnnotationFileResults:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def genome_browser_annotation_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenomeBrowserAnnotationFileResults]:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def genome_browser_annotation_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the GenomeBrowserAnnotationFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._genome_browser_annotation_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenomeBrowserAnnotationFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _genome_browser_annotation_files_serialize(
        self,
        query,
        limit,
        sort,
        assembly,
        release_timestamp,
        file_format_type,
        transcriptome_annotation,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'assembly': 'multi',
            'release_timestamp': 'multi',
            'file_format_type': 'multi',
            'transcriptome_annotation': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if file_format_type is not None:
            
            _query_params.append(('file_format_type', file_format_type))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/genome-browser-annotation-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_by_id(
        self,
        resource_id: Annotated[StrictStr, Field(description="The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Item:
        """Get item information

        Retrieve detailed information about a specific item using its @id or uuid.

        :param resource_id: The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`). (required)
        :type resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_id_serialize(
            resource_id=resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '404': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_by_id_with_http_info(
        self,
        resource_id: Annotated[StrictStr, Field(description="The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Item]:
        """Get item information

        Retrieve detailed information about a specific item using its @id or uuid.

        :param resource_id: The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`). (required)
        :type resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_id_serialize(
            resource_id=resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '404': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_by_id_without_preload_content(
        self,
        resource_id: Annotated[StrictStr, Field(description="The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`).")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get item information

        Retrieve detailed information about a specific item using its @id or uuid.

        :param resource_id: The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`). (required)
        :type resource_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_by_id_serialize(
            resource_id=resource_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Item",
            '404': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_by_id_serialize(
        self,
        resource_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_id is not None:
            _path_params['resource_id'] = resource_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{resource_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def human_donors(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        related_donors_donor_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.@id")] = None,
        related_donors_donor_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.accession")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HumanDonorResults:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param related_donors_donor_id: Filter by related_donors.donor.@id
        :type related_donors_donor_id: List[str]
        :param related_donors_donor_accession: Filter by related_donors.donor.accession
        :type related_donors_donor_accession: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            related_donors_donor_id=related_donors_donor_id,
            related_donors_donor_accession=related_donors_donor_accession,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def human_donors_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        related_donors_donor_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.@id")] = None,
        related_donors_donor_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.accession")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HumanDonorResults]:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param related_donors_donor_id: Filter by related_donors.donor.@id
        :type related_donors_donor_id: List[str]
        :param related_donors_donor_accession: Filter by related_donors.donor.accession
        :type related_donors_donor_accession: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            related_donors_donor_id=related_donors_donor_id,
            related_donors_donor_accession=related_donors_donor_accession,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def human_donors_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        ethnicities: Annotated[Optional[List[StrictStr]], Field(description="Filter by ethnicities")] = None,
        human_donor_identifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by human_donor_identifiers")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        related_donors_donor_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.@id")] = None,
        related_donors_donor_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_donors.donor.accession")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the HumanDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param ethnicities: Filter by ethnicities
        :type ethnicities: List[str]
        :param human_donor_identifiers: Filter by human_donor_identifiers
        :type human_donor_identifiers: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param related_donors_donor_id: Filter by related_donors.donor.@id
        :type related_donors_donor_id: List[str]
        :param related_donors_donor_accession: Filter by related_donors.donor.accession
        :type related_donors_donor_accession: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._human_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            ethnicities=ethnicities,
            human_donor_identifiers=human_donor_identifiers,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            related_donors_donor_id=related_donors_donor_id,
            related_donors_donor_accession=related_donors_donor_accession,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HumanDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _human_donors_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        taxa,
        publications,
        publication_identifiers,
        url,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        sex,
        virtual,
        ethnicities,
        human_donor_identifiers,
        id,
        summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        phenotypic_features_id,
        phenotypic_features_feature_id,
        phenotypic_features_feature_term_id,
        phenotypic_features_feature_term_name,
        phenotypic_features_observation_date,
        phenotypic_features_quantity_units,
        related_donors_donor_id,
        related_donors_donor_accession,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'taxa': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'url': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'sex': 'multi',
            'virtual': 'multi',
            'ethnicities': 'multi',
            'human_donor_identifiers': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'phenotypic_features.@id': 'multi',
            'phenotypic_features.feature.@id': 'multi',
            'phenotypic_features.feature.term_id': 'multi',
            'phenotypic_features.feature.term_name': 'multi',
            'phenotypic_features.observation_date': 'multi',
            'phenotypic_features.quantity_units': 'multi',
            'related_donors.donor.@id': 'multi',
            'related_donors.donor.accession': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if ethnicities is not None:
            
            _query_params.append(('ethnicities', ethnicities))
            
        if human_donor_identifiers is not None:
            
            _query_params.append(('human_donor_identifiers', human_donor_identifiers))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if phenotypic_features_id is not None:
            
            _query_params.append(('phenotypic_features.@id', phenotypic_features_id))
            
        if phenotypic_features_feature_id is not None:
            
            _query_params.append(('phenotypic_features.feature.@id', phenotypic_features_feature_id))
            
        if phenotypic_features_feature_term_id is not None:
            
            _query_params.append(('phenotypic_features.feature.term_id', phenotypic_features_feature_term_id))
            
        if phenotypic_features_feature_term_name is not None:
            
            _query_params.append(('phenotypic_features.feature.term_name', phenotypic_features_feature_term_name))
            
        if phenotypic_features_observation_date is not None:
            
            _query_params.append(('phenotypic_features.observation_date', phenotypic_features_observation_date))
            
        if phenotypic_features_quantity_units is not None:
            
            _query_params.append(('phenotypic_features.quantity_units', phenotypic_features_quantity_units))
            
        if related_donors_donor_id is not None:
            
            _query_params.append(('related_donors.donor.@id', related_donors_donor_id))
            
        if related_donors_donor_accession is not None:
            
            _query_params.append(('related_donors.donor.accession', related_donors_donor_accession))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/human-donors/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def image_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageFileResults:
        """List items in the ImageFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def image_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageFileResults]:
        """List items in the ImageFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def image_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ImageFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._image_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _image_files_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/image-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def images(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        caption: Annotated[Optional[List[StrictStr]], Field(description="Filter by caption")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        thumb_nail: Annotated[Optional[List[StrictStr]], Field(description="Filter by thumb_nail")] = None,
        download_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_url")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ImageResults:
        """List items in the Image collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param caption: Filter by caption
        :type caption: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param thumb_nail: Filter by thumb_nail
        :type thumb_nail: List[str]
        :param download_url: Filter by download_url
        :type download_url: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            caption=caption,
            id=id,
            summary=summary,
            thumb_nail=thumb_nail,
            download_url=download_url,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def images_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        caption: Annotated[Optional[List[StrictStr]], Field(description="Filter by caption")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        thumb_nail: Annotated[Optional[List[StrictStr]], Field(description="Filter by thumb_nail")] = None,
        download_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_url")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ImageResults]:
        """List items in the Image collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param caption: Filter by caption
        :type caption: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param thumb_nail: Filter by thumb_nail
        :type thumb_nail: List[str]
        :param download_url: Filter by download_url
        :type download_url: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            caption=caption,
            id=id,
            summary=summary,
            thumb_nail=thumb_nail,
            download_url=download_url,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def images_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        caption: Annotated[Optional[List[StrictStr]], Field(description="Filter by caption")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        thumb_nail: Annotated[Optional[List[StrictStr]], Field(description="Filter by thumb_nail")] = None,
        download_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_url")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Image collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param caption: Filter by caption
        :type caption: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param thumb_nail: Filter by thumb_nail
        :type thumb_nail: List[str]
        :param download_url: Filter by download_url
        :type download_url: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._images_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            caption=caption,
            id=id,
            summary=summary,
            thumb_nail=thumb_nail,
            download_url=download_url,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ImageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _images_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        caption,
        id,
        summary,
        thumb_nail,
        download_url,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'caption': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'thumb_nail': 'multi',
            'download_url': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if caption is not None:
            
            _query_params.append(('caption', caption))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if thumb_nail is not None:
            
            _query_params.append(('thumb_nail', thumb_nail))
            
        if download_url is not None:
            
            _query_params.append(('download_url', download_url))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/images/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def in_vitro_systems(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        time_post_change: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_change")] = None,
        time_post_change_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_change_units")] = None,
        cell_fate_change_protocol: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_protocol")] = None,
        demultiplexed_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_from")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        targeted_sample_term: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_sample_term")] = None,
        growth_medium: Annotated[Optional[List[StrictStr]], Field(description="Filter by growth_medium")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        demultiplexed_to: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_to")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.@id")] = None,
        cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.purpose")] = None,
        cell_fate_change_treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.status")] = None,
        cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.summary")] = None,
        cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.treatment_type")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        originated_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.@id")] = None,
        originated_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InVitroSystemResults:
        """List items in the InVitroSystem collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param time_post_change: Filter by time_post_change
        :type time_post_change: List[float]
        :param time_post_change_units: Filter by time_post_change_units
        :type time_post_change_units: List[str]
        :param cell_fate_change_protocol: Filter by cell_fate_change_protocol
        :type cell_fate_change_protocol: List[str]
        :param demultiplexed_from: Filter by demultiplexed_from
        :type demultiplexed_from: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param targeted_sample_term: Filter by targeted_sample_term
        :type targeted_sample_term: List[str]
        :param growth_medium: Filter by growth_medium
        :type growth_medium: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param demultiplexed_to: Filter by demultiplexed_to
        :type demultiplexed_to: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param cell_fate_change_treatments_id: Filter by cell_fate_change_treatments.@id
        :type cell_fate_change_treatments_id: List[str]
        :param cell_fate_change_treatments_purpose: Filter by cell_fate_change_treatments.purpose
        :type cell_fate_change_treatments_purpose: List[str]
        :param cell_fate_change_treatments_status: Filter by cell_fate_change_treatments.status
        :type cell_fate_change_treatments_status: List[str]
        :param cell_fate_change_treatments_summary: Filter by cell_fate_change_treatments.summary
        :type cell_fate_change_treatments_summary: List[str]
        :param cell_fate_change_treatments_treatment_type: Filter by cell_fate_change_treatments.treatment_type
        :type cell_fate_change_treatments_treatment_type: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param originated_from_id: Filter by originated_from.@id
        :type originated_from_id: List[str]
        :param originated_from_accession: Filter by originated_from.accession
        :type originated_from_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._in_vitro_systems_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            classifications=classifications,
            time_post_change=time_post_change,
            time_post_change_units=time_post_change_units,
            cell_fate_change_protocol=cell_fate_change_protocol,
            demultiplexed_from=demultiplexed_from,
            passage_number=passage_number,
            targeted_sample_term=targeted_sample_term,
            growth_medium=growth_medium,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            demultiplexed_to=demultiplexed_to,
            award_id=award_id,
            award_component=award_component,
            cell_fate_change_treatments_id=cell_fate_change_treatments_id,
            cell_fate_change_treatments_purpose=cell_fate_change_treatments_purpose,
            cell_fate_change_treatments_status=cell_fate_change_treatments_status,
            cell_fate_change_treatments_summary=cell_fate_change_treatments_summary,
            cell_fate_change_treatments_treatment_type=cell_fate_change_treatments_treatment_type,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            originated_from_id=originated_from_id,
            originated_from_accession=originated_from_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InVitroSystemResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def in_vitro_systems_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        time_post_change: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_change")] = None,
        time_post_change_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_change_units")] = None,
        cell_fate_change_protocol: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_protocol")] = None,
        demultiplexed_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_from")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        targeted_sample_term: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_sample_term")] = None,
        growth_medium: Annotated[Optional[List[StrictStr]], Field(description="Filter by growth_medium")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        demultiplexed_to: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_to")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.@id")] = None,
        cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.purpose")] = None,
        cell_fate_change_treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.status")] = None,
        cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.summary")] = None,
        cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.treatment_type")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        originated_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.@id")] = None,
        originated_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InVitroSystemResults]:
        """List items in the InVitroSystem collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param time_post_change: Filter by time_post_change
        :type time_post_change: List[float]
        :param time_post_change_units: Filter by time_post_change_units
        :type time_post_change_units: List[str]
        :param cell_fate_change_protocol: Filter by cell_fate_change_protocol
        :type cell_fate_change_protocol: List[str]
        :param demultiplexed_from: Filter by demultiplexed_from
        :type demultiplexed_from: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param targeted_sample_term: Filter by targeted_sample_term
        :type targeted_sample_term: List[str]
        :param growth_medium: Filter by growth_medium
        :type growth_medium: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param demultiplexed_to: Filter by demultiplexed_to
        :type demultiplexed_to: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param cell_fate_change_treatments_id: Filter by cell_fate_change_treatments.@id
        :type cell_fate_change_treatments_id: List[str]
        :param cell_fate_change_treatments_purpose: Filter by cell_fate_change_treatments.purpose
        :type cell_fate_change_treatments_purpose: List[str]
        :param cell_fate_change_treatments_status: Filter by cell_fate_change_treatments.status
        :type cell_fate_change_treatments_status: List[str]
        :param cell_fate_change_treatments_summary: Filter by cell_fate_change_treatments.summary
        :type cell_fate_change_treatments_summary: List[str]
        :param cell_fate_change_treatments_treatment_type: Filter by cell_fate_change_treatments.treatment_type
        :type cell_fate_change_treatments_treatment_type: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param originated_from_id: Filter by originated_from.@id
        :type originated_from_id: List[str]
        :param originated_from_accession: Filter by originated_from.accession
        :type originated_from_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._in_vitro_systems_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            classifications=classifications,
            time_post_change=time_post_change,
            time_post_change_units=time_post_change_units,
            cell_fate_change_protocol=cell_fate_change_protocol,
            demultiplexed_from=demultiplexed_from,
            passage_number=passage_number,
            targeted_sample_term=targeted_sample_term,
            growth_medium=growth_medium,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            demultiplexed_to=demultiplexed_to,
            award_id=award_id,
            award_component=award_component,
            cell_fate_change_treatments_id=cell_fate_change_treatments_id,
            cell_fate_change_treatments_purpose=cell_fate_change_treatments_purpose,
            cell_fate_change_treatments_status=cell_fate_change_treatments_status,
            cell_fate_change_treatments_summary=cell_fate_change_treatments_summary,
            cell_fate_change_treatments_treatment_type=cell_fate_change_treatments_treatment_type,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            originated_from_id=originated_from_id,
            originated_from_accession=originated_from_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InVitroSystemResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def in_vitro_systems_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        time_post_change: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_change")] = None,
        time_post_change_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_change_units")] = None,
        cell_fate_change_protocol: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_protocol")] = None,
        demultiplexed_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_from")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        targeted_sample_term: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_sample_term")] = None,
        growth_medium: Annotated[Optional[List[StrictStr]], Field(description="Filter by growth_medium")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        demultiplexed_to: Annotated[Optional[List[StrictStr]], Field(description="Filter by demultiplexed_to")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.@id")] = None,
        cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.purpose")] = None,
        cell_fate_change_treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.status")] = None,
        cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.summary")] = None,
        cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_fate_change_treatments.treatment_type")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        originated_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.@id")] = None,
        originated_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the InVitroSystem collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param time_post_change: Filter by time_post_change
        :type time_post_change: List[float]
        :param time_post_change_units: Filter by time_post_change_units
        :type time_post_change_units: List[str]
        :param cell_fate_change_protocol: Filter by cell_fate_change_protocol
        :type cell_fate_change_protocol: List[str]
        :param demultiplexed_from: Filter by demultiplexed_from
        :type demultiplexed_from: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param targeted_sample_term: Filter by targeted_sample_term
        :type targeted_sample_term: List[str]
        :param growth_medium: Filter by growth_medium
        :type growth_medium: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param demultiplexed_to: Filter by demultiplexed_to
        :type demultiplexed_to: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param cell_fate_change_treatments_id: Filter by cell_fate_change_treatments.@id
        :type cell_fate_change_treatments_id: List[str]
        :param cell_fate_change_treatments_purpose: Filter by cell_fate_change_treatments.purpose
        :type cell_fate_change_treatments_purpose: List[str]
        :param cell_fate_change_treatments_status: Filter by cell_fate_change_treatments.status
        :type cell_fate_change_treatments_status: List[str]
        :param cell_fate_change_treatments_summary: Filter by cell_fate_change_treatments.summary
        :type cell_fate_change_treatments_summary: List[str]
        :param cell_fate_change_treatments_treatment_type: Filter by cell_fate_change_treatments.treatment_type
        :type cell_fate_change_treatments_treatment_type: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param originated_from_id: Filter by originated_from.@id
        :type originated_from_id: List[str]
        :param originated_from_accession: Filter by originated_from.accession
        :type originated_from_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._in_vitro_systems_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            classifications=classifications,
            time_post_change=time_post_change,
            time_post_change_units=time_post_change_units,
            cell_fate_change_protocol=cell_fate_change_protocol,
            demultiplexed_from=demultiplexed_from,
            passage_number=passage_number,
            targeted_sample_term=targeted_sample_term,
            growth_medium=growth_medium,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            demultiplexed_to=demultiplexed_to,
            award_id=award_id,
            award_component=award_component,
            cell_fate_change_treatments_id=cell_fate_change_treatments_id,
            cell_fate_change_treatments_purpose=cell_fate_change_treatments_purpose,
            cell_fate_change_treatments_status=cell_fate_change_treatments_status,
            cell_fate_change_treatments_summary=cell_fate_change_treatments_summary,
            cell_fate_change_treatments_treatment_type=cell_fate_change_treatments_treatment_type,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            originated_from_id=originated_from_id,
            originated_from_accession=originated_from_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InVitroSystemResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _in_vitro_systems_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        taxa,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        lower_bound_age,
        upper_bound_age,
        age_units,
        pooled_from,
        part_of,
        donors,
        biomarkers,
        embryonic,
        cellular_sub_pool,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        construct_library_sets,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        classifications,
        time_post_change,
        time_post_change_units,
        cell_fate_change_protocol,
        demultiplexed_from,
        passage_number,
        targeted_sample_term,
        growth_medium,
        id,
        summary,
        sorted_fractions,
        origin_of,
        sex,
        age,
        upper_bound_age_in_hours,
        lower_bound_age_in_hours,
        parts,
        pooled_in,
        demultiplexed_to,
        award_id,
        award_component,
        cell_fate_change_treatments_id,
        cell_fate_change_treatments_purpose,
        cell_fate_change_treatments_status,
        cell_fate_change_treatments_summary,
        cell_fate_change_treatments_treatment_type,
        disease_terms_id,
        disease_terms_term_name,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        institutional_certificates_id,
        institutional_certificates_certificate_identifier,
        lab_id,
        lab_title,
        modifications_id,
        modifications_status,
        modifications_summary,
        multiplexed_in_id,
        multiplexed_in_accession,
        originated_from_id,
        originated_from_accession,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        treatments_id,
        treatments_purpose,
        treatments_status,
        treatments_summary,
        treatments_treatment_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'taxa': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'lower_bound_age': 'multi',
            'upper_bound_age': 'multi',
            'age_units': 'multi',
            'pooled_from': 'multi',
            'part_of': 'multi',
            'donors': 'multi',
            'biomarkers': 'multi',
            'embryonic': 'multi',
            'cellular_sub_pool': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'construct_library_sets': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            'classifications': 'multi',
            'time_post_change': 'multi',
            'time_post_change_units': 'multi',
            'cell_fate_change_protocol': 'multi',
            'demultiplexed_from': 'multi',
            'passage_number': 'multi',
            'targeted_sample_term': 'multi',
            'growth_medium': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'sex': 'multi',
            'age': 'multi',
            'upper_bound_age_in_hours': 'multi',
            'lower_bound_age_in_hours': 'multi',
            'parts': 'multi',
            'pooled_in': 'multi',
            'demultiplexed_to': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'cell_fate_change_treatments.@id': 'multi',
            'cell_fate_change_treatments.purpose': 'multi',
            'cell_fate_change_treatments.status': 'multi',
            'cell_fate_change_treatments.summary': 'multi',
            'cell_fate_change_treatments.treatment_type': 'multi',
            'disease_terms.@id': 'multi',
            'disease_terms.term_name': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'institutional_certificates.@id': 'multi',
            'institutional_certificates.certificate_identifier': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'modifications.@id': 'multi',
            'modifications.status': 'multi',
            'modifications.summary': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'originated_from.@id': 'multi',
            'originated_from.accession': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'treatments.@id': 'multi',
            'treatments.purpose': 'multi',
            'treatments.status': 'multi',
            'treatments.summary': 'multi',
            'treatments.treatment_type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if lower_bound_age is not None:
            
            _query_params.append(('lower_bound_age', lower_bound_age))
            
        if upper_bound_age is not None:
            
            _query_params.append(('upper_bound_age', upper_bound_age))
            
        if age_units is not None:
            
            _query_params.append(('age_units', age_units))
            
        if pooled_from is not None:
            
            _query_params.append(('pooled_from', pooled_from))
            
        if part_of is not None:
            
            _query_params.append(('part_of', part_of))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if biomarkers is not None:
            
            _query_params.append(('biomarkers', biomarkers))
            
        if embryonic is not None:
            
            _query_params.append(('embryonic', embryonic))
            
        if cellular_sub_pool is not None:
            
            _query_params.append(('cellular_sub_pool', cellular_sub_pool))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if construct_library_sets is not None:
            
            _query_params.append(('construct_library_sets', construct_library_sets))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if time_post_change is not None:
            
            _query_params.append(('time_post_change', time_post_change))
            
        if time_post_change_units is not None:
            
            _query_params.append(('time_post_change_units', time_post_change_units))
            
        if cell_fate_change_protocol is not None:
            
            _query_params.append(('cell_fate_change_protocol', cell_fate_change_protocol))
            
        if demultiplexed_from is not None:
            
            _query_params.append(('demultiplexed_from', demultiplexed_from))
            
        if passage_number is not None:
            
            _query_params.append(('passage_number', passage_number))
            
        if targeted_sample_term is not None:
            
            _query_params.append(('targeted_sample_term', targeted_sample_term))
            
        if growth_medium is not None:
            
            _query_params.append(('growth_medium', growth_medium))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if age is not None:
            
            _query_params.append(('age', age))
            
        if upper_bound_age_in_hours is not None:
            
            _query_params.append(('upper_bound_age_in_hours', upper_bound_age_in_hours))
            
        if lower_bound_age_in_hours is not None:
            
            _query_params.append(('lower_bound_age_in_hours', lower_bound_age_in_hours))
            
        if parts is not None:
            
            _query_params.append(('parts', parts))
            
        if pooled_in is not None:
            
            _query_params.append(('pooled_in', pooled_in))
            
        if demultiplexed_to is not None:
            
            _query_params.append(('demultiplexed_to', demultiplexed_to))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if cell_fate_change_treatments_id is not None:
            
            _query_params.append(('cell_fate_change_treatments.@id', cell_fate_change_treatments_id))
            
        if cell_fate_change_treatments_purpose is not None:
            
            _query_params.append(('cell_fate_change_treatments.purpose', cell_fate_change_treatments_purpose))
            
        if cell_fate_change_treatments_status is not None:
            
            _query_params.append(('cell_fate_change_treatments.status', cell_fate_change_treatments_status))
            
        if cell_fate_change_treatments_summary is not None:
            
            _query_params.append(('cell_fate_change_treatments.summary', cell_fate_change_treatments_summary))
            
        if cell_fate_change_treatments_treatment_type is not None:
            
            _query_params.append(('cell_fate_change_treatments.treatment_type', cell_fate_change_treatments_treatment_type))
            
        if disease_terms_id is not None:
            
            _query_params.append(('disease_terms.@id', disease_terms_id))
            
        if disease_terms_term_name is not None:
            
            _query_params.append(('disease_terms.term_name', disease_terms_term_name))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if institutional_certificates_id is not None:
            
            _query_params.append(('institutional_certificates.@id', institutional_certificates_id))
            
        if institutional_certificates_certificate_identifier is not None:
            
            _query_params.append(('institutional_certificates.certificate_identifier', institutional_certificates_certificate_identifier))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if modifications_id is not None:
            
            _query_params.append(('modifications.@id', modifications_id))
            
        if modifications_status is not None:
            
            _query_params.append(('modifications.status', modifications_status))
            
        if modifications_summary is not None:
            
            _query_params.append(('modifications.summary', modifications_summary))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if originated_from_id is not None:
            
            _query_params.append(('originated_from.@id', originated_from_id))
            
        if originated_from_accession is not None:
            
            _query_params.append(('originated_from.accession', originated_from_accession))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if treatments_id is not None:
            
            _query_params.append(('treatments.@id', treatments_id))
            
        if treatments_purpose is not None:
            
            _query_params.append(('treatments.purpose', treatments_purpose))
            
        if treatments_status is not None:
            
            _query_params.append(('treatments.status', treatments_status))
            
        if treatments_summary is not None:
            
            _query_params.append(('treatments.summary', treatments_summary))
            
        if treatments_treatment_type is not None:
            
            _query_params.append(('treatments.treatment_type', treatments_treatment_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/in-vitro-systems/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def institutional_certificates(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by certificate_identifier")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        data_use_limitation: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation")] = None,
        data_use_limitation_modifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation_modifiers")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InstitutionalCertificateResults:
        """List items in the InstitutionalCertificate collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param certificate_identifier: Filter by certificate_identifier
        :type certificate_identifier: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param data_use_limitation: Filter by data_use_limitation
        :type data_use_limitation: List[str]
        :param data_use_limitation_modifiers: Filter by data_use_limitation_modifiers
        :type data_use_limitation_modifiers: List[str]
        :param samples: Filter by samples
        :type samples: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._institutional_certificates_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            certificate_identifier=certificate_identifier,
            controlled_access=controlled_access,
            data_use_limitation=data_use_limitation,
            data_use_limitation_modifiers=data_use_limitation_modifiers,
            samples=samples,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InstitutionalCertificateResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def institutional_certificates_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by certificate_identifier")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        data_use_limitation: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation")] = None,
        data_use_limitation_modifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation_modifiers")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InstitutionalCertificateResults]:
        """List items in the InstitutionalCertificate collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param certificate_identifier: Filter by certificate_identifier
        :type certificate_identifier: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param data_use_limitation: Filter by data_use_limitation
        :type data_use_limitation: List[str]
        :param data_use_limitation_modifiers: Filter by data_use_limitation_modifiers
        :type data_use_limitation_modifiers: List[str]
        :param samples: Filter by samples
        :type samples: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._institutional_certificates_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            certificate_identifier=certificate_identifier,
            controlled_access=controlled_access,
            data_use_limitation=data_use_limitation,
            data_use_limitation_modifiers=data_use_limitation_modifiers,
            samples=samples,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InstitutionalCertificateResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def institutional_certificates_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by certificate_identifier")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        data_use_limitation: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation")] = None,
        data_use_limitation_modifiers: Annotated[Optional[List[StrictStr]], Field(description="Filter by data_use_limitation_modifiers")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        urls: Annotated[Optional[List[StrictStr]], Field(description="Filter by urls")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the InstitutionalCertificate collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param certificate_identifier: Filter by certificate_identifier
        :type certificate_identifier: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param data_use_limitation: Filter by data_use_limitation
        :type data_use_limitation: List[str]
        :param data_use_limitation_modifiers: Filter by data_use_limitation_modifiers
        :type data_use_limitation_modifiers: List[str]
        :param samples: Filter by samples
        :type samples: List[str]
        :param urls: Filter by urls
        :type urls: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._institutional_certificates_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            certificate_identifier=certificate_identifier,
            controlled_access=controlled_access,
            data_use_limitation=data_use_limitation,
            data_use_limitation_modifiers=data_use_limitation_modifiers,
            samples=samples,
            urls=urls,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InstitutionalCertificateResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _institutional_certificates_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        certificate_identifier,
        controlled_access,
        data_use_limitation,
        data_use_limitation_modifiers,
        samples,
        urls,
        id,
        summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'certificate_identifier': 'multi',
            'controlled_access': 'multi',
            'data_use_limitation': 'multi',
            'data_use_limitation_modifiers': 'multi',
            'samples': 'multi',
            'urls': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if certificate_identifier is not None:
            
            _query_params.append(('certificate_identifier', certificate_identifier))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if data_use_limitation is not None:
            
            _query_params.append(('data_use_limitation', data_use_limitation))
            
        if data_use_limitation_modifiers is not None:
            
            _query_params.append(('data_use_limitation_modifiers', data_use_limitation_modifiers))
            
        if samples is not None:
            
            _query_params.append(('samples', samples))
            
        if urls is not None:
            
            _query_params.append(('urls', urls))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/institutional-certificates/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def labs(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by pi")] = None,
        institute_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institute_label")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        awards_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.@id")] = None,
        awards_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.component")] = None,
        awards_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by awards.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LabResults:
        """List items in the Lab collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param pi: Filter by pi
        :type pi: List[str]
        :param institute_label: Filter by institute_label
        :type institute_label: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param awards_id: Filter by awards.@id
        :type awards_id: List[str]
        :param awards_component: Filter by awards.component
        :type awards_component: List[str]
        :param awards_name: Filter by awards.name
        :type awards_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._labs_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            pi=pi,
            institute_label=institute_label,
            id=id,
            summary=summary,
            title=title,
            awards_id=awards_id,
            awards_component=awards_component,
            awards_name=awards_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LabResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def labs_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by pi")] = None,
        institute_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institute_label")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        awards_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.@id")] = None,
        awards_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.component")] = None,
        awards_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by awards.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LabResults]:
        """List items in the Lab collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param pi: Filter by pi
        :type pi: List[str]
        :param institute_label: Filter by institute_label
        :type institute_label: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param awards_id: Filter by awards.@id
        :type awards_id: List[str]
        :param awards_component: Filter by awards.component
        :type awards_component: List[str]
        :param awards_name: Filter by awards.name
        :type awards_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._labs_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            pi=pi,
            institute_label=institute_label,
            id=id,
            summary=summary,
            title=title,
            awards_id=awards_id,
            awards_component=awards_component,
            awards_name=awards_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LabResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def labs_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        pi: Annotated[Optional[List[StrictStr]], Field(description="Filter by pi")] = None,
        institute_label: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institute_label")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        awards_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.@id")] = None,
        awards_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by awards.component")] = None,
        awards_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by awards.name")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Lab collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param pi: Filter by pi
        :type pi: List[str]
        :param institute_label: Filter by institute_label
        :type institute_label: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param awards_id: Filter by awards.@id
        :type awards_id: List[str]
        :param awards_component: Filter by awards.component
        :type awards_component: List[str]
        :param awards_name: Filter by awards.name
        :type awards_name: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._labs_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            pi=pi,
            institute_label=institute_label,
            id=id,
            summary=summary,
            title=title,
            awards_id=awards_id,
            awards_component=awards_component,
            awards_name=awards_name,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LabResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _labs_serialize(
        self,
        query,
        limit,
        sort,
        status,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        name,
        pi,
        institute_label,
        id,
        summary,
        title,
        awards_id,
        awards_component,
        awards_name,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'status': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'name': 'multi',
            'pi': 'multi',
            'institute_label': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'title': 'multi',
            'awards.@id': 'multi',
            'awards.component': 'multi',
            'awards.name': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if pi is not None:
            
            _query_params.append(('pi', pi))
            
        if institute_label is not None:
            
            _query_params.append(('institute_label', institute_label))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if awards_id is not None:
            
            _query_params.append(('awards.@id', awards_id))
            
        if awards_component is not None:
            
            _query_params.append(('awards.component', awards_component))
            
        if awards_name is not None:
            
            _query_params.append(('awards.name', awards_name))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/labs/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matrix_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        dimension1: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension1")] = None,
        dimension2: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension2")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatrixFileResults:
        """List items in the MatrixFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param dimension1: Filter by dimension1
        :type dimension1: List[str]
        :param dimension2: Filter by dimension2
        :type dimension2: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            dimension1=dimension1,
            dimension2=dimension2,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matrix_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        dimension1: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension1")] = None,
        dimension2: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension2")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatrixFileResults]:
        """List items in the MatrixFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param dimension1: Filter by dimension1
        :type dimension1: List[str]
        :param dimension2: Filter by dimension2
        :type dimension2: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            dimension1=dimension1,
            dimension2=dimension2,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matrix_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        dimension1: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension1")] = None,
        dimension2: Annotated[Optional[List[StrictStr]], Field(description="Filter by dimension2")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the MatrixFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param dimension1: Filter by dimension1
        :type dimension1: List[str]
        :param dimension2: Filter by dimension2
        :type dimension2: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matrix_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            dimension1=dimension1,
            dimension2=dimension2,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatrixFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matrix_files_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        reference_files,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        dimension1,
        dimension2,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        content_summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'reference_files': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'dimension1': 'multi',
            'dimension2': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'content_summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if reference_files is not None:
            
            _query_params.append(('reference_files', reference_files))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if dimension1 is not None:
            
            _query_params.append(('dimension1', dimension1))
            
        if dimension2 is not None:
            
            _query_params.append(('dimension2', dimension2))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if content_summary is not None:
            
            _query_params.append(('content_summary', content_summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/matrix-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def measurement_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_title")] = None,
        multiome_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=2)]]], Field(description="Filter by multiome_size")] = None,
        sequencing_library_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_library_types")] = None,
        external_image_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by external_image_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_term.@id")] = None,
        assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by assay_term.term_name")] = None,
        auxiliary_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.@id")] = None,
        auxiliary_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.accession")] = None,
        auxiliary_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by auxiliary_sets.aliases")] = None,
        auxiliary_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.file_set_type")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.@id")] = None,
        control_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.accession")] = None,
        control_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_file_sets.aliases")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform.@id")] = None,
        files_sequencing_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.sequencing_platform.term_name")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        library_construction_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform.@id")] = None,
        library_construction_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by library_construction_platform.term_name")] = None,
        related_multiome_datasets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.@id")] = None,
        related_multiome_datasets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.accession")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.@id")] = None,
        samples_cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.purpose")] = None,
        samples_cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.summary")] = None,
        samples_cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.treatment_type")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.file_set_type")] = None,
        samples_construct_library_sets_small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.@id")] = None,
        samples_construct_library_sets_small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.geneid")] = None,
        samples_construct_library_sets_small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.name")] = None,
        samples_construct_library_sets_small_scale_gene_list_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.summary")] = None,
        samples_construct_library_sets_small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.symbol")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.modifications.@id")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.@id")] = None,
        samples_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.purpose")] = None,
        samples_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.summary")] = None,
        samples_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.treatment_type")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        targeted_genes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.@id")] = None,
        targeted_genes_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeted_genes.geneid")] = None,
        targeted_genes_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.name")] = None,
        targeted_genes_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.symbol")] = None,
        targeted_genes_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.synonyms")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MeasurementSetResults:
        """List items in the MeasurementSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param preferred_assay_title: Filter by preferred_assay_title
        :type preferred_assay_title: List[str]
        :param multiome_size: Filter by multiome_size
        :type multiome_size: List[int]
        :param sequencing_library_types: Filter by sequencing_library_types
        :type sequencing_library_types: List[str]
        :param external_image_url: Filter by external_image_url
        :type external_image_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_term_id: Filter by assay_term.@id
        :type assay_term_id: List[str]
        :param assay_term_term_name: Filter by assay_term.term_name
        :type assay_term_term_name: List[str]
        :param auxiliary_sets_id: Filter by auxiliary_sets.@id
        :type auxiliary_sets_id: List[str]
        :param auxiliary_sets_accession: Filter by auxiliary_sets.accession
        :type auxiliary_sets_accession: List[str]
        :param auxiliary_sets_aliases: Filter by auxiliary_sets.aliases
        :type auxiliary_sets_aliases: List[str]
        :param auxiliary_sets_file_set_type: Filter by auxiliary_sets.file_set_type
        :type auxiliary_sets_file_set_type: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_file_sets_id: Filter by control_file_sets.@id
        :type control_file_sets_id: List[str]
        :param control_file_sets_accession: Filter by control_file_sets.accession
        :type control_file_sets_accession: List[str]
        :param control_file_sets_aliases: Filter by control_file_sets.aliases
        :type control_file_sets_aliases: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform_id: Filter by files.sequencing_platform.@id
        :type files_sequencing_platform_id: List[str]
        :param files_sequencing_platform_term_name: Filter by files.sequencing_platform.term_name
        :type files_sequencing_platform_term_name: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param library_construction_platform_id: Filter by library_construction_platform.@id
        :type library_construction_platform_id: List[str]
        :param library_construction_platform_term_name: Filter by library_construction_platform.term_name
        :type library_construction_platform_term_name: List[str]
        :param related_multiome_datasets_id: Filter by related_multiome_datasets.@id
        :type related_multiome_datasets_id: List[str]
        :param related_multiome_datasets_accession: Filter by related_multiome_datasets.accession
        :type related_multiome_datasets_accession: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments_id: Filter by samples.cell_fate_change_treatments.@id
        :type samples_cell_fate_change_treatments_id: List[str]
        :param samples_cell_fate_change_treatments_purpose: Filter by samples.cell_fate_change_treatments.purpose
        :type samples_cell_fate_change_treatments_purpose: List[str]
        :param samples_cell_fate_change_treatments_summary: Filter by samples.cell_fate_change_treatments.summary
        :type samples_cell_fate_change_treatments_summary: List[str]
        :param samples_cell_fate_change_treatments_treatment_type: Filter by samples.cell_fate_change_treatments.treatment_type
        :type samples_cell_fate_change_treatments_treatment_type: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_file_set_type: Filter by samples.construct_library_sets.file_set_type
        :type samples_construct_library_sets_file_set_type: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_id: Filter by samples.construct_library_sets.small_scale_gene_list.@id
        :type samples_construct_library_sets_small_scale_gene_list_id: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_geneid: Filter by samples.construct_library_sets.small_scale_gene_list.geneid
        :type samples_construct_library_sets_small_scale_gene_list_geneid: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_name: Filter by samples.construct_library_sets.small_scale_gene_list.name
        :type samples_construct_library_sets_small_scale_gene_list_name: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_summary: Filter by samples.construct_library_sets.small_scale_gene_list.summary
        :type samples_construct_library_sets_small_scale_gene_list_summary: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_symbol: Filter by samples.construct_library_sets.small_scale_gene_list.symbol
        :type samples_construct_library_sets_small_scale_gene_list_symbol: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications_id: Filter by samples.modifications.@id
        :type samples_modifications_id: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments_id: Filter by samples.treatments.@id
        :type samples_treatments_id: List[str]
        :param samples_treatments_purpose: Filter by samples.treatments.purpose
        :type samples_treatments_purpose: List[str]
        :param samples_treatments_summary: Filter by samples.treatments.summary
        :type samples_treatments_summary: List[str]
        :param samples_treatments_treatment_type: Filter by samples.treatments.treatment_type
        :type samples_treatments_treatment_type: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param targeted_genes_id: Filter by targeted_genes.@id
        :type targeted_genes_id: List[str]
        :param targeted_genes_geneid: Filter by targeted_genes.geneid
        :type targeted_genes_geneid: List[str]
        :param targeted_genes_name: Filter by targeted_genes.name
        :type targeted_genes_name: List[str]
        :param targeted_genes_symbol: Filter by targeted_genes.symbol
        :type targeted_genes_symbol: List[str]
        :param targeted_genes_synonyms: Filter by targeted_genes.synonyms
        :type targeted_genes_synonyms: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._measurement_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            protocols=protocols,
            preferred_assay_title=preferred_assay_title,
            multiome_size=multiome_size,
            sequencing_library_types=sequencing_library_types,
            external_image_url=external_image_url,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_term_id=assay_term_id,
            assay_term_term_name=assay_term_term_name,
            auxiliary_sets_id=auxiliary_sets_id,
            auxiliary_sets_accession=auxiliary_sets_accession,
            auxiliary_sets_aliases=auxiliary_sets_aliases,
            auxiliary_sets_file_set_type=auxiliary_sets_file_set_type,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_file_sets_id=control_file_sets_id,
            control_file_sets_accession=control_file_sets_accession,
            control_file_sets_aliases=control_file_sets_aliases,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform_id=files_sequencing_platform_id,
            files_sequencing_platform_term_name=files_sequencing_platform_term_name,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            library_construction_platform_id=library_construction_platform_id,
            library_construction_platform_term_name=library_construction_platform_term_name,
            related_multiome_datasets_id=related_multiome_datasets_id,
            related_multiome_datasets_accession=related_multiome_datasets_accession,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments_id=samples_cell_fate_change_treatments_id,
            samples_cell_fate_change_treatments_purpose=samples_cell_fate_change_treatments_purpose,
            samples_cell_fate_change_treatments_summary=samples_cell_fate_change_treatments_summary,
            samples_cell_fate_change_treatments_treatment_type=samples_cell_fate_change_treatments_treatment_type,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_file_set_type=samples_construct_library_sets_file_set_type,
            samples_construct_library_sets_small_scale_gene_list_id=samples_construct_library_sets_small_scale_gene_list_id,
            samples_construct_library_sets_small_scale_gene_list_geneid=samples_construct_library_sets_small_scale_gene_list_geneid,
            samples_construct_library_sets_small_scale_gene_list_name=samples_construct_library_sets_small_scale_gene_list_name,
            samples_construct_library_sets_small_scale_gene_list_summary=samples_construct_library_sets_small_scale_gene_list_summary,
            samples_construct_library_sets_small_scale_gene_list_symbol=samples_construct_library_sets_small_scale_gene_list_symbol,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications_id=samples_modifications_id,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments_id=samples_treatments_id,
            samples_treatments_purpose=samples_treatments_purpose,
            samples_treatments_summary=samples_treatments_summary,
            samples_treatments_treatment_type=samples_treatments_treatment_type,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            targeted_genes_id=targeted_genes_id,
            targeted_genes_geneid=targeted_genes_geneid,
            targeted_genes_name=targeted_genes_name,
            targeted_genes_symbol=targeted_genes_symbol,
            targeted_genes_synonyms=targeted_genes_synonyms,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def measurement_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_title")] = None,
        multiome_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=2)]]], Field(description="Filter by multiome_size")] = None,
        sequencing_library_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_library_types")] = None,
        external_image_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by external_image_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_term.@id")] = None,
        assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by assay_term.term_name")] = None,
        auxiliary_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.@id")] = None,
        auxiliary_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.accession")] = None,
        auxiliary_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by auxiliary_sets.aliases")] = None,
        auxiliary_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.file_set_type")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.@id")] = None,
        control_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.accession")] = None,
        control_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_file_sets.aliases")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform.@id")] = None,
        files_sequencing_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.sequencing_platform.term_name")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        library_construction_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform.@id")] = None,
        library_construction_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by library_construction_platform.term_name")] = None,
        related_multiome_datasets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.@id")] = None,
        related_multiome_datasets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.accession")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.@id")] = None,
        samples_cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.purpose")] = None,
        samples_cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.summary")] = None,
        samples_cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.treatment_type")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.file_set_type")] = None,
        samples_construct_library_sets_small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.@id")] = None,
        samples_construct_library_sets_small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.geneid")] = None,
        samples_construct_library_sets_small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.name")] = None,
        samples_construct_library_sets_small_scale_gene_list_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.summary")] = None,
        samples_construct_library_sets_small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.symbol")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.modifications.@id")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.@id")] = None,
        samples_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.purpose")] = None,
        samples_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.summary")] = None,
        samples_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.treatment_type")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        targeted_genes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.@id")] = None,
        targeted_genes_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeted_genes.geneid")] = None,
        targeted_genes_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.name")] = None,
        targeted_genes_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.symbol")] = None,
        targeted_genes_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.synonyms")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MeasurementSetResults]:
        """List items in the MeasurementSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param preferred_assay_title: Filter by preferred_assay_title
        :type preferred_assay_title: List[str]
        :param multiome_size: Filter by multiome_size
        :type multiome_size: List[int]
        :param sequencing_library_types: Filter by sequencing_library_types
        :type sequencing_library_types: List[str]
        :param external_image_url: Filter by external_image_url
        :type external_image_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_term_id: Filter by assay_term.@id
        :type assay_term_id: List[str]
        :param assay_term_term_name: Filter by assay_term.term_name
        :type assay_term_term_name: List[str]
        :param auxiliary_sets_id: Filter by auxiliary_sets.@id
        :type auxiliary_sets_id: List[str]
        :param auxiliary_sets_accession: Filter by auxiliary_sets.accession
        :type auxiliary_sets_accession: List[str]
        :param auxiliary_sets_aliases: Filter by auxiliary_sets.aliases
        :type auxiliary_sets_aliases: List[str]
        :param auxiliary_sets_file_set_type: Filter by auxiliary_sets.file_set_type
        :type auxiliary_sets_file_set_type: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_file_sets_id: Filter by control_file_sets.@id
        :type control_file_sets_id: List[str]
        :param control_file_sets_accession: Filter by control_file_sets.accession
        :type control_file_sets_accession: List[str]
        :param control_file_sets_aliases: Filter by control_file_sets.aliases
        :type control_file_sets_aliases: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform_id: Filter by files.sequencing_platform.@id
        :type files_sequencing_platform_id: List[str]
        :param files_sequencing_platform_term_name: Filter by files.sequencing_platform.term_name
        :type files_sequencing_platform_term_name: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param library_construction_platform_id: Filter by library_construction_platform.@id
        :type library_construction_platform_id: List[str]
        :param library_construction_platform_term_name: Filter by library_construction_platform.term_name
        :type library_construction_platform_term_name: List[str]
        :param related_multiome_datasets_id: Filter by related_multiome_datasets.@id
        :type related_multiome_datasets_id: List[str]
        :param related_multiome_datasets_accession: Filter by related_multiome_datasets.accession
        :type related_multiome_datasets_accession: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments_id: Filter by samples.cell_fate_change_treatments.@id
        :type samples_cell_fate_change_treatments_id: List[str]
        :param samples_cell_fate_change_treatments_purpose: Filter by samples.cell_fate_change_treatments.purpose
        :type samples_cell_fate_change_treatments_purpose: List[str]
        :param samples_cell_fate_change_treatments_summary: Filter by samples.cell_fate_change_treatments.summary
        :type samples_cell_fate_change_treatments_summary: List[str]
        :param samples_cell_fate_change_treatments_treatment_type: Filter by samples.cell_fate_change_treatments.treatment_type
        :type samples_cell_fate_change_treatments_treatment_type: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_file_set_type: Filter by samples.construct_library_sets.file_set_type
        :type samples_construct_library_sets_file_set_type: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_id: Filter by samples.construct_library_sets.small_scale_gene_list.@id
        :type samples_construct_library_sets_small_scale_gene_list_id: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_geneid: Filter by samples.construct_library_sets.small_scale_gene_list.geneid
        :type samples_construct_library_sets_small_scale_gene_list_geneid: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_name: Filter by samples.construct_library_sets.small_scale_gene_list.name
        :type samples_construct_library_sets_small_scale_gene_list_name: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_summary: Filter by samples.construct_library_sets.small_scale_gene_list.summary
        :type samples_construct_library_sets_small_scale_gene_list_summary: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_symbol: Filter by samples.construct_library_sets.small_scale_gene_list.symbol
        :type samples_construct_library_sets_small_scale_gene_list_symbol: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications_id: Filter by samples.modifications.@id
        :type samples_modifications_id: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments_id: Filter by samples.treatments.@id
        :type samples_treatments_id: List[str]
        :param samples_treatments_purpose: Filter by samples.treatments.purpose
        :type samples_treatments_purpose: List[str]
        :param samples_treatments_summary: Filter by samples.treatments.summary
        :type samples_treatments_summary: List[str]
        :param samples_treatments_treatment_type: Filter by samples.treatments.treatment_type
        :type samples_treatments_treatment_type: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param targeted_genes_id: Filter by targeted_genes.@id
        :type targeted_genes_id: List[str]
        :param targeted_genes_geneid: Filter by targeted_genes.geneid
        :type targeted_genes_geneid: List[str]
        :param targeted_genes_name: Filter by targeted_genes.name
        :type targeted_genes_name: List[str]
        :param targeted_genes_symbol: Filter by targeted_genes.symbol
        :type targeted_genes_symbol: List[str]
        :param targeted_genes_synonyms: Filter by targeted_genes.synonyms
        :type targeted_genes_synonyms: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._measurement_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            protocols=protocols,
            preferred_assay_title=preferred_assay_title,
            multiome_size=multiome_size,
            sequencing_library_types=sequencing_library_types,
            external_image_url=external_image_url,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_term_id=assay_term_id,
            assay_term_term_name=assay_term_term_name,
            auxiliary_sets_id=auxiliary_sets_id,
            auxiliary_sets_accession=auxiliary_sets_accession,
            auxiliary_sets_aliases=auxiliary_sets_aliases,
            auxiliary_sets_file_set_type=auxiliary_sets_file_set_type,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_file_sets_id=control_file_sets_id,
            control_file_sets_accession=control_file_sets_accession,
            control_file_sets_aliases=control_file_sets_aliases,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform_id=files_sequencing_platform_id,
            files_sequencing_platform_term_name=files_sequencing_platform_term_name,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            library_construction_platform_id=library_construction_platform_id,
            library_construction_platform_term_name=library_construction_platform_term_name,
            related_multiome_datasets_id=related_multiome_datasets_id,
            related_multiome_datasets_accession=related_multiome_datasets_accession,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments_id=samples_cell_fate_change_treatments_id,
            samples_cell_fate_change_treatments_purpose=samples_cell_fate_change_treatments_purpose,
            samples_cell_fate_change_treatments_summary=samples_cell_fate_change_treatments_summary,
            samples_cell_fate_change_treatments_treatment_type=samples_cell_fate_change_treatments_treatment_type,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_file_set_type=samples_construct_library_sets_file_set_type,
            samples_construct_library_sets_small_scale_gene_list_id=samples_construct_library_sets_small_scale_gene_list_id,
            samples_construct_library_sets_small_scale_gene_list_geneid=samples_construct_library_sets_small_scale_gene_list_geneid,
            samples_construct_library_sets_small_scale_gene_list_name=samples_construct_library_sets_small_scale_gene_list_name,
            samples_construct_library_sets_small_scale_gene_list_summary=samples_construct_library_sets_small_scale_gene_list_summary,
            samples_construct_library_sets_small_scale_gene_list_symbol=samples_construct_library_sets_small_scale_gene_list_symbol,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications_id=samples_modifications_id,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments_id=samples_treatments_id,
            samples_treatments_purpose=samples_treatments_purpose,
            samples_treatments_summary=samples_treatments_summary,
            samples_treatments_treatment_type=samples_treatments_treatment_type,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            targeted_genes_id=targeted_genes_id,
            targeted_genes_geneid=targeted_genes_geneid,
            targeted_genes_name=targeted_genes_name,
            targeted_genes_symbol=targeted_genes_symbol,
            targeted_genes_synonyms=targeted_genes_synonyms,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def measurement_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        preferred_assay_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by preferred_assay_title")] = None,
        multiome_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=2)]]], Field(description="Filter by multiome_size")] = None,
        sequencing_library_types: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_library_types")] = None,
        external_image_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by external_image_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        assay_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by assay_term.@id")] = None,
        assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by assay_term.term_name")] = None,
        auxiliary_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.@id")] = None,
        auxiliary_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.accession")] = None,
        auxiliary_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by auxiliary_sets.aliases")] = None,
        auxiliary_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by auxiliary_sets.file_set_type")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.@id")] = None,
        control_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_file_sets.accession")] = None,
        control_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_file_sets.aliases")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform.@id")] = None,
        files_sequencing_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.sequencing_platform.term_name")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        library_construction_platform_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by library_construction_platform.@id")] = None,
        library_construction_platform_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by library_construction_platform.term_name")] = None,
        related_multiome_datasets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.@id")] = None,
        related_multiome_datasets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by related_multiome_datasets.accession")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.@id")] = None,
        samples_cell_fate_change_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.purpose")] = None,
        samples_cell_fate_change_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.summary")] = None,
        samples_cell_fate_change_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments.treatment_type")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.file_set_type")] = None,
        samples_construct_library_sets_small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.@id")] = None,
        samples_construct_library_sets_small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.geneid")] = None,
        samples_construct_library_sets_small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.name")] = None,
        samples_construct_library_sets_small_scale_gene_list_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.summary")] = None,
        samples_construct_library_sets_small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.small_scale_gene_list.symbol")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.modifications.@id")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.@id")] = None,
        samples_treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.purpose")] = None,
        samples_treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.summary")] = None,
        samples_treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments.treatment_type")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        targeted_genes_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.@id")] = None,
        targeted_genes_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by targeted_genes.geneid")] = None,
        targeted_genes_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.name")] = None,
        targeted_genes_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.symbol")] = None,
        targeted_genes_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by targeted_genes.synonyms")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the MeasurementSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param preferred_assay_title: Filter by preferred_assay_title
        :type preferred_assay_title: List[str]
        :param multiome_size: Filter by multiome_size
        :type multiome_size: List[int]
        :param sequencing_library_types: Filter by sequencing_library_types
        :type sequencing_library_types: List[str]
        :param external_image_url: Filter by external_image_url
        :type external_image_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param assay_term_id: Filter by assay_term.@id
        :type assay_term_id: List[str]
        :param assay_term_term_name: Filter by assay_term.term_name
        :type assay_term_term_name: List[str]
        :param auxiliary_sets_id: Filter by auxiliary_sets.@id
        :type auxiliary_sets_id: List[str]
        :param auxiliary_sets_accession: Filter by auxiliary_sets.accession
        :type auxiliary_sets_accession: List[str]
        :param auxiliary_sets_aliases: Filter by auxiliary_sets.aliases
        :type auxiliary_sets_aliases: List[str]
        :param auxiliary_sets_file_set_type: Filter by auxiliary_sets.file_set_type
        :type auxiliary_sets_file_set_type: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_file_sets_id: Filter by control_file_sets.@id
        :type control_file_sets_id: List[str]
        :param control_file_sets_accession: Filter by control_file_sets.accession
        :type control_file_sets_accession: List[str]
        :param control_file_sets_aliases: Filter by control_file_sets.aliases
        :type control_file_sets_aliases: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform_id: Filter by files.sequencing_platform.@id
        :type files_sequencing_platform_id: List[str]
        :param files_sequencing_platform_term_name: Filter by files.sequencing_platform.term_name
        :type files_sequencing_platform_term_name: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param library_construction_platform_id: Filter by library_construction_platform.@id
        :type library_construction_platform_id: List[str]
        :param library_construction_platform_term_name: Filter by library_construction_platform.term_name
        :type library_construction_platform_term_name: List[str]
        :param related_multiome_datasets_id: Filter by related_multiome_datasets.@id
        :type related_multiome_datasets_id: List[str]
        :param related_multiome_datasets_accession: Filter by related_multiome_datasets.accession
        :type related_multiome_datasets_accession: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments_id: Filter by samples.cell_fate_change_treatments.@id
        :type samples_cell_fate_change_treatments_id: List[str]
        :param samples_cell_fate_change_treatments_purpose: Filter by samples.cell_fate_change_treatments.purpose
        :type samples_cell_fate_change_treatments_purpose: List[str]
        :param samples_cell_fate_change_treatments_summary: Filter by samples.cell_fate_change_treatments.summary
        :type samples_cell_fate_change_treatments_summary: List[str]
        :param samples_cell_fate_change_treatments_treatment_type: Filter by samples.cell_fate_change_treatments.treatment_type
        :type samples_cell_fate_change_treatments_treatment_type: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_file_set_type: Filter by samples.construct_library_sets.file_set_type
        :type samples_construct_library_sets_file_set_type: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_id: Filter by samples.construct_library_sets.small_scale_gene_list.@id
        :type samples_construct_library_sets_small_scale_gene_list_id: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_geneid: Filter by samples.construct_library_sets.small_scale_gene_list.geneid
        :type samples_construct_library_sets_small_scale_gene_list_geneid: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_name: Filter by samples.construct_library_sets.small_scale_gene_list.name
        :type samples_construct_library_sets_small_scale_gene_list_name: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_summary: Filter by samples.construct_library_sets.small_scale_gene_list.summary
        :type samples_construct_library_sets_small_scale_gene_list_summary: List[str]
        :param samples_construct_library_sets_small_scale_gene_list_symbol: Filter by samples.construct_library_sets.small_scale_gene_list.symbol
        :type samples_construct_library_sets_small_scale_gene_list_symbol: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications_id: Filter by samples.modifications.@id
        :type samples_modifications_id: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments_id: Filter by samples.treatments.@id
        :type samples_treatments_id: List[str]
        :param samples_treatments_purpose: Filter by samples.treatments.purpose
        :type samples_treatments_purpose: List[str]
        :param samples_treatments_summary: Filter by samples.treatments.summary
        :type samples_treatments_summary: List[str]
        :param samples_treatments_treatment_type: Filter by samples.treatments.treatment_type
        :type samples_treatments_treatment_type: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param targeted_genes_id: Filter by targeted_genes.@id
        :type targeted_genes_id: List[str]
        :param targeted_genes_geneid: Filter by targeted_genes.geneid
        :type targeted_genes_geneid: List[str]
        :param targeted_genes_name: Filter by targeted_genes.name
        :type targeted_genes_name: List[str]
        :param targeted_genes_symbol: Filter by targeted_genes.symbol
        :type targeted_genes_symbol: List[str]
        :param targeted_genes_synonyms: Filter by targeted_genes.synonyms
        :type targeted_genes_synonyms: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._measurement_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            protocols=protocols,
            preferred_assay_title=preferred_assay_title,
            multiome_size=multiome_size,
            sequencing_library_types=sequencing_library_types,
            external_image_url=external_image_url,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            assay_term_id=assay_term_id,
            assay_term_term_name=assay_term_term_name,
            auxiliary_sets_id=auxiliary_sets_id,
            auxiliary_sets_accession=auxiliary_sets_accession,
            auxiliary_sets_aliases=auxiliary_sets_aliases,
            auxiliary_sets_file_set_type=auxiliary_sets_file_set_type,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_file_sets_id=control_file_sets_id,
            control_file_sets_accession=control_file_sets_accession,
            control_file_sets_aliases=control_file_sets_aliases,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform_id=files_sequencing_platform_id,
            files_sequencing_platform_term_name=files_sequencing_platform_term_name,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            library_construction_platform_id=library_construction_platform_id,
            library_construction_platform_term_name=library_construction_platform_term_name,
            related_multiome_datasets_id=related_multiome_datasets_id,
            related_multiome_datasets_accession=related_multiome_datasets_accession,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments_id=samples_cell_fate_change_treatments_id,
            samples_cell_fate_change_treatments_purpose=samples_cell_fate_change_treatments_purpose,
            samples_cell_fate_change_treatments_summary=samples_cell_fate_change_treatments_summary,
            samples_cell_fate_change_treatments_treatment_type=samples_cell_fate_change_treatments_treatment_type,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_file_set_type=samples_construct_library_sets_file_set_type,
            samples_construct_library_sets_small_scale_gene_list_id=samples_construct_library_sets_small_scale_gene_list_id,
            samples_construct_library_sets_small_scale_gene_list_geneid=samples_construct_library_sets_small_scale_gene_list_geneid,
            samples_construct_library_sets_small_scale_gene_list_name=samples_construct_library_sets_small_scale_gene_list_name,
            samples_construct_library_sets_small_scale_gene_list_summary=samples_construct_library_sets_small_scale_gene_list_summary,
            samples_construct_library_sets_small_scale_gene_list_symbol=samples_construct_library_sets_small_scale_gene_list_symbol,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications_id=samples_modifications_id,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments_id=samples_treatments_id,
            samples_treatments_purpose=samples_treatments_purpose,
            samples_treatments_summary=samples_treatments_summary,
            samples_treatments_treatment_type=samples_treatments_treatment_type,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            targeted_genes_id=targeted_genes_id,
            targeted_genes_geneid=targeted_genes_geneid,
            targeted_genes_name=targeted_genes_name,
            targeted_genes_symbol=targeted_genes_symbol,
            targeted_genes_synonyms=targeted_genes_synonyms,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _measurement_sets_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        protocols,
        preferred_assay_title,
        multiome_size,
        sequencing_library_types,
        external_image_url,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        assay_term_id,
        assay_term_term_name,
        auxiliary_sets_id,
        auxiliary_sets_accession,
        auxiliary_sets_aliases,
        auxiliary_sets_file_set_type,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_file_sets_id,
        control_file_sets_accession,
        control_file_sets_aliases,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform_id,
        files_sequencing_platform_term_name,
        files_submitted_file_name,
        files_upload_status,
        lab_id,
        lab_title,
        library_construction_platform_id,
        library_construction_platform_term_name,
        related_multiome_datasets_id,
        related_multiome_datasets_accession,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments_id,
        samples_cell_fate_change_treatments_purpose,
        samples_cell_fate_change_treatments_summary,
        samples_cell_fate_change_treatments_treatment_type,
        samples_classifications,
        samples_construct_library_sets_id,
        samples_construct_library_sets_accession,
        samples_construct_library_sets_file_set_type,
        samples_construct_library_sets_small_scale_gene_list_id,
        samples_construct_library_sets_small_scale_gene_list_geneid,
        samples_construct_library_sets_small_scale_gene_list_name,
        samples_construct_library_sets_small_scale_gene_list_summary,
        samples_construct_library_sets_small_scale_gene_list_symbol,
        samples_construct_library_sets_summary,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications_id,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments_id,
        samples_treatments_purpose,
        samples_treatments_summary,
        samples_treatments_treatment_type,
        submitted_by_id,
        submitted_by_title,
        targeted_genes_id,
        targeted_genes_geneid,
        targeted_genes_name,
        targeted_genes_symbol,
        targeted_genes_synonyms,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            'protocols': 'multi',
            'preferred_assay_title': 'multi',
            'multiome_size': 'multi',
            'sequencing_library_types': 'multi',
            'external_image_url': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'assay_term.@id': 'multi',
            'assay_term.term_name': 'multi',
            'auxiliary_sets.@id': 'multi',
            'auxiliary_sets.accession': 'multi',
            'auxiliary_sets.aliases': 'multi',
            'auxiliary_sets.file_set_type': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_file_sets.@id': 'multi',
            'control_file_sets.accession': 'multi',
            'control_file_sets.aliases': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform.@id': 'multi',
            'files.sequencing_platform.term_name': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'library_construction_platform.@id': 'multi',
            'library_construction_platform.term_name': 'multi',
            'related_multiome_datasets.@id': 'multi',
            'related_multiome_datasets.accession': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments.@id': 'multi',
            'samples.cell_fate_change_treatments.purpose': 'multi',
            'samples.cell_fate_change_treatments.summary': 'multi',
            'samples.cell_fate_change_treatments.treatment_type': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets.@id': 'multi',
            'samples.construct_library_sets.accession': 'multi',
            'samples.construct_library_sets.file_set_type': 'multi',
            'samples.construct_library_sets.small_scale_gene_list.@id': 'multi',
            'samples.construct_library_sets.small_scale_gene_list.geneid': 'multi',
            'samples.construct_library_sets.small_scale_gene_list.name': 'multi',
            'samples.construct_library_sets.small_scale_gene_list.summary': 'multi',
            'samples.construct_library_sets.small_scale_gene_list.symbol': 'multi',
            'samples.construct_library_sets.summary': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications.@id': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments.@id': 'multi',
            'samples.treatments.purpose': 'multi',
            'samples.treatments.summary': 'multi',
            'samples.treatments.treatment_type': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'targeted_genes.@id': 'multi',
            'targeted_genes.geneid': 'multi',
            'targeted_genes.name': 'multi',
            'targeted_genes.symbol': 'multi',
            'targeted_genes.synonyms': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if preferred_assay_title is not None:
            
            _query_params.append(('preferred_assay_title', preferred_assay_title))
            
        if multiome_size is not None:
            
            _query_params.append(('multiome_size', multiome_size))
            
        if sequencing_library_types is not None:
            
            _query_params.append(('sequencing_library_types', sequencing_library_types))
            
        if external_image_url is not None:
            
            _query_params.append(('external_image_url', external_image_url))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if assay_term_id is not None:
            
            _query_params.append(('assay_term.@id', assay_term_id))
            
        if assay_term_term_name is not None:
            
            _query_params.append(('assay_term.term_name', assay_term_term_name))
            
        if auxiliary_sets_id is not None:
            
            _query_params.append(('auxiliary_sets.@id', auxiliary_sets_id))
            
        if auxiliary_sets_accession is not None:
            
            _query_params.append(('auxiliary_sets.accession', auxiliary_sets_accession))
            
        if auxiliary_sets_aliases is not None:
            
            _query_params.append(('auxiliary_sets.aliases', auxiliary_sets_aliases))
            
        if auxiliary_sets_file_set_type is not None:
            
            _query_params.append(('auxiliary_sets.file_set_type', auxiliary_sets_file_set_type))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_file_sets_id is not None:
            
            _query_params.append(('control_file_sets.@id', control_file_sets_id))
            
        if control_file_sets_accession is not None:
            
            _query_params.append(('control_file_sets.accession', control_file_sets_accession))
            
        if control_file_sets_aliases is not None:
            
            _query_params.append(('control_file_sets.aliases', control_file_sets_aliases))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform_id is not None:
            
            _query_params.append(('files.sequencing_platform.@id', files_sequencing_platform_id))
            
        if files_sequencing_platform_term_name is not None:
            
            _query_params.append(('files.sequencing_platform.term_name', files_sequencing_platform_term_name))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if library_construction_platform_id is not None:
            
            _query_params.append(('library_construction_platform.@id', library_construction_platform_id))
            
        if library_construction_platform_term_name is not None:
            
            _query_params.append(('library_construction_platform.term_name', library_construction_platform_term_name))
            
        if related_multiome_datasets_id is not None:
            
            _query_params.append(('related_multiome_datasets.@id', related_multiome_datasets_id))
            
        if related_multiome_datasets_accession is not None:
            
            _query_params.append(('related_multiome_datasets.accession', related_multiome_datasets_accession))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments_id is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments.@id', samples_cell_fate_change_treatments_id))
            
        if samples_cell_fate_change_treatments_purpose is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments.purpose', samples_cell_fate_change_treatments_purpose))
            
        if samples_cell_fate_change_treatments_summary is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments.summary', samples_cell_fate_change_treatments_summary))
            
        if samples_cell_fate_change_treatments_treatment_type is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments.treatment_type', samples_cell_fate_change_treatments_treatment_type))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets_id is not None:
            
            _query_params.append(('samples.construct_library_sets.@id', samples_construct_library_sets_id))
            
        if samples_construct_library_sets_accession is not None:
            
            _query_params.append(('samples.construct_library_sets.accession', samples_construct_library_sets_accession))
            
        if samples_construct_library_sets_file_set_type is not None:
            
            _query_params.append(('samples.construct_library_sets.file_set_type', samples_construct_library_sets_file_set_type))
            
        if samples_construct_library_sets_small_scale_gene_list_id is not None:
            
            _query_params.append(('samples.construct_library_sets.small_scale_gene_list.@id', samples_construct_library_sets_small_scale_gene_list_id))
            
        if samples_construct_library_sets_small_scale_gene_list_geneid is not None:
            
            _query_params.append(('samples.construct_library_sets.small_scale_gene_list.geneid', samples_construct_library_sets_small_scale_gene_list_geneid))
            
        if samples_construct_library_sets_small_scale_gene_list_name is not None:
            
            _query_params.append(('samples.construct_library_sets.small_scale_gene_list.name', samples_construct_library_sets_small_scale_gene_list_name))
            
        if samples_construct_library_sets_small_scale_gene_list_summary is not None:
            
            _query_params.append(('samples.construct_library_sets.small_scale_gene_list.summary', samples_construct_library_sets_small_scale_gene_list_summary))
            
        if samples_construct_library_sets_small_scale_gene_list_symbol is not None:
            
            _query_params.append(('samples.construct_library_sets.small_scale_gene_list.symbol', samples_construct_library_sets_small_scale_gene_list_symbol))
            
        if samples_construct_library_sets_summary is not None:
            
            _query_params.append(('samples.construct_library_sets.summary', samples_construct_library_sets_summary))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications_id is not None:
            
            _query_params.append(('samples.modifications.@id', samples_modifications_id))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments_id is not None:
            
            _query_params.append(('samples.treatments.@id', samples_treatments_id))
            
        if samples_treatments_purpose is not None:
            
            _query_params.append(('samples.treatments.purpose', samples_treatments_purpose))
            
        if samples_treatments_summary is not None:
            
            _query_params.append(('samples.treatments.summary', samples_treatments_summary))
            
        if samples_treatments_treatment_type is not None:
            
            _query_params.append(('samples.treatments.treatment_type', samples_treatments_treatment_type))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if targeted_genes_id is not None:
            
            _query_params.append(('targeted_genes.@id', targeted_genes_id))
            
        if targeted_genes_geneid is not None:
            
            _query_params.append(('targeted_genes.geneid', targeted_genes_geneid))
            
        if targeted_genes_name is not None:
            
            _query_params.append(('targeted_genes.name', targeted_genes_name))
            
        if targeted_genes_symbol is not None:
            
            _query_params.append(('targeted_genes.symbol', targeted_genes_symbol))
            
        if targeted_genes_synonyms is not None:
            
            _query_params.append(('targeted_genes.synonyms', targeted_genes_synonyms))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/measurement-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def model_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelFileResults:
        """List items in the ModelFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def model_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelFileResults]:
        """List items in the ModelFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def model_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ModelFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _model_files_serialize(
        self,
        query,
        limit,
        sort,
        controlled_access,
        anvil_url,
        release_timestamp,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'controlled_access': 'multi',
            'anvil_url': 'multi',
            'release_timestamp': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if anvil_url is not None:
            
            _query_params.append(('anvil_url', anvil_url))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/model-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def model_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        model_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by model_name")] = None,
        model_version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_version")] = None,
        prediction_objects: Annotated[Optional[List[StrictStr]], Field(description="Filter by prediction_objects")] = None,
        model_zoo_location: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_zoo_location")] = None,
        software_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_version")] = None,
        assessed_genes: Annotated[Optional[List[StrictStr]], Field(description="Filter by assessed_genes")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ModelSetResults:
        """List items in the ModelSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param model_name: Filter by model_name
        :type model_name: List[str]
        :param model_version: Filter by model_version
        :type model_version: List[str]
        :param prediction_objects: Filter by prediction_objects
        :type prediction_objects: List[str]
        :param model_zoo_location: Filter by model_zoo_location
        :type model_zoo_location: List[str]
        :param software_version: Filter by software_version
        :type software_version: List[str]
        :param assessed_genes: Filter by assessed_genes
        :type assessed_genes: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            model_name=model_name,
            model_version=model_version,
            prediction_objects=prediction_objects,
            model_zoo_location=model_zoo_location,
            software_version=software_version,
            assessed_genes=assessed_genes,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def model_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        model_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by model_name")] = None,
        model_version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_version")] = None,
        prediction_objects: Annotated[Optional[List[StrictStr]], Field(description="Filter by prediction_objects")] = None,
        model_zoo_location: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_zoo_location")] = None,
        software_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_version")] = None,
        assessed_genes: Annotated[Optional[List[StrictStr]], Field(description="Filter by assessed_genes")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ModelSetResults]:
        """List items in the ModelSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param model_name: Filter by model_name
        :type model_name: List[str]
        :param model_version: Filter by model_version
        :type model_version: List[str]
        :param prediction_objects: Filter by prediction_objects
        :type prediction_objects: List[str]
        :param model_zoo_location: Filter by model_zoo_location
        :type model_zoo_location: List[str]
        :param software_version: Filter by software_version
        :type software_version: List[str]
        :param assessed_genes: Filter by assessed_genes
        :type assessed_genes: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            model_name=model_name,
            model_version=model_version,
            prediction_objects=prediction_objects,
            model_zoo_location=model_zoo_location,
            software_version=software_version,
            assessed_genes=assessed_genes,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def model_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        model_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by model_name")] = None,
        model_version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_version")] = None,
        prediction_objects: Annotated[Optional[List[StrictStr]], Field(description="Filter by prediction_objects")] = None,
        model_zoo_location: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by model_zoo_location")] = None,
        software_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_version")] = None,
        assessed_genes: Annotated[Optional[List[StrictStr]], Field(description="Filter by assessed_genes")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        input_file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.@id")] = None,
        input_file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets.accession")] = None,
        input_file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by input_file_sets.aliases")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ModelSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param model_name: Filter by model_name
        :type model_name: List[str]
        :param model_version: Filter by model_version
        :type model_version: List[str]
        :param prediction_objects: Filter by prediction_objects
        :type prediction_objects: List[str]
        :param model_zoo_location: Filter by model_zoo_location
        :type model_zoo_location: List[str]
        :param software_version: Filter by software_version
        :type software_version: List[str]
        :param assessed_genes: Filter by assessed_genes
        :type assessed_genes: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param input_file_sets_id: Filter by input_file_sets.@id
        :type input_file_sets_id: List[str]
        :param input_file_sets_accession: Filter by input_file_sets.accession
        :type input_file_sets_accession: List[str]
        :param input_file_sets_aliases: Filter by input_file_sets.aliases
        :type input_file_sets_aliases: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets: Filter by samples.construct_library_sets
        :type samples_construct_library_sets: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._model_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            model_name=model_name,
            model_version=model_version,
            prediction_objects=prediction_objects,
            model_zoo_location=model_zoo_location,
            software_version=software_version,
            assessed_genes=assessed_genes,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            input_file_sets_id=input_file_sets_id,
            input_file_sets_accession=input_file_sets_accession,
            input_file_sets_aliases=input_file_sets_aliases,
            lab_id=lab_id,
            lab_title=lab_title,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets=samples_construct_library_sets,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ModelSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _model_sets_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        model_name,
        model_version,
        prediction_objects,
        model_zoo_location,
        software_version,
        assessed_genes,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform,
        files_submitted_file_name,
        files_upload_status,
        input_file_sets_id,
        input_file_sets_accession,
        input_file_sets_aliases,
        lab_id,
        lab_title,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments,
        samples_classifications,
        samples_construct_library_sets,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            'model_name': 'multi',
            'model_version': 'multi',
            'prediction_objects': 'multi',
            'model_zoo_location': 'multi',
            'software_version': 'multi',
            'assessed_genes': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'input_file_sets.@id': 'multi',
            'input_file_sets.accession': 'multi',
            'input_file_sets.aliases': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if model_name is not None:
            
            _query_params.append(('model_name', model_name))
            
        if model_version is not None:
            
            _query_params.append(('model_version', model_version))
            
        if prediction_objects is not None:
            
            _query_params.append(('prediction_objects', prediction_objects))
            
        if model_zoo_location is not None:
            
            _query_params.append(('model_zoo_location', model_zoo_location))
            
        if software_version is not None:
            
            _query_params.append(('software_version', software_version))
            
        if assessed_genes is not None:
            
            _query_params.append(('assessed_genes', assessed_genes))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform is not None:
            
            _query_params.append(('files.sequencing_platform', files_sequencing_platform))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if input_file_sets_id is not None:
            
            _query_params.append(('input_file_sets.@id', input_file_sets_id))
            
        if input_file_sets_accession is not None:
            
            _query_params.append(('input_file_sets.accession', input_file_sets_accession))
            
        if input_file_sets_aliases is not None:
            
            _query_params.append(('input_file_sets.aliases', input_file_sets_aliases))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments', samples_cell_fate_change_treatments))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets is not None:
            
            _query_params.append(('samples.construct_library_sets', samples_construct_library_sets))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications is not None:
            
            _query_params.append(('samples.modifications', samples_modifications))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments is not None:
            
            _query_params.append(('samples.treatments', samples_treatments))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/model-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def multiplexed_samples(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        barcode_sample_map: Annotated[Optional[List[StrictStr]], Field(description="Filter by barcode_sample_map")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.@id")] = None,
        construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.accession")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        multiplexed_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.@id")] = None,
        multiplexed_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.accession")] = None,
        multiplexed_samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.construct_library_sets")] = None,
        multiplexed_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.disease_terms.@id")] = None,
        multiplexed_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.disease_terms.term_name")] = None,
        multiplexed_samples_donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.@id")] = None,
        multiplexed_samples_donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.accession")] = None,
        multiplexed_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.sample_terms.@id")] = None,
        multiplexed_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.sample_terms.term_name")] = None,
        multiplexed_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.status")] = None,
        multiplexed_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.summary")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MultiplexedSampleResults:
        """List items in the MultiplexedSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param barcode_sample_map: Filter by barcode_sample_map
        :type barcode_sample_map: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param construct_library_sets_id: Filter by construct_library_sets.@id
        :type construct_library_sets_id: List[str]
        :param construct_library_sets_accession: Filter by construct_library_sets.accession
        :type construct_library_sets_accession: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param multiplexed_samples_id: Filter by multiplexed_samples.@id
        :type multiplexed_samples_id: List[str]
        :param multiplexed_samples_accession: Filter by multiplexed_samples.accession
        :type multiplexed_samples_accession: List[str]
        :param multiplexed_samples_construct_library_sets: Filter by multiplexed_samples.construct_library_sets
        :type multiplexed_samples_construct_library_sets: List[str]
        :param multiplexed_samples_disease_terms_id: Filter by multiplexed_samples.disease_terms.@id
        :type multiplexed_samples_disease_terms_id: List[str]
        :param multiplexed_samples_disease_terms_term_name: Filter by multiplexed_samples.disease_terms.term_name
        :type multiplexed_samples_disease_terms_term_name: List[str]
        :param multiplexed_samples_donors_id: Filter by multiplexed_samples.donors.@id
        :type multiplexed_samples_donors_id: List[str]
        :param multiplexed_samples_donors_accession: Filter by multiplexed_samples.donors.accession
        :type multiplexed_samples_donors_accession: List[str]
        :param multiplexed_samples_sample_terms_id: Filter by multiplexed_samples.sample_terms.@id
        :type multiplexed_samples_sample_terms_id: List[str]
        :param multiplexed_samples_sample_terms_term_name: Filter by multiplexed_samples.sample_terms.term_name
        :type multiplexed_samples_sample_terms_term_name: List[str]
        :param multiplexed_samples_status: Filter by multiplexed_samples.status
        :type multiplexed_samples_status: List[str]
        :param multiplexed_samples_summary: Filter by multiplexed_samples.summary
        :type multiplexed_samples_summary: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._multiplexed_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            cellular_sub_pool=cellular_sub_pool,
            barcode_sample_map=barcode_sample_map,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            donors=donors,
            biomarkers=biomarkers,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            construct_library_sets_id=construct_library_sets_id,
            construct_library_sets_accession=construct_library_sets_accession,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            multiplexed_samples_id=multiplexed_samples_id,
            multiplexed_samples_accession=multiplexed_samples_accession,
            multiplexed_samples_construct_library_sets=multiplexed_samples_construct_library_sets,
            multiplexed_samples_disease_terms_id=multiplexed_samples_disease_terms_id,
            multiplexed_samples_disease_terms_term_name=multiplexed_samples_disease_terms_term_name,
            multiplexed_samples_donors_id=multiplexed_samples_donors_id,
            multiplexed_samples_donors_accession=multiplexed_samples_donors_accession,
            multiplexed_samples_sample_terms_id=multiplexed_samples_sample_terms_id,
            multiplexed_samples_sample_terms_term_name=multiplexed_samples_sample_terms_term_name,
            multiplexed_samples_status=multiplexed_samples_status,
            multiplexed_samples_summary=multiplexed_samples_summary,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MultiplexedSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def multiplexed_samples_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        barcode_sample_map: Annotated[Optional[List[StrictStr]], Field(description="Filter by barcode_sample_map")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.@id")] = None,
        construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.accession")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        multiplexed_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.@id")] = None,
        multiplexed_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.accession")] = None,
        multiplexed_samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.construct_library_sets")] = None,
        multiplexed_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.disease_terms.@id")] = None,
        multiplexed_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.disease_terms.term_name")] = None,
        multiplexed_samples_donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.@id")] = None,
        multiplexed_samples_donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.accession")] = None,
        multiplexed_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.sample_terms.@id")] = None,
        multiplexed_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.sample_terms.term_name")] = None,
        multiplexed_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.status")] = None,
        multiplexed_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.summary")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MultiplexedSampleResults]:
        """List items in the MultiplexedSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param barcode_sample_map: Filter by barcode_sample_map
        :type barcode_sample_map: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param construct_library_sets_id: Filter by construct_library_sets.@id
        :type construct_library_sets_id: List[str]
        :param construct_library_sets_accession: Filter by construct_library_sets.accession
        :type construct_library_sets_accession: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param multiplexed_samples_id: Filter by multiplexed_samples.@id
        :type multiplexed_samples_id: List[str]
        :param multiplexed_samples_accession: Filter by multiplexed_samples.accession
        :type multiplexed_samples_accession: List[str]
        :param multiplexed_samples_construct_library_sets: Filter by multiplexed_samples.construct_library_sets
        :type multiplexed_samples_construct_library_sets: List[str]
        :param multiplexed_samples_disease_terms_id: Filter by multiplexed_samples.disease_terms.@id
        :type multiplexed_samples_disease_terms_id: List[str]
        :param multiplexed_samples_disease_terms_term_name: Filter by multiplexed_samples.disease_terms.term_name
        :type multiplexed_samples_disease_terms_term_name: List[str]
        :param multiplexed_samples_donors_id: Filter by multiplexed_samples.donors.@id
        :type multiplexed_samples_donors_id: List[str]
        :param multiplexed_samples_donors_accession: Filter by multiplexed_samples.donors.accession
        :type multiplexed_samples_donors_accession: List[str]
        :param multiplexed_samples_sample_terms_id: Filter by multiplexed_samples.sample_terms.@id
        :type multiplexed_samples_sample_terms_id: List[str]
        :param multiplexed_samples_sample_terms_term_name: Filter by multiplexed_samples.sample_terms.term_name
        :type multiplexed_samples_sample_terms_term_name: List[str]
        :param multiplexed_samples_status: Filter by multiplexed_samples.status
        :type multiplexed_samples_status: List[str]
        :param multiplexed_samples_summary: Filter by multiplexed_samples.summary
        :type multiplexed_samples_summary: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._multiplexed_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            cellular_sub_pool=cellular_sub_pool,
            barcode_sample_map=barcode_sample_map,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            donors=donors,
            biomarkers=biomarkers,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            construct_library_sets_id=construct_library_sets_id,
            construct_library_sets_accession=construct_library_sets_accession,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            multiplexed_samples_id=multiplexed_samples_id,
            multiplexed_samples_accession=multiplexed_samples_accession,
            multiplexed_samples_construct_library_sets=multiplexed_samples_construct_library_sets,
            multiplexed_samples_disease_terms_id=multiplexed_samples_disease_terms_id,
            multiplexed_samples_disease_terms_term_name=multiplexed_samples_disease_terms_term_name,
            multiplexed_samples_donors_id=multiplexed_samples_donors_id,
            multiplexed_samples_donors_accession=multiplexed_samples_donors_accession,
            multiplexed_samples_sample_terms_id=multiplexed_samples_sample_terms_id,
            multiplexed_samples_sample_terms_term_name=multiplexed_samples_sample_terms_term_name,
            multiplexed_samples_status=multiplexed_samples_status,
            multiplexed_samples_summary=multiplexed_samples_summary,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MultiplexedSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def multiplexed_samples_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        barcode_sample_map: Annotated[Optional[List[StrictStr]], Field(description="Filter by barcode_sample_map")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.@id")] = None,
        construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets.accession")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        multiplexed_samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.@id")] = None,
        multiplexed_samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.accession")] = None,
        multiplexed_samples_construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.construct_library_sets")] = None,
        multiplexed_samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.disease_terms.@id")] = None,
        multiplexed_samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.disease_terms.term_name")] = None,
        multiplexed_samples_donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.@id")] = None,
        multiplexed_samples_donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.donors.accession")] = None,
        multiplexed_samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.sample_terms.@id")] = None,
        multiplexed_samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by multiplexed_samples.sample_terms.term_name")] = None,
        multiplexed_samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.status")] = None,
        multiplexed_samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_samples.summary")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the MultiplexedSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param barcode_sample_map: Filter by barcode_sample_map
        :type barcode_sample_map: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param construct_library_sets_id: Filter by construct_library_sets.@id
        :type construct_library_sets_id: List[str]
        :param construct_library_sets_accession: Filter by construct_library_sets.accession
        :type construct_library_sets_accession: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param multiplexed_samples_id: Filter by multiplexed_samples.@id
        :type multiplexed_samples_id: List[str]
        :param multiplexed_samples_accession: Filter by multiplexed_samples.accession
        :type multiplexed_samples_accession: List[str]
        :param multiplexed_samples_construct_library_sets: Filter by multiplexed_samples.construct_library_sets
        :type multiplexed_samples_construct_library_sets: List[str]
        :param multiplexed_samples_disease_terms_id: Filter by multiplexed_samples.disease_terms.@id
        :type multiplexed_samples_disease_terms_id: List[str]
        :param multiplexed_samples_disease_terms_term_name: Filter by multiplexed_samples.disease_terms.term_name
        :type multiplexed_samples_disease_terms_term_name: List[str]
        :param multiplexed_samples_donors_id: Filter by multiplexed_samples.donors.@id
        :type multiplexed_samples_donors_id: List[str]
        :param multiplexed_samples_donors_accession: Filter by multiplexed_samples.donors.accession
        :type multiplexed_samples_donors_accession: List[str]
        :param multiplexed_samples_sample_terms_id: Filter by multiplexed_samples.sample_terms.@id
        :type multiplexed_samples_sample_terms_id: List[str]
        :param multiplexed_samples_sample_terms_term_name: Filter by multiplexed_samples.sample_terms.term_name
        :type multiplexed_samples_sample_terms_term_name: List[str]
        :param multiplexed_samples_status: Filter by multiplexed_samples.status
        :type multiplexed_samples_status: List[str]
        :param multiplexed_samples_summary: Filter by multiplexed_samples.summary
        :type multiplexed_samples_summary: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._multiplexed_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            cellular_sub_pool=cellular_sub_pool,
            barcode_sample_map=barcode_sample_map,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            donors=donors,
            biomarkers=biomarkers,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            construct_library_sets_id=construct_library_sets_id,
            construct_library_sets_accession=construct_library_sets_accession,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            multiplexed_samples_id=multiplexed_samples_id,
            multiplexed_samples_accession=multiplexed_samples_accession,
            multiplexed_samples_construct_library_sets=multiplexed_samples_construct_library_sets,
            multiplexed_samples_disease_terms_id=multiplexed_samples_disease_terms_id,
            multiplexed_samples_disease_terms_term_name=multiplexed_samples_disease_terms_term_name,
            multiplexed_samples_donors_id=multiplexed_samples_donors_id,
            multiplexed_samples_donors_accession=multiplexed_samples_donors_accession,
            multiplexed_samples_sample_terms_id=multiplexed_samples_sample_terms_id,
            multiplexed_samples_sample_terms_term_name=multiplexed_samples_sample_terms_term_name,
            multiplexed_samples_status=multiplexed_samples_status,
            multiplexed_samples_summary=multiplexed_samples_summary,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MultiplexedSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _multiplexed_samples_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        url,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        cellular_sub_pool,
        barcode_sample_map,
        id,
        summary,
        sorted_fractions,
        origin_of,
        institutional_certificates,
        donors,
        biomarkers,
        classifications,
        award_id,
        award_component,
        construct_library_sets_id,
        construct_library_sets_accession,
        disease_terms_id,
        disease_terms_term_name,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        lab_id,
        lab_title,
        modifications_id,
        modifications_status,
        modifications_summary,
        multiplexed_in_id,
        multiplexed_in_accession,
        multiplexed_samples_id,
        multiplexed_samples_accession,
        multiplexed_samples_construct_library_sets,
        multiplexed_samples_disease_terms_id,
        multiplexed_samples_disease_terms_term_name,
        multiplexed_samples_donors_id,
        multiplexed_samples_donors_accession,
        multiplexed_samples_sample_terms_id,
        multiplexed_samples_sample_terms_term_name,
        multiplexed_samples_status,
        multiplexed_samples_summary,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        treatments_id,
        treatments_purpose,
        treatments_status,
        treatments_summary,
        treatments_treatment_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'url': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            'cellular_sub_pool': 'multi',
            'barcode_sample_map': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'institutional_certificates': 'multi',
            'donors': 'multi',
            'biomarkers': 'multi',
            'classifications': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'construct_library_sets.@id': 'multi',
            'construct_library_sets.accession': 'multi',
            'disease_terms.@id': 'multi',
            'disease_terms.term_name': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'modifications.@id': 'multi',
            'modifications.status': 'multi',
            'modifications.summary': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'multiplexed_samples.@id': 'multi',
            'multiplexed_samples.accession': 'multi',
            'multiplexed_samples.construct_library_sets': 'multi',
            'multiplexed_samples.disease_terms.@id': 'multi',
            'multiplexed_samples.disease_terms.term_name': 'multi',
            'multiplexed_samples.donors.@id': 'multi',
            'multiplexed_samples.donors.accession': 'multi',
            'multiplexed_samples.sample_terms.@id': 'multi',
            'multiplexed_samples.sample_terms.term_name': 'multi',
            'multiplexed_samples.status': 'multi',
            'multiplexed_samples.summary': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'treatments.@id': 'multi',
            'treatments.purpose': 'multi',
            'treatments.status': 'multi',
            'treatments.summary': 'multi',
            'treatments.treatment_type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if cellular_sub_pool is not None:
            
            _query_params.append(('cellular_sub_pool', cellular_sub_pool))
            
        if barcode_sample_map is not None:
            
            _query_params.append(('barcode_sample_map', barcode_sample_map))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if institutional_certificates is not None:
            
            _query_params.append(('institutional_certificates', institutional_certificates))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if biomarkers is not None:
            
            _query_params.append(('biomarkers', biomarkers))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if construct_library_sets_id is not None:
            
            _query_params.append(('construct_library_sets.@id', construct_library_sets_id))
            
        if construct_library_sets_accession is not None:
            
            _query_params.append(('construct_library_sets.accession', construct_library_sets_accession))
            
        if disease_terms_id is not None:
            
            _query_params.append(('disease_terms.@id', disease_terms_id))
            
        if disease_terms_term_name is not None:
            
            _query_params.append(('disease_terms.term_name', disease_terms_term_name))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if modifications_id is not None:
            
            _query_params.append(('modifications.@id', modifications_id))
            
        if modifications_status is not None:
            
            _query_params.append(('modifications.status', modifications_status))
            
        if modifications_summary is not None:
            
            _query_params.append(('modifications.summary', modifications_summary))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if multiplexed_samples_id is not None:
            
            _query_params.append(('multiplexed_samples.@id', multiplexed_samples_id))
            
        if multiplexed_samples_accession is not None:
            
            _query_params.append(('multiplexed_samples.accession', multiplexed_samples_accession))
            
        if multiplexed_samples_construct_library_sets is not None:
            
            _query_params.append(('multiplexed_samples.construct_library_sets', multiplexed_samples_construct_library_sets))
            
        if multiplexed_samples_disease_terms_id is not None:
            
            _query_params.append(('multiplexed_samples.disease_terms.@id', multiplexed_samples_disease_terms_id))
            
        if multiplexed_samples_disease_terms_term_name is not None:
            
            _query_params.append(('multiplexed_samples.disease_terms.term_name', multiplexed_samples_disease_terms_term_name))
            
        if multiplexed_samples_donors_id is not None:
            
            _query_params.append(('multiplexed_samples.donors.@id', multiplexed_samples_donors_id))
            
        if multiplexed_samples_donors_accession is not None:
            
            _query_params.append(('multiplexed_samples.donors.accession', multiplexed_samples_donors_accession))
            
        if multiplexed_samples_sample_terms_id is not None:
            
            _query_params.append(('multiplexed_samples.sample_terms.@id', multiplexed_samples_sample_terms_id))
            
        if multiplexed_samples_sample_terms_term_name is not None:
            
            _query_params.append(('multiplexed_samples.sample_terms.term_name', multiplexed_samples_sample_terms_term_name))
            
        if multiplexed_samples_status is not None:
            
            _query_params.append(('multiplexed_samples.status', multiplexed_samples_status))
            
        if multiplexed_samples_summary is not None:
            
            _query_params.append(('multiplexed_samples.summary', multiplexed_samples_summary))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if treatments_id is not None:
            
            _query_params.append(('treatments.@id', treatments_id))
            
        if treatments_purpose is not None:
            
            _query_params.append(('treatments.purpose', treatments_purpose))
            
        if treatments_status is not None:
            
            _query_params.append(('treatments.status', treatments_status))
            
        if treatments_summary is not None:
            
            _query_params.append(('treatments.summary', treatments_summary))
            
        if treatments_treatment_type is not None:
            
            _query_params.append(('treatments.treatment_type', treatments_treatment_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multiplexed-samples/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def open_reading_frames(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_id")] = None,
        protein_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protein_id")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        pct_identical_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_identical_protein")] = None,
        pct_coverage_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_protein")] = None,
        pct_coverage_orf: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_orf")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        gene_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.@id")] = None,
        gene_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by gene.geneid")] = None,
        gene_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.symbol")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenReadingFrameResults:
        """List items in the OpenReadingFrame collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitted_by: Filter by submitted_by
        :type submitted_by: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param orf_id: Filter by orf_id
        :type orf_id: List[str]
        :param protein_id: Filter by protein_id
        :type protein_id: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param pct_identical_protein: Filter by pct_identical_protein
        :type pct_identical_protein: List[float]
        :param pct_coverage_protein: Filter by pct_coverage_protein
        :type pct_coverage_protein: List[float]
        :param pct_coverage_orf: Filter by pct_coverage_orf
        :type pct_coverage_orf: List[float]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param gene_id: Filter by gene.@id
        :type gene_id: List[str]
        :param gene_geneid: Filter by gene.geneid
        :type gene_geneid: List[str]
        :param gene_symbol: Filter by gene.symbol
        :type gene_symbol: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_reading_frames_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            lab=lab,
            award=award,
            orf_id=orf_id,
            protein_id=protein_id,
            dbxrefs=dbxrefs,
            pct_identical_protein=pct_identical_protein,
            pct_coverage_protein=pct_coverage_protein,
            pct_coverage_orf=pct_coverage_orf,
            id=id,
            summary=summary,
            gene_id=gene_id,
            gene_geneid=gene_geneid,
            gene_symbol=gene_symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenReadingFrameResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def open_reading_frames_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_id")] = None,
        protein_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protein_id")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        pct_identical_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_identical_protein")] = None,
        pct_coverage_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_protein")] = None,
        pct_coverage_orf: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_orf")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        gene_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.@id")] = None,
        gene_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by gene.geneid")] = None,
        gene_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.symbol")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenReadingFrameResults]:
        """List items in the OpenReadingFrame collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitted_by: Filter by submitted_by
        :type submitted_by: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param orf_id: Filter by orf_id
        :type orf_id: List[str]
        :param protein_id: Filter by protein_id
        :type protein_id: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param pct_identical_protein: Filter by pct_identical_protein
        :type pct_identical_protein: List[float]
        :param pct_coverage_protein: Filter by pct_coverage_protein
        :type pct_coverage_protein: List[float]
        :param pct_coverage_orf: Filter by pct_coverage_orf
        :type pct_coverage_orf: List[float]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param gene_id: Filter by gene.@id
        :type gene_id: List[str]
        :param gene_geneid: Filter by gene.geneid
        :type gene_geneid: List[str]
        :param gene_symbol: Filter by gene.symbol
        :type gene_symbol: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_reading_frames_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            lab=lab,
            award=award,
            orf_id=orf_id,
            protein_id=protein_id,
            dbxrefs=dbxrefs,
            pct_identical_protein=pct_identical_protein,
            pct_coverage_protein=pct_coverage_protein,
            pct_coverage_orf=pct_coverage_orf,
            id=id,
            summary=summary,
            gene_id=gene_id,
            gene_geneid=gene_geneid,
            gene_symbol=gene_symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenReadingFrameResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def open_reading_frames_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitted_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        orf_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by orf_id")] = None,
        protein_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protein_id")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        pct_identical_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_identical_protein")] = None,
        pct_coverage_protein: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_protein")] = None,
        pct_coverage_orf: Annotated[Optional[List[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]]], Field(description="Filter by pct_coverage_orf")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        gene_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.@id")] = None,
        gene_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by gene.geneid")] = None,
        gene_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene.symbol")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the OpenReadingFrame collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitted_by: Filter by submitted_by
        :type submitted_by: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param orf_id: Filter by orf_id
        :type orf_id: List[str]
        :param protein_id: Filter by protein_id
        :type protein_id: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param pct_identical_protein: Filter by pct_identical_protein
        :type pct_identical_protein: List[float]
        :param pct_coverage_protein: Filter by pct_coverage_protein
        :type pct_coverage_protein: List[float]
        :param pct_coverage_orf: Filter by pct_coverage_orf
        :type pct_coverage_orf: List[float]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param gene_id: Filter by gene.@id
        :type gene_id: List[str]
        :param gene_geneid: Filter by gene.geneid
        :type gene_geneid: List[str]
        :param gene_symbol: Filter by gene.symbol
        :type gene_symbol: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._open_reading_frames_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitted_by=submitted_by,
            submitter_comment=submitter_comment,
            description=description,
            lab=lab,
            award=award,
            orf_id=orf_id,
            protein_id=protein_id,
            dbxrefs=dbxrefs,
            pct_identical_protein=pct_identical_protein,
            pct_coverage_protein=pct_coverage_protein,
            pct_coverage_orf=pct_coverage_orf,
            id=id,
            summary=summary,
            gene_id=gene_id,
            gene_geneid=gene_geneid,
            gene_symbol=gene_symbol,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenReadingFrameResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _open_reading_frames_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitted_by,
        submitter_comment,
        description,
        lab,
        award,
        orf_id,
        protein_id,
        dbxrefs,
        pct_identical_protein,
        pct_coverage_protein,
        pct_coverage_orf,
        id,
        summary,
        gene_id,
        gene_geneid,
        gene_symbol,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitted_by': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'lab': 'multi',
            'award': 'multi',
            'orf_id': 'multi',
            'protein_id': 'multi',
            'dbxrefs': 'multi',
            'pct_identical_protein': 'multi',
            'pct_coverage_protein': 'multi',
            'pct_coverage_orf': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'gene.@id': 'multi',
            'gene.geneid': 'multi',
            'gene.symbol': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitted_by is not None:
            
            _query_params.append(('submitted_by', submitted_by))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if lab is not None:
            
            _query_params.append(('lab', lab))
            
        if award is not None:
            
            _query_params.append(('award', award))
            
        if orf_id is not None:
            
            _query_params.append(('orf_id', orf_id))
            
        if protein_id is not None:
            
            _query_params.append(('protein_id', protein_id))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if pct_identical_protein is not None:
            
            _query_params.append(('pct_identical_protein', pct_identical_protein))
            
        if pct_coverage_protein is not None:
            
            _query_params.append(('pct_coverage_protein', pct_coverage_protein))
            
        if pct_coverage_orf is not None:
            
            _query_params.append(('pct_coverage_orf', pct_coverage_orf))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if gene_id is not None:
            
            _query_params.append(('gene.@id', gene_id))
            
        if gene_geneid is not None:
            
            _query_params.append(('gene.geneid', gene_geneid))
            
        if gene_symbol is not None:
            
            _query_params.append(('gene.symbol', gene_symbol))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/open-reading-frames/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def pages(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        parent: Annotated[Optional[List[StrictStr]], Field(description="Filter by parent")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        canonical_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by canonical_uri")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PageResults:
        """List items in the Page collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param parent: Filter by parent
        :type parent: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param canonical_uri: Filter by canonical_uri
        :type canonical_uri: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pages_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lab=lab,
            award=award,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            parent=parent,
            name=name,
            title=title,
            id=id,
            summary=summary,
            canonical_uri=canonical_uri,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def pages_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        parent: Annotated[Optional[List[StrictStr]], Field(description="Filter by parent")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        canonical_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by canonical_uri")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PageResults]:
        """List items in the Page collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param parent: Filter by parent
        :type parent: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param canonical_uri: Filter by canonical_uri
        :type canonical_uri: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pages_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lab=lab,
            award=award,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            parent=parent,
            name=name,
            title=title,
            id=id,
            summary=summary,
            canonical_uri=canonical_uri,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def pages_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        award: Annotated[Optional[List[StrictStr]], Field(description="Filter by award")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        parent: Annotated[Optional[List[StrictStr]], Field(description="Filter by parent")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        canonical_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by canonical_uri")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Page collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param award: Filter by award
        :type award: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param parent: Filter by parent
        :type parent: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param canonical_uri: Filter by canonical_uri
        :type canonical_uri: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._pages_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lab=lab,
            award=award,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            parent=parent,
            name=name,
            title=title,
            id=id,
            summary=summary,
            canonical_uri=canonical_uri,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PageResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _pages_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        lab,
        award,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        parent,
        name,
        title,
        id,
        summary,
        canonical_uri,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'lab': 'multi',
            'award': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'parent': 'multi',
            'name': 'multi',
            'title': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'canonical_uri': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if lab is not None:
            
            _query_params.append(('lab', lab))
            
        if award is not None:
            
            _query_params.append(('award', award))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if parent is not None:
            
            _query_params.append(('parent', parent))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if canonical_uri is not None:
            
            _query_params.append(('canonical_uri', canonical_uri))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/pages/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def phenotype_terms(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PhenotypeTermResults:
        """List items in the PhenotypeTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotype_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypeTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def phenotype_terms_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PhenotypeTermResults]:
        """List items in the PhenotypeTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotype_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypeTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def phenotype_terms_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the PhenotypeTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotype_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypeTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _phenotype_terms_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        term_id,
        term_name,
        deprecated_ntr_terms,
        is_a,
        id,
        summary,
        name,
        synonyms,
        ancestors,
        ontology,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'term_id': 'multi',
            'term_name': 'multi',
            'deprecated_ntr_terms': 'multi',
            'is_a': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'synonyms': 'multi',
            'ancestors': 'multi',
            'ontology': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if term_id is not None:
            
            _query_params.append(('term_id', term_id))
            
        if term_name is not None:
            
            _query_params.append(('term_name', term_name))
            
        if deprecated_ntr_terms is not None:
            
            _query_params.append(('deprecated_ntr_terms', deprecated_ntr_terms))
            
        if is_a is not None:
            
            _query_params.append(('is_a', is_a))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if ancestors is not None:
            
            _query_params.append(('ancestors', ancestors))
            
        if ontology is not None:
            
            _query_params.append(('ontology', ontology))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/phenotype-terms/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def phenotypic_features(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        quantity: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by quantity")] = None,
        quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantity_units")] = None,
        observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by observation_date")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by feature.@id")] = None,
        feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_id")] = None,
        feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PhenotypicFeatureResults:
        """List items in the PhenotypicFeature collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param quantity: Filter by quantity
        :type quantity: List[float]
        :param quantity_units: Filter by quantity_units
        :type quantity_units: List[str]
        :param observation_date: Filter by observation_date
        :type observation_date: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param feature_id: Filter by feature.@id
        :type feature_id: List[str]
        :param feature_term_id: Filter by feature.term_id
        :type feature_term_id: List[str]
        :param feature_term_name: Filter by feature.term_name
        :type feature_term_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotypic_features_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            quantity=quantity,
            quantity_units=quantity_units,
            observation_date=observation_date,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            feature_id=feature_id,
            feature_term_id=feature_term_id,
            feature_term_name=feature_term_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypicFeatureResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def phenotypic_features_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        quantity: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by quantity")] = None,
        quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantity_units")] = None,
        observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by observation_date")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by feature.@id")] = None,
        feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_id")] = None,
        feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PhenotypicFeatureResults]:
        """List items in the PhenotypicFeature collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param quantity: Filter by quantity
        :type quantity: List[float]
        :param quantity_units: Filter by quantity_units
        :type quantity_units: List[str]
        :param observation_date: Filter by observation_date
        :type observation_date: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param feature_id: Filter by feature.@id
        :type feature_id: List[str]
        :param feature_term_id: Filter by feature.term_id
        :type feature_term_id: List[str]
        :param feature_term_name: Filter by feature.term_name
        :type feature_term_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotypic_features_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            quantity=quantity,
            quantity_units=quantity_units,
            observation_date=observation_date,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            feature_id=feature_id,
            feature_term_id=feature_term_id,
            feature_term_name=feature_term_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypicFeatureResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def phenotypic_features_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        quantity: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by quantity")] = None,
        quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by quantity_units")] = None,
        observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by observation_date")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by feature.@id")] = None,
        feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_id")] = None,
        feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by feature.term_name")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the PhenotypicFeature collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param quantity: Filter by quantity
        :type quantity: List[float]
        :param quantity_units: Filter by quantity_units
        :type quantity_units: List[str]
        :param observation_date: Filter by observation_date
        :type observation_date: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param feature_id: Filter by feature.@id
        :type feature_id: List[str]
        :param feature_term_id: Filter by feature.term_id
        :type feature_term_id: List[str]
        :param feature_term_name: Filter by feature.term_name
        :type feature_term_name: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phenotypic_features_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            quantity=quantity,
            quantity_units=quantity_units,
            observation_date=observation_date,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            feature_id=feature_id,
            feature_term_id=feature_term_id,
            feature_term_name=feature_term_name,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhenotypicFeatureResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _phenotypic_features_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        quantity,
        quantity_units,
        observation_date,
        id,
        summary,
        award_id,
        award_component,
        feature_id,
        feature_term_id,
        feature_term_name,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'quantity': 'multi',
            'quantity_units': 'multi',
            'observation_date': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'feature.@id': 'multi',
            'feature.term_id': 'multi',
            'feature.term_name': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if quantity is not None:
            
            _query_params.append(('quantity', quantity))
            
        if quantity_units is not None:
            
            _query_params.append(('quantity_units', quantity_units))
            
        if observation_date is not None:
            
            _query_params.append(('observation_date', observation_date))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if feature_id is not None:
            
            _query_params.append(('feature.@id', feature_id))
            
        if feature_term_id is not None:
            
            _query_params.append(('feature.term_id', feature_term_id))
            
        if feature_term_name is not None:
            
            _query_params.append(('feature.term_name', feature_term_name))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/phenotypic-features/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def platform_terms(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter by company")] = None,
        sequencing_kits: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kits")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PlatformTermResults:
        """List items in the PlatformTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param company: Filter by company
        :type company: List[str]
        :param sequencing_kits: Filter by sequencing_kits
        :type sequencing_kits: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._platform_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            company=company,
            sequencing_kits=sequencing_kits,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlatformTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def platform_terms_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter by company")] = None,
        sequencing_kits: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kits")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PlatformTermResults]:
        """List items in the PlatformTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param company: Filter by company
        :type company: List[str]
        :param sequencing_kits: Filter by sequencing_kits
        :type sequencing_kits: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._platform_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            company=company,
            sequencing_kits=sequencing_kits,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlatformTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def platform_terms_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        company: Annotated[Optional[List[StrictStr]], Field(description="Filter by company")] = None,
        sequencing_kits: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kits")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the PlatformTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param company: Filter by company
        :type company: List[str]
        :param sequencing_kits: Filter by sequencing_kits
        :type sequencing_kits: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._platform_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            company=company,
            sequencing_kits=sequencing_kits,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PlatformTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _platform_terms_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        term_id,
        term_name,
        deprecated_ntr_terms,
        is_a,
        company,
        sequencing_kits,
        id,
        summary,
        name,
        synonyms,
        ancestors,
        ontology,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'term_id': 'multi',
            'term_name': 'multi',
            'deprecated_ntr_terms': 'multi',
            'is_a': 'multi',
            'company': 'multi',
            'sequencing_kits': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'synonyms': 'multi',
            'ancestors': 'multi',
            'ontology': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if term_id is not None:
            
            _query_params.append(('term_id', term_id))
            
        if term_name is not None:
            
            _query_params.append(('term_name', term_name))
            
        if deprecated_ntr_terms is not None:
            
            _query_params.append(('deprecated_ntr_terms', deprecated_ntr_terms))
            
        if is_a is not None:
            
            _query_params.append(('is_a', is_a))
            
        if company is not None:
            
            _query_params.append(('company', company))
            
        if sequencing_kits is not None:
            
            _query_params.append(('sequencing_kits', sequencing_kits))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if ancestors is not None:
            
            _query_params.append(('ancestors', ancestors))
            
        if ontology is not None:
            
            _query_params.append(('ontology', ontology))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/platform-terms/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def prediction_sets(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        input_file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PredictionSetResults:
        """List items in the PredictionSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param input_file_sets: Filter by input_file_sets
        :type input_file_sets: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            input_file_sets=input_file_sets,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            scope=scope,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def prediction_sets_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        input_file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PredictionSetResults]:
        """List items in the PredictionSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param input_file_sets: Filter by input_file_sets
        :type input_file_sets: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            input_file_sets=input_file_sets,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            scope=scope,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def prediction_sets_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        input_file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_sets")] = None,
        small_scale_loci_list: Annotated[Optional[List[Locus]], Field(description="Filter by small_scale_loci_list")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        file_set_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set_type")] = None,
        scope: Annotated[Optional[List[StrictStr]], Field(description="Filter by scope")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_files_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_files_timestamp")] = None,
        input_file_set_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_set_for")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        award_contact_pi_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.@id")] = None,
        award_contact_pi_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.contact_pi.title")] = None,
        award_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by award.title")] = None,
        control_for_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.@id")] = None,
        control_for_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by control_for.accession")] = None,
        control_for_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by control_for.aliases")] = None,
        donors_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.@id")] = None,
        donors_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.accession")] = None,
        donors_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by donors.aliases")] = None,
        donors_sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.sex")] = None,
        donors_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.status")] = None,
        donors_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors.taxa")] = None,
        files_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.@id")] = None,
        files_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.accession")] = None,
        files_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by files.aliases")] = None,
        files_content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.content_type")] = None,
        files_creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.creation_timestamp")] = None,
        files_file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.file_format")] = None,
        files_file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by files.file_size")] = None,
        files_href: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.href")] = None,
        files_s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.s3_uri")] = None,
        files_sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.sequencing_platform")] = None,
        files_submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.submitted_file_name")] = None,
        files_upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by files.upload_status")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        large_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.@id")] = None,
        large_scale_gene_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_gene_list.accession")] = None,
        large_scale_gene_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_gene_list.aliases")] = None,
        large_scale_loci_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.@id")] = None,
        large_scale_loci_list_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by large_scale_loci_list.accession")] = None,
        large_scale_loci_list_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by large_scale_loci_list.aliases")] = None,
        samples_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.@id")] = None,
        samples_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.accession")] = None,
        samples_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.aliases")] = None,
        samples_cell_fate_change_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.cell_fate_change_treatments")] = None,
        samples_classifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.classifications")] = None,
        samples_construct_library_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.@id")] = None,
        samples_construct_library_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.accession")] = None,
        samples_construct_library_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.construct_library_sets.summary")] = None,
        samples_disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.disease_terms.@id")] = None,
        samples_disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.disease_terms.term_name")] = None,
        samples_modifications: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter by samples.modifications")] = None,
        samples_sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.@id")] = None,
        samples_sample_terms_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.aliases")] = None,
        samples_sample_terms_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.status")] = None,
        samples_sample_terms_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.sample_terms.summary")] = None,
        samples_sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.sample_terms.term_name")] = None,
        samples_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.status")] = None,
        samples_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.summary")] = None,
        samples_targeted_sample_term_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.targeted_sample_term.@id")] = None,
        samples_targeted_sample_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by samples.targeted_sample_term.term_name")] = None,
        samples_taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.taxa")] = None,
        samples_treatments: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples.treatments")] = None,
        small_scale_gene_list_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.@id")] = None,
        small_scale_gene_list_geneid: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by small_scale_gene_list.geneid")] = None,
        small_scale_gene_list_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.name")] = None,
        small_scale_gene_list_symbol: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.symbol")] = None,
        small_scale_gene_list_synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by small_scale_gene_list.synonyms")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the PredictionSet collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param input_file_sets: Filter by input_file_sets
        :type input_file_sets: List[str]
        :param small_scale_loci_list: Filter by small_scale_loci_list
        :type small_scale_loci_list: List[Locus]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param file_set_type: Filter by file_set_type
        :type file_set_type: List[str]
        :param scope: Filter by scope
        :type scope: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_files_timestamp: Filter by submitted_files_timestamp
        :type submitted_files_timestamp: List[str]
        :param input_file_set_for: Filter by input_file_set_for
        :type input_file_set_for: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param award_contact_pi_id: Filter by award.contact_pi.@id
        :type award_contact_pi_id: List[str]
        :param award_contact_pi_title: Filter by award.contact_pi.title
        :type award_contact_pi_title: List[str]
        :param award_title: Filter by award.title
        :type award_title: List[str]
        :param control_for_id: Filter by control_for.@id
        :type control_for_id: List[str]
        :param control_for_accession: Filter by control_for.accession
        :type control_for_accession: List[str]
        :param control_for_aliases: Filter by control_for.aliases
        :type control_for_aliases: List[str]
        :param donors_id: Filter by donors.@id
        :type donors_id: List[str]
        :param donors_accession: Filter by donors.accession
        :type donors_accession: List[str]
        :param donors_aliases: Filter by donors.aliases
        :type donors_aliases: List[str]
        :param donors_sex: Filter by donors.sex
        :type donors_sex: List[str]
        :param donors_status: Filter by donors.status
        :type donors_status: List[str]
        :param donors_taxa: Filter by donors.taxa
        :type donors_taxa: List[str]
        :param files_id: Filter by files.@id
        :type files_id: List[str]
        :param files_accession: Filter by files.accession
        :type files_accession: List[str]
        :param files_aliases: Filter by files.aliases
        :type files_aliases: List[str]
        :param files_content_type: Filter by files.content_type
        :type files_content_type: List[str]
        :param files_creation_timestamp: Filter by files.creation_timestamp
        :type files_creation_timestamp: List[str]
        :param files_file_format: Filter by files.file_format
        :type files_file_format: List[str]
        :param files_file_size: Filter by files.file_size
        :type files_file_size: List[int]
        :param files_href: Filter by files.href
        :type files_href: List[str]
        :param files_s3_uri: Filter by files.s3_uri
        :type files_s3_uri: List[str]
        :param files_sequencing_platform: Filter by files.sequencing_platform
        :type files_sequencing_platform: List[str]
        :param files_submitted_file_name: Filter by files.submitted_file_name
        :type files_submitted_file_name: List[str]
        :param files_upload_status: Filter by files.upload_status
        :type files_upload_status: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param large_scale_gene_list_id: Filter by large_scale_gene_list.@id
        :type large_scale_gene_list_id: List[str]
        :param large_scale_gene_list_accession: Filter by large_scale_gene_list.accession
        :type large_scale_gene_list_accession: List[str]
        :param large_scale_gene_list_aliases: Filter by large_scale_gene_list.aliases
        :type large_scale_gene_list_aliases: List[str]
        :param large_scale_loci_list_id: Filter by large_scale_loci_list.@id
        :type large_scale_loci_list_id: List[str]
        :param large_scale_loci_list_accession: Filter by large_scale_loci_list.accession
        :type large_scale_loci_list_accession: List[str]
        :param large_scale_loci_list_aliases: Filter by large_scale_loci_list.aliases
        :type large_scale_loci_list_aliases: List[str]
        :param samples_id: Filter by samples.@id
        :type samples_id: List[str]
        :param samples_accession: Filter by samples.accession
        :type samples_accession: List[str]
        :param samples_aliases: Filter by samples.aliases
        :type samples_aliases: List[str]
        :param samples_cell_fate_change_treatments: Filter by samples.cell_fate_change_treatments
        :type samples_cell_fate_change_treatments: List[str]
        :param samples_classifications: Filter by samples.classifications
        :type samples_classifications: List[str]
        :param samples_construct_library_sets_id: Filter by samples.construct_library_sets.@id
        :type samples_construct_library_sets_id: List[str]
        :param samples_construct_library_sets_accession: Filter by samples.construct_library_sets.accession
        :type samples_construct_library_sets_accession: List[str]
        :param samples_construct_library_sets_summary: Filter by samples.construct_library_sets.summary
        :type samples_construct_library_sets_summary: List[str]
        :param samples_disease_terms_id: Filter by samples.disease_terms.@id
        :type samples_disease_terms_id: List[str]
        :param samples_disease_terms_term_name: Filter by samples.disease_terms.term_name
        :type samples_disease_terms_term_name: List[str]
        :param samples_modifications: Filter by samples.modifications
        :type samples_modifications: List[str]
        :param samples_sample_terms_id: Filter by samples.sample_terms.@id
        :type samples_sample_terms_id: List[str]
        :param samples_sample_terms_aliases: Filter by samples.sample_terms.aliases
        :type samples_sample_terms_aliases: List[str]
        :param samples_sample_terms_status: Filter by samples.sample_terms.status
        :type samples_sample_terms_status: List[str]
        :param samples_sample_terms_summary: Filter by samples.sample_terms.summary
        :type samples_sample_terms_summary: List[str]
        :param samples_sample_terms_term_name: Filter by samples.sample_terms.term_name
        :type samples_sample_terms_term_name: List[str]
        :param samples_status: Filter by samples.status
        :type samples_status: List[str]
        :param samples_summary: Filter by samples.summary
        :type samples_summary: List[str]
        :param samples_targeted_sample_term_id: Filter by samples.targeted_sample_term.@id
        :type samples_targeted_sample_term_id: List[str]
        :param samples_targeted_sample_term_term_name: Filter by samples.targeted_sample_term.term_name
        :type samples_targeted_sample_term_term_name: List[str]
        :param samples_taxa: Filter by samples.taxa
        :type samples_taxa: List[str]
        :param samples_treatments: Filter by samples.treatments
        :type samples_treatments: List[str]
        :param small_scale_gene_list_id: Filter by small_scale_gene_list.@id
        :type small_scale_gene_list_id: List[str]
        :param small_scale_gene_list_geneid: Filter by small_scale_gene_list.geneid
        :type small_scale_gene_list_geneid: List[str]
        :param small_scale_gene_list_name: Filter by small_scale_gene_list.name
        :type small_scale_gene_list_name: List[str]
        :param small_scale_gene_list_symbol: Filter by small_scale_gene_list.symbol
        :type small_scale_gene_list_symbol: List[str]
        :param small_scale_gene_list_synonyms: Filter by small_scale_gene_list.synonyms
        :type small_scale_gene_list_synonyms: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._prediction_sets_serialize(
            query=query,
            limit=limit,
            sort=sort,
            input_file_sets=input_file_sets,
            small_scale_loci_list=small_scale_loci_list,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            file_set_type=file_set_type,
            scope=scope,
            id=id,
            summary=summary,
            submitted_files_timestamp=submitted_files_timestamp,
            input_file_set_for=input_file_set_for,
            award_id=award_id,
            award_component=award_component,
            award_contact_pi_id=award_contact_pi_id,
            award_contact_pi_title=award_contact_pi_title,
            award_title=award_title,
            control_for_id=control_for_id,
            control_for_accession=control_for_accession,
            control_for_aliases=control_for_aliases,
            donors_id=donors_id,
            donors_accession=donors_accession,
            donors_aliases=donors_aliases,
            donors_sex=donors_sex,
            donors_status=donors_status,
            donors_taxa=donors_taxa,
            files_id=files_id,
            files_accession=files_accession,
            files_aliases=files_aliases,
            files_content_type=files_content_type,
            files_creation_timestamp=files_creation_timestamp,
            files_file_format=files_file_format,
            files_file_size=files_file_size,
            files_href=files_href,
            files_s3_uri=files_s3_uri,
            files_sequencing_platform=files_sequencing_platform,
            files_submitted_file_name=files_submitted_file_name,
            files_upload_status=files_upload_status,
            lab_id=lab_id,
            lab_title=lab_title,
            large_scale_gene_list_id=large_scale_gene_list_id,
            large_scale_gene_list_accession=large_scale_gene_list_accession,
            large_scale_gene_list_aliases=large_scale_gene_list_aliases,
            large_scale_loci_list_id=large_scale_loci_list_id,
            large_scale_loci_list_accession=large_scale_loci_list_accession,
            large_scale_loci_list_aliases=large_scale_loci_list_aliases,
            samples_id=samples_id,
            samples_accession=samples_accession,
            samples_aliases=samples_aliases,
            samples_cell_fate_change_treatments=samples_cell_fate_change_treatments,
            samples_classifications=samples_classifications,
            samples_construct_library_sets_id=samples_construct_library_sets_id,
            samples_construct_library_sets_accession=samples_construct_library_sets_accession,
            samples_construct_library_sets_summary=samples_construct_library_sets_summary,
            samples_disease_terms_id=samples_disease_terms_id,
            samples_disease_terms_term_name=samples_disease_terms_term_name,
            samples_modifications=samples_modifications,
            samples_sample_terms_id=samples_sample_terms_id,
            samples_sample_terms_aliases=samples_sample_terms_aliases,
            samples_sample_terms_status=samples_sample_terms_status,
            samples_sample_terms_summary=samples_sample_terms_summary,
            samples_sample_terms_term_name=samples_sample_terms_term_name,
            samples_status=samples_status,
            samples_summary=samples_summary,
            samples_targeted_sample_term_id=samples_targeted_sample_term_id,
            samples_targeted_sample_term_term_name=samples_targeted_sample_term_term_name,
            samples_taxa=samples_taxa,
            samples_treatments=samples_treatments,
            small_scale_gene_list_id=small_scale_gene_list_id,
            small_scale_gene_list_geneid=small_scale_gene_list_geneid,
            small_scale_gene_list_name=small_scale_gene_list_name,
            small_scale_gene_list_symbol=small_scale_gene_list_symbol,
            small_scale_gene_list_synonyms=small_scale_gene_list_synonyms,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PredictionSetResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _prediction_sets_serialize(
        self,
        query,
        limit,
        sort,
        input_file_sets,
        small_scale_loci_list,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        file_set_type,
        scope,
        id,
        summary,
        submitted_files_timestamp,
        input_file_set_for,
        award_id,
        award_component,
        award_contact_pi_id,
        award_contact_pi_title,
        award_title,
        control_for_id,
        control_for_accession,
        control_for_aliases,
        donors_id,
        donors_accession,
        donors_aliases,
        donors_sex,
        donors_status,
        donors_taxa,
        files_id,
        files_accession,
        files_aliases,
        files_content_type,
        files_creation_timestamp,
        files_file_format,
        files_file_size,
        files_href,
        files_s3_uri,
        files_sequencing_platform,
        files_submitted_file_name,
        files_upload_status,
        lab_id,
        lab_title,
        large_scale_gene_list_id,
        large_scale_gene_list_accession,
        large_scale_gene_list_aliases,
        large_scale_loci_list_id,
        large_scale_loci_list_accession,
        large_scale_loci_list_aliases,
        samples_id,
        samples_accession,
        samples_aliases,
        samples_cell_fate_change_treatments,
        samples_classifications,
        samples_construct_library_sets_id,
        samples_construct_library_sets_accession,
        samples_construct_library_sets_summary,
        samples_disease_terms_id,
        samples_disease_terms_term_name,
        samples_modifications,
        samples_sample_terms_id,
        samples_sample_terms_aliases,
        samples_sample_terms_status,
        samples_sample_terms_summary,
        samples_sample_terms_term_name,
        samples_status,
        samples_summary,
        samples_targeted_sample_term_id,
        samples_targeted_sample_term_term_name,
        samples_taxa,
        samples_treatments,
        small_scale_gene_list_id,
        small_scale_gene_list_geneid,
        small_scale_gene_list_name,
        small_scale_gene_list_symbol,
        small_scale_gene_list_synonyms,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'input_file_sets': 'multi',
            'small_scale_loci_list': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'file_set_type': 'multi',
            'scope': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_files_timestamp': 'multi',
            'input_file_set_for': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'award.contact_pi.@id': 'multi',
            'award.contact_pi.title': 'multi',
            'award.title': 'multi',
            'control_for.@id': 'multi',
            'control_for.accession': 'multi',
            'control_for.aliases': 'multi',
            'donors.@id': 'multi',
            'donors.accession': 'multi',
            'donors.aliases': 'multi',
            'donors.sex': 'multi',
            'donors.status': 'multi',
            'donors.taxa': 'multi',
            'files.@id': 'multi',
            'files.accession': 'multi',
            'files.aliases': 'multi',
            'files.content_type': 'multi',
            'files.creation_timestamp': 'multi',
            'files.file_format': 'multi',
            'files.file_size': 'multi',
            'files.href': 'multi',
            'files.s3_uri': 'multi',
            'files.sequencing_platform': 'multi',
            'files.submitted_file_name': 'multi',
            'files.upload_status': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'large_scale_gene_list.@id': 'multi',
            'large_scale_gene_list.accession': 'multi',
            'large_scale_gene_list.aliases': 'multi',
            'large_scale_loci_list.@id': 'multi',
            'large_scale_loci_list.accession': 'multi',
            'large_scale_loci_list.aliases': 'multi',
            'samples.@id': 'multi',
            'samples.accession': 'multi',
            'samples.aliases': 'multi',
            'samples.cell_fate_change_treatments': 'multi',
            'samples.classifications': 'multi',
            'samples.construct_library_sets.@id': 'multi',
            'samples.construct_library_sets.accession': 'multi',
            'samples.construct_library_sets.summary': 'multi',
            'samples.disease_terms.@id': 'multi',
            'samples.disease_terms.term_name': 'multi',
            'samples.modifications': 'multi',
            'samples.sample_terms.@id': 'multi',
            'samples.sample_terms.aliases': 'multi',
            'samples.sample_terms.status': 'multi',
            'samples.sample_terms.summary': 'multi',
            'samples.sample_terms.term_name': 'multi',
            'samples.status': 'multi',
            'samples.summary': 'multi',
            'samples.targeted_sample_term.@id': 'multi',
            'samples.targeted_sample_term.term_name': 'multi',
            'samples.taxa': 'multi',
            'samples.treatments': 'multi',
            'small_scale_gene_list.@id': 'multi',
            'small_scale_gene_list.geneid': 'multi',
            'small_scale_gene_list.name': 'multi',
            'small_scale_gene_list.symbol': 'multi',
            'small_scale_gene_list.synonyms': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if input_file_sets is not None:
            
            _query_params.append(('input_file_sets', input_file_sets))
            
        if small_scale_loci_list is not None:
            
            _query_params.append(('small_scale_loci_list', small_scale_loci_list))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if file_set_type is not None:
            
            _query_params.append(('file_set_type', file_set_type))
            
        if scope is not None:
            
            _query_params.append(('scope', scope))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_files_timestamp is not None:
            
            _query_params.append(('submitted_files_timestamp', submitted_files_timestamp))
            
        if input_file_set_for is not None:
            
            _query_params.append(('input_file_set_for', input_file_set_for))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if award_contact_pi_id is not None:
            
            _query_params.append(('award.contact_pi.@id', award_contact_pi_id))
            
        if award_contact_pi_title is not None:
            
            _query_params.append(('award.contact_pi.title', award_contact_pi_title))
            
        if award_title is not None:
            
            _query_params.append(('award.title', award_title))
            
        if control_for_id is not None:
            
            _query_params.append(('control_for.@id', control_for_id))
            
        if control_for_accession is not None:
            
            _query_params.append(('control_for.accession', control_for_accession))
            
        if control_for_aliases is not None:
            
            _query_params.append(('control_for.aliases', control_for_aliases))
            
        if donors_id is not None:
            
            _query_params.append(('donors.@id', donors_id))
            
        if donors_accession is not None:
            
            _query_params.append(('donors.accession', donors_accession))
            
        if donors_aliases is not None:
            
            _query_params.append(('donors.aliases', donors_aliases))
            
        if donors_sex is not None:
            
            _query_params.append(('donors.sex', donors_sex))
            
        if donors_status is not None:
            
            _query_params.append(('donors.status', donors_status))
            
        if donors_taxa is not None:
            
            _query_params.append(('donors.taxa', donors_taxa))
            
        if files_id is not None:
            
            _query_params.append(('files.@id', files_id))
            
        if files_accession is not None:
            
            _query_params.append(('files.accession', files_accession))
            
        if files_aliases is not None:
            
            _query_params.append(('files.aliases', files_aliases))
            
        if files_content_type is not None:
            
            _query_params.append(('files.content_type', files_content_type))
            
        if files_creation_timestamp is not None:
            
            _query_params.append(('files.creation_timestamp', files_creation_timestamp))
            
        if files_file_format is not None:
            
            _query_params.append(('files.file_format', files_file_format))
            
        if files_file_size is not None:
            
            _query_params.append(('files.file_size', files_file_size))
            
        if files_href is not None:
            
            _query_params.append(('files.href', files_href))
            
        if files_s3_uri is not None:
            
            _query_params.append(('files.s3_uri', files_s3_uri))
            
        if files_sequencing_platform is not None:
            
            _query_params.append(('files.sequencing_platform', files_sequencing_platform))
            
        if files_submitted_file_name is not None:
            
            _query_params.append(('files.submitted_file_name', files_submitted_file_name))
            
        if files_upload_status is not None:
            
            _query_params.append(('files.upload_status', files_upload_status))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if large_scale_gene_list_id is not None:
            
            _query_params.append(('large_scale_gene_list.@id', large_scale_gene_list_id))
            
        if large_scale_gene_list_accession is not None:
            
            _query_params.append(('large_scale_gene_list.accession', large_scale_gene_list_accession))
            
        if large_scale_gene_list_aliases is not None:
            
            _query_params.append(('large_scale_gene_list.aliases', large_scale_gene_list_aliases))
            
        if large_scale_loci_list_id is not None:
            
            _query_params.append(('large_scale_loci_list.@id', large_scale_loci_list_id))
            
        if large_scale_loci_list_accession is not None:
            
            _query_params.append(('large_scale_loci_list.accession', large_scale_loci_list_accession))
            
        if large_scale_loci_list_aliases is not None:
            
            _query_params.append(('large_scale_loci_list.aliases', large_scale_loci_list_aliases))
            
        if samples_id is not None:
            
            _query_params.append(('samples.@id', samples_id))
            
        if samples_accession is not None:
            
            _query_params.append(('samples.accession', samples_accession))
            
        if samples_aliases is not None:
            
            _query_params.append(('samples.aliases', samples_aliases))
            
        if samples_cell_fate_change_treatments is not None:
            
            _query_params.append(('samples.cell_fate_change_treatments', samples_cell_fate_change_treatments))
            
        if samples_classifications is not None:
            
            _query_params.append(('samples.classifications', samples_classifications))
            
        if samples_construct_library_sets_id is not None:
            
            _query_params.append(('samples.construct_library_sets.@id', samples_construct_library_sets_id))
            
        if samples_construct_library_sets_accession is not None:
            
            _query_params.append(('samples.construct_library_sets.accession', samples_construct_library_sets_accession))
            
        if samples_construct_library_sets_summary is not None:
            
            _query_params.append(('samples.construct_library_sets.summary', samples_construct_library_sets_summary))
            
        if samples_disease_terms_id is not None:
            
            _query_params.append(('samples.disease_terms.@id', samples_disease_terms_id))
            
        if samples_disease_terms_term_name is not None:
            
            _query_params.append(('samples.disease_terms.term_name', samples_disease_terms_term_name))
            
        if samples_modifications is not None:
            
            _query_params.append(('samples.modifications', samples_modifications))
            
        if samples_sample_terms_id is not None:
            
            _query_params.append(('samples.sample_terms.@id', samples_sample_terms_id))
            
        if samples_sample_terms_aliases is not None:
            
            _query_params.append(('samples.sample_terms.aliases', samples_sample_terms_aliases))
            
        if samples_sample_terms_status is not None:
            
            _query_params.append(('samples.sample_terms.status', samples_sample_terms_status))
            
        if samples_sample_terms_summary is not None:
            
            _query_params.append(('samples.sample_terms.summary', samples_sample_terms_summary))
            
        if samples_sample_terms_term_name is not None:
            
            _query_params.append(('samples.sample_terms.term_name', samples_sample_terms_term_name))
            
        if samples_status is not None:
            
            _query_params.append(('samples.status', samples_status))
            
        if samples_summary is not None:
            
            _query_params.append(('samples.summary', samples_summary))
            
        if samples_targeted_sample_term_id is not None:
            
            _query_params.append(('samples.targeted_sample_term.@id', samples_targeted_sample_term_id))
            
        if samples_targeted_sample_term_term_name is not None:
            
            _query_params.append(('samples.targeted_sample_term.term_name', samples_targeted_sample_term_term_name))
            
        if samples_taxa is not None:
            
            _query_params.append(('samples.taxa', samples_taxa))
            
        if samples_treatments is not None:
            
            _query_params.append(('samples.treatments', samples_treatments))
            
        if small_scale_gene_list_id is not None:
            
            _query_params.append(('small_scale_gene_list.@id', small_scale_gene_list_id))
            
        if small_scale_gene_list_geneid is not None:
            
            _query_params.append(('small_scale_gene_list.geneid', small_scale_gene_list_geneid))
            
        if small_scale_gene_list_name is not None:
            
            _query_params.append(('small_scale_gene_list.name', small_scale_gene_list_name))
            
        if small_scale_gene_list_symbol is not None:
            
            _query_params.append(('small_scale_gene_list.symbol', small_scale_gene_list_symbol))
            
        if small_scale_gene_list_synonyms is not None:
            
            _query_params.append(('small_scale_gene_list.synonyms', small_scale_gene_list_synonyms))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/prediction-sets/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def primary_cells(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PrimaryCellResults:
        """List items in the PrimaryCell collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._primary_cells_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            passage_number=passage_number,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimaryCellResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def primary_cells_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PrimaryCellResults]:
        """List items in the PrimaryCell collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._primary_cells_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            passage_number=passage_number,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimaryCellResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def primary_cells_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        passage_number: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by passage_number")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the PrimaryCell collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param passage_number: Filter by passage_number
        :type passage_number: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._primary_cells_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            passage_number=passage_number,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PrimaryCellResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _primary_cells_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        taxa,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        lower_bound_age,
        upper_bound_age,
        age_units,
        pooled_from,
        part_of,
        originated_from,
        donors,
        biomarkers,
        embryonic,
        cellular_sub_pool,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        construct_library_sets,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        passage_number,
        id,
        summary,
        sorted_fractions,
        origin_of,
        sex,
        age,
        upper_bound_age_in_hours,
        lower_bound_age_in_hours,
        parts,
        pooled_in,
        classifications,
        award_id,
        award_component,
        disease_terms_id,
        disease_terms_term_name,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        institutional_certificates_id,
        institutional_certificates_certificate_identifier,
        lab_id,
        lab_title,
        modifications_id,
        modifications_status,
        modifications_summary,
        multiplexed_in_id,
        multiplexed_in_accession,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        treatments_id,
        treatments_purpose,
        treatments_status,
        treatments_summary,
        treatments_treatment_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'taxa': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'lower_bound_age': 'multi',
            'upper_bound_age': 'multi',
            'age_units': 'multi',
            'pooled_from': 'multi',
            'part_of': 'multi',
            'originated_from': 'multi',
            'donors': 'multi',
            'biomarkers': 'multi',
            'embryonic': 'multi',
            'cellular_sub_pool': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'construct_library_sets': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            'passage_number': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'sex': 'multi',
            'age': 'multi',
            'upper_bound_age_in_hours': 'multi',
            'lower_bound_age_in_hours': 'multi',
            'parts': 'multi',
            'pooled_in': 'multi',
            'classifications': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'disease_terms.@id': 'multi',
            'disease_terms.term_name': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'institutional_certificates.@id': 'multi',
            'institutional_certificates.certificate_identifier': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'modifications.@id': 'multi',
            'modifications.status': 'multi',
            'modifications.summary': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'treatments.@id': 'multi',
            'treatments.purpose': 'multi',
            'treatments.status': 'multi',
            'treatments.summary': 'multi',
            'treatments.treatment_type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if lower_bound_age is not None:
            
            _query_params.append(('lower_bound_age', lower_bound_age))
            
        if upper_bound_age is not None:
            
            _query_params.append(('upper_bound_age', upper_bound_age))
            
        if age_units is not None:
            
            _query_params.append(('age_units', age_units))
            
        if pooled_from is not None:
            
            _query_params.append(('pooled_from', pooled_from))
            
        if part_of is not None:
            
            _query_params.append(('part_of', part_of))
            
        if originated_from is not None:
            
            _query_params.append(('originated_from', originated_from))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if biomarkers is not None:
            
            _query_params.append(('biomarkers', biomarkers))
            
        if embryonic is not None:
            
            _query_params.append(('embryonic', embryonic))
            
        if cellular_sub_pool is not None:
            
            _query_params.append(('cellular_sub_pool', cellular_sub_pool))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if construct_library_sets is not None:
            
            _query_params.append(('construct_library_sets', construct_library_sets))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if passage_number is not None:
            
            _query_params.append(('passage_number', passage_number))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if age is not None:
            
            _query_params.append(('age', age))
            
        if upper_bound_age_in_hours is not None:
            
            _query_params.append(('upper_bound_age_in_hours', upper_bound_age_in_hours))
            
        if lower_bound_age_in_hours is not None:
            
            _query_params.append(('lower_bound_age_in_hours', lower_bound_age_in_hours))
            
        if parts is not None:
            
            _query_params.append(('parts', parts))
            
        if pooled_in is not None:
            
            _query_params.append(('pooled_in', pooled_in))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if disease_terms_id is not None:
            
            _query_params.append(('disease_terms.@id', disease_terms_id))
            
        if disease_terms_term_name is not None:
            
            _query_params.append(('disease_terms.term_name', disease_terms_term_name))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if institutional_certificates_id is not None:
            
            _query_params.append(('institutional_certificates.@id', institutional_certificates_id))
            
        if institutional_certificates_certificate_identifier is not None:
            
            _query_params.append(('institutional_certificates.certificate_identifier', institutional_certificates_certificate_identifier))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if modifications_id is not None:
            
            _query_params.append(('modifications.@id', modifications_id))
            
        if modifications_status is not None:
            
            _query_params.append(('modifications.status', modifications_status))
            
        if modifications_summary is not None:
            
            _query_params.append(('modifications.summary', modifications_summary))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if treatments_id is not None:
            
            _query_params.append(('treatments.@id', treatments_id))
            
        if treatments_purpose is not None:
            
            _query_params.append(('treatments.purpose', treatments_purpose))
            
        if treatments_status is not None:
            
            _query_params.append(('treatments.status', treatments_status))
            
        if treatments_summary is not None:
            
            _query_params.append(('treatments.summary', treatments_summary))
            
        if treatments_treatment_type is not None:
            
            _query_params.append(('treatments.treatment_type', treatments_treatment_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/primary-cells/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def publications(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        abstract: Annotated[Optional[List[StrictStr]], Field(description="Filter by abstract")] = None,
        authors: Annotated[Optional[List[StrictStr]], Field(description="Filter by authors")] = None,
        date_published: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_published")] = None,
        date_revised: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_revised")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter by issue")] = None,
        page: Annotated[Optional[List[StrictStr]], Field(description="Filter by page")] = None,
        volume: Annotated[Optional[List[StrictStr]], Field(description="Filter by volume")] = None,
        journal: Annotated[Optional[List[StrictStr]], Field(description="Filter by journal")] = None,
        published_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by published_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        publication_year: Annotated[Optional[List[StrictInt]], Field(description="Filter by publication_year")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets")] = None,
        workflows: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflows")] = None,
        software: Annotated[Optional[List[StrictStr]], Field(description="Filter by software")] = None,
        software_versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PublicationResults:
        """List items in the Publication collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param abstract: Filter by abstract
        :type abstract: List[str]
        :param authors: Filter by authors
        :type authors: List[str]
        :param date_published: Filter by date_published
        :type date_published: List[str]
        :param date_revised: Filter by date_revised
        :type date_revised: List[str]
        :param issue: Filter by issue
        :type issue: List[str]
        :param page: Filter by page
        :type page: List[str]
        :param volume: Filter by volume
        :type volume: List[str]
        :param journal: Filter by journal
        :type journal: List[str]
        :param published_by: Filter by published_by
        :type published_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param publication_year: Filter by publication_year
        :type publication_year: List[int]
        :param samples: Filter by samples
        :type samples: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param file_sets: Filter by file_sets
        :type file_sets: List[str]
        :param workflows: Filter by workflows
        :type workflows: List[str]
        :param software: Filter by software
        :type software: List[str]
        :param software_versions: Filter by software_versions
        :type software_versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._publications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            abstract=abstract,
            authors=authors,
            date_published=date_published,
            date_revised=date_revised,
            issue=issue,
            page=page,
            volume=volume,
            journal=journal,
            published_by=published_by,
            id=id,
            summary=summary,
            publication_year=publication_year,
            samples=samples,
            donors=donors,
            file_sets=file_sets,
            workflows=workflows,
            software=software,
            software_versions=software_versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def publications_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        abstract: Annotated[Optional[List[StrictStr]], Field(description="Filter by abstract")] = None,
        authors: Annotated[Optional[List[StrictStr]], Field(description="Filter by authors")] = None,
        date_published: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_published")] = None,
        date_revised: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_revised")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter by issue")] = None,
        page: Annotated[Optional[List[StrictStr]], Field(description="Filter by page")] = None,
        volume: Annotated[Optional[List[StrictStr]], Field(description="Filter by volume")] = None,
        journal: Annotated[Optional[List[StrictStr]], Field(description="Filter by journal")] = None,
        published_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by published_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        publication_year: Annotated[Optional[List[StrictInt]], Field(description="Filter by publication_year")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets")] = None,
        workflows: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflows")] = None,
        software: Annotated[Optional[List[StrictStr]], Field(description="Filter by software")] = None,
        software_versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PublicationResults]:
        """List items in the Publication collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param abstract: Filter by abstract
        :type abstract: List[str]
        :param authors: Filter by authors
        :type authors: List[str]
        :param date_published: Filter by date_published
        :type date_published: List[str]
        :param date_revised: Filter by date_revised
        :type date_revised: List[str]
        :param issue: Filter by issue
        :type issue: List[str]
        :param page: Filter by page
        :type page: List[str]
        :param volume: Filter by volume
        :type volume: List[str]
        :param journal: Filter by journal
        :type journal: List[str]
        :param published_by: Filter by published_by
        :type published_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param publication_year: Filter by publication_year
        :type publication_year: List[int]
        :param samples: Filter by samples
        :type samples: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param file_sets: Filter by file_sets
        :type file_sets: List[str]
        :param workflows: Filter by workflows
        :type workflows: List[str]
        :param software: Filter by software
        :type software: List[str]
        :param software_versions: Filter by software_versions
        :type software_versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._publications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            abstract=abstract,
            authors=authors,
            date_published=date_published,
            date_revised=date_revised,
            issue=issue,
            page=page,
            volume=volume,
            journal=journal,
            published_by=published_by,
            id=id,
            summary=summary,
            publication_year=publication_year,
            samples=samples,
            donors=donors,
            file_sets=file_sets,
            workflows=workflows,
            software=software,
            software_versions=software_versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def publications_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        abstract: Annotated[Optional[List[StrictStr]], Field(description="Filter by abstract")] = None,
        authors: Annotated[Optional[List[StrictStr]], Field(description="Filter by authors")] = None,
        date_published: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_published")] = None,
        date_revised: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_revised")] = None,
        issue: Annotated[Optional[List[StrictStr]], Field(description="Filter by issue")] = None,
        page: Annotated[Optional[List[StrictStr]], Field(description="Filter by page")] = None,
        volume: Annotated[Optional[List[StrictStr]], Field(description="Filter by volume")] = None,
        journal: Annotated[Optional[List[StrictStr]], Field(description="Filter by journal")] = None,
        published_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by published_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        publication_year: Annotated[Optional[List[StrictInt]], Field(description="Filter by publication_year")] = None,
        samples: Annotated[Optional[List[StrictStr]], Field(description="Filter by samples")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        file_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets")] = None,
        workflows: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflows")] = None,
        software: Annotated[Optional[List[StrictStr]], Field(description="Filter by software")] = None,
        software_versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by software_versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Publication collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param abstract: Filter by abstract
        :type abstract: List[str]
        :param authors: Filter by authors
        :type authors: List[str]
        :param date_published: Filter by date_published
        :type date_published: List[str]
        :param date_revised: Filter by date_revised
        :type date_revised: List[str]
        :param issue: Filter by issue
        :type issue: List[str]
        :param page: Filter by page
        :type page: List[str]
        :param volume: Filter by volume
        :type volume: List[str]
        :param journal: Filter by journal
        :type journal: List[str]
        :param published_by: Filter by published_by
        :type published_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param publication_year: Filter by publication_year
        :type publication_year: List[int]
        :param samples: Filter by samples
        :type samples: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param file_sets: Filter by file_sets
        :type file_sets: List[str]
        :param workflows: Filter by workflows
        :type workflows: List[str]
        :param software: Filter by software
        :type software: List[str]
        :param software_versions: Filter by software_versions
        :type software_versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._publications_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            abstract=abstract,
            authors=authors,
            date_published=date_published,
            date_revised=date_revised,
            issue=issue,
            page=page,
            volume=volume,
            journal=journal,
            published_by=published_by,
            id=id,
            summary=summary,
            publication_year=publication_year,
            samples=samples,
            donors=donors,
            file_sets=file_sets,
            workflows=workflows,
            software=software,
            software_versions=software_versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PublicationResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _publications_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publication_identifiers,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        title,
        abstract,
        authors,
        date_published,
        date_revised,
        issue,
        page,
        volume,
        journal,
        published_by,
        id,
        summary,
        publication_year,
        samples,
        donors,
        file_sets,
        workflows,
        software,
        software_versions,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publication_identifiers': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'title': 'multi',
            'abstract': 'multi',
            'authors': 'multi',
            'date_published': 'multi',
            'date_revised': 'multi',
            'issue': 'multi',
            'page': 'multi',
            'volume': 'multi',
            'journal': 'multi',
            'published_by': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'publication_year': 'multi',
            'samples': 'multi',
            'donors': 'multi',
            'file_sets': 'multi',
            'workflows': 'multi',
            'software': 'multi',
            'software_versions': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if abstract is not None:
            
            _query_params.append(('abstract', abstract))
            
        if authors is not None:
            
            _query_params.append(('authors', authors))
            
        if date_published is not None:
            
            _query_params.append(('date_published', date_published))
            
        if date_revised is not None:
            
            _query_params.append(('date_revised', date_revised))
            
        if issue is not None:
            
            _query_params.append(('issue', issue))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if volume is not None:
            
            _query_params.append(('volume', volume))
            
        if journal is not None:
            
            _query_params.append(('journal', journal))
            
        if published_by is not None:
            
            _query_params.append(('published_by', published_by))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if publication_year is not None:
            
            _query_params.append(('publication_year', publication_year))
            
        if samples is not None:
            
            _query_params.append(('samples', samples))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if file_sets is not None:
            
            _query_params.append(('file_sets', file_sets))
            
        if workflows is not None:
            
            _query_params.append(('workflows', workflows))
            
        if software is not None:
            
            _query_params.append(('software', software))
            
        if software_versions is not None:
            
            _query_params.append(('software_versions', software_versions))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/publications/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reference_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        external: Annotated[Optional[List[StrictBool]], Field(description="Filter by external")] = None,
        external_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by external_id")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReferenceFileResults:
        """List items in the ReferenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param external: Filter by external
        :type external: List[bool]
        :param external_id: Filter by external_id
        :type external_id: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reference_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            source_url=source_url,
            sources=sources,
            external=external,
            external_id=external_id,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReferenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reference_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        external: Annotated[Optional[List[StrictBool]], Field(description="Filter by external")] = None,
        external_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by external_id")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReferenceFileResults]:
        """List items in the ReferenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param external: Filter by external
        :type external: List[bool]
        :param external_id: Filter by external_id
        :type external_id: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reference_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            source_url=source_url,
            sources=sources,
            external=external,
            external_id=external_id,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReferenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reference_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        sources: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources")] = None,
        external: Annotated[Optional[List[StrictBool]], Field(description="Filter by external")] = None,
        external_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by external_id")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the ReferenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param sources: Filter by sources
        :type sources: List[str]
        :param external: Filter by external
        :type external: List[bool]
        :param external_id: Filter by external_id
        :type external_id: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reference_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            source_url=source_url,
            sources=sources,
            external=external,
            external_id=external_id,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReferenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reference_files_serialize(
        self,
        query,
        limit,
        sort,
        controlled_access,
        anvil_url,
        assembly,
        release_timestamp,
        file_format_type,
        transcriptome_annotation,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        source_url,
        sources,
        external,
        external_id,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'controlled_access': 'multi',
            'anvil_url': 'multi',
            'assembly': 'multi',
            'release_timestamp': 'multi',
            'file_format_type': 'multi',
            'transcriptome_annotation': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'source_url': 'multi',
            'sources': 'multi',
            'external': 'multi',
            'external_id': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if anvil_url is not None:
            
            _query_params.append(('anvil_url', anvil_url))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if file_format_type is not None:
            
            _query_params.append(('file_format_type', file_format_type))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if source_url is not None:
            
            _query_params.append(('source_url', source_url))
            
        if sources is not None:
            
            _query_params.append(('sources', sources))
            
        if external is not None:
            
            _query_params.append(('external', external))
            
        if external_id is not None:
            
            _query_params.append(('external_id', external_id))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reference-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def report(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        include_fields: Annotated[Optional[List[StrictStr]], Field(description="Fields to include in the response. Can be repeated for multiple fields.")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Object with links, or object with some links embedded.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Generate a report based on search query. All results are returned.

        Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param include_fields: Fields to include in the response. Can be repeated for multiple fields.
        :type include_fields: List[str]
        :param frame: Object with links, or object with some links embedded.
        :type frame: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._report_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            include_fields=include_fields,
            frame=frame,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def report_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        include_fields: Annotated[Optional[List[StrictStr]], Field(description="Fields to include in the response. Can be repeated for multiple fields.")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Object with links, or object with some links embedded.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Generate a report based on search query. All results are returned.

        Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param include_fields: Fields to include in the response. Can be repeated for multiple fields.
        :type include_fields: List[str]
        :param frame: Object with links, or object with some links embedded.
        :type frame: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._report_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            include_fields=include_fields,
            frame=frame,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def report_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        include_fields: Annotated[Optional[List[StrictStr]], Field(description="Fields to include in the response. Can be repeated for multiple fields.")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Object with links, or object with some links embedded.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate a report based on search query. All results are returned.

        Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param include_fields: Fields to include in the response. Can be repeated for multiple fields.
        :type include_fields: List[str]
        :param frame: Object with links, or object with some links embedded.
        :type frame: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._report_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            include_fields=include_fields,
            frame=frame,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "object",
            '404': "object",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _report_serialize(
        self,
        query,
        type,
        limit,
        sort,
        field_filters,
        include_fields,
        frame,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'type': 'multi',
            'sort': 'multi',
            'field': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if field_filters is not None:
            for k, v in field_filters.items():
                _query_params.append((k, v))
            
        if include_fields is not None:
            
            _query_params.append(('field', include_fields))
            
        if frame is not None:
            
            _query_params.append(('frame', frame))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/tab-separated-values', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multireport.tsv',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def rodent_donors(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        strain_background: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain_background")] = None,
        strain: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain")] = None,
        genotype: Annotated[Optional[List[StrictStr]], Field(description="Filter by genotype")] = None,
        individual_rodent: Annotated[Optional[List[StrictBool]], Field(description="Filter by individual_rodent")] = None,
        rodent_identifier: Annotated[Optional[List[StrictStr]], Field(description="Filter by rodent_identifier")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RodentDonorResults:
        """List items in the RodentDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param strain_background: Filter by strain_background
        :type strain_background: List[str]
        :param strain: Filter by strain
        :type strain: List[str]
        :param genotype: Filter by genotype
        :type genotype: List[str]
        :param individual_rodent: Filter by individual_rodent
        :type individual_rodent: List[bool]
        :param rodent_identifier: Filter by rodent_identifier
        :type rodent_identifier: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rodent_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            strain_background=strain_background,
            strain=strain,
            genotype=genotype,
            individual_rodent=individual_rodent,
            rodent_identifier=rodent_identifier,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RodentDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def rodent_donors_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        strain_background: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain_background")] = None,
        strain: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain")] = None,
        genotype: Annotated[Optional[List[StrictStr]], Field(description="Filter by genotype")] = None,
        individual_rodent: Annotated[Optional[List[StrictBool]], Field(description="Filter by individual_rodent")] = None,
        rodent_identifier: Annotated[Optional[List[StrictStr]], Field(description="Filter by rodent_identifier")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RodentDonorResults]:
        """List items in the RodentDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param strain_background: Filter by strain_background
        :type strain_background: List[str]
        :param strain: Filter by strain
        :type strain: List[str]
        :param genotype: Filter by genotype
        :type genotype: List[str]
        :param individual_rodent: Filter by individual_rodent
        :type individual_rodent: List[bool]
        :param rodent_identifier: Filter by rodent_identifier
        :type rodent_identifier: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rodent_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            strain_background=strain_background,
            strain=strain,
            genotype=genotype,
            individual_rodent=individual_rodent,
            rodent_identifier=rodent_identifier,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RodentDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def rodent_donors_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        strain_background: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain_background")] = None,
        strain: Annotated[Optional[List[StrictStr]], Field(description="Filter by strain")] = None,
        genotype: Annotated[Optional[List[StrictStr]], Field(description="Filter by genotype")] = None,
        individual_rodent: Annotated[Optional[List[StrictBool]], Field(description="Filter by individual_rodent")] = None,
        rodent_identifier: Annotated[Optional[List[StrictStr]], Field(description="Filter by rodent_identifier")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        phenotypic_features_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.@id")] = None,
        phenotypic_features_feature_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.feature.@id")] = None,
        phenotypic_features_feature_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_id")] = None,
        phenotypic_features_feature_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by phenotypic_features.feature.term_name")] = None,
        phenotypic_features_observation_date: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.observation_date")] = None,
        phenotypic_features_quantity_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by phenotypic_features.quantity_units")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the RodentDonor collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param strain_background: Filter by strain_background
        :type strain_background: List[str]
        :param strain: Filter by strain
        :type strain: List[str]
        :param genotype: Filter by genotype
        :type genotype: List[str]
        :param individual_rodent: Filter by individual_rodent
        :type individual_rodent: List[bool]
        :param rodent_identifier: Filter by rodent_identifier
        :type rodent_identifier: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param phenotypic_features_id: Filter by phenotypic_features.@id
        :type phenotypic_features_id: List[str]
        :param phenotypic_features_feature_id: Filter by phenotypic_features.feature.@id
        :type phenotypic_features_feature_id: List[str]
        :param phenotypic_features_feature_term_id: Filter by phenotypic_features.feature.term_id
        :type phenotypic_features_feature_term_id: List[str]
        :param phenotypic_features_feature_term_name: Filter by phenotypic_features.feature.term_name
        :type phenotypic_features_feature_term_name: List[str]
        :param phenotypic_features_observation_date: Filter by phenotypic_features.observation_date
        :type phenotypic_features_observation_date: List[str]
        :param phenotypic_features_quantity_units: Filter by phenotypic_features.quantity_units
        :type phenotypic_features_quantity_units: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._rodent_donors_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            dbxrefs=dbxrefs,
            sex=sex,
            virtual=virtual,
            strain_background=strain_background,
            strain=strain,
            genotype=genotype,
            individual_rodent=individual_rodent,
            rodent_identifier=rodent_identifier,
            id=id,
            summary=summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            phenotypic_features_id=phenotypic_features_id,
            phenotypic_features_feature_id=phenotypic_features_feature_id,
            phenotypic_features_feature_term_id=phenotypic_features_feature_term_id,
            phenotypic_features_feature_term_name=phenotypic_features_feature_term_name,
            phenotypic_features_observation_date=phenotypic_features_observation_date,
            phenotypic_features_quantity_units=phenotypic_features_quantity_units,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RodentDonorResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _rodent_donors_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        taxa,
        publications,
        publication_identifiers,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        dbxrefs,
        sex,
        virtual,
        strain_background,
        strain,
        genotype,
        individual_rodent,
        rodent_identifier,
        id,
        summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        phenotypic_features_id,
        phenotypic_features_feature_id,
        phenotypic_features_feature_term_id,
        phenotypic_features_feature_term_name,
        phenotypic_features_observation_date,
        phenotypic_features_quantity_units,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'taxa': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'dbxrefs': 'multi',
            'sex': 'multi',
            'virtual': 'multi',
            'strain_background': 'multi',
            'strain': 'multi',
            'genotype': 'multi',
            'individual_rodent': 'multi',
            'rodent_identifier': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'phenotypic_features.@id': 'multi',
            'phenotypic_features.feature.@id': 'multi',
            'phenotypic_features.feature.term_id': 'multi',
            'phenotypic_features.feature.term_name': 'multi',
            'phenotypic_features.observation_date': 'multi',
            'phenotypic_features.quantity_units': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if strain_background is not None:
            
            _query_params.append(('strain_background', strain_background))
            
        if strain is not None:
            
            _query_params.append(('strain', strain))
            
        if genotype is not None:
            
            _query_params.append(('genotype', genotype))
            
        if individual_rodent is not None:
            
            _query_params.append(('individual_rodent', individual_rodent))
            
        if rodent_identifier is not None:
            
            _query_params.append(('rodent_identifier', rodent_identifier))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if phenotypic_features_id is not None:
            
            _query_params.append(('phenotypic_features.@id', phenotypic_features_id))
            
        if phenotypic_features_feature_id is not None:
            
            _query_params.append(('phenotypic_features.feature.@id', phenotypic_features_feature_id))
            
        if phenotypic_features_feature_term_id is not None:
            
            _query_params.append(('phenotypic_features.feature.term_id', phenotypic_features_feature_term_id))
            
        if phenotypic_features_feature_term_name is not None:
            
            _query_params.append(('phenotypic_features.feature.term_name', phenotypic_features_feature_term_name))
            
        if phenotypic_features_observation_date is not None:
            
            _query_params.append(('phenotypic_features.observation_date', phenotypic_features_observation_date))
            
        if phenotypic_features_quantity_units is not None:
            
            _query_params.append(('phenotypic_features.quantity_units', phenotypic_features_quantity_units))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/rodent-donors/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sample_terms(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        organ_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by organ_slims")] = None,
        cell_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_slims")] = None,
        developmental_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by developmental_slims")] = None,
        system_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by system_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SampleTermResults:
        """List items in the SampleTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param organ_slims: Filter by organ_slims
        :type organ_slims: List[str]
        :param cell_slims: Filter by cell_slims
        :type cell_slims: List[str]
        :param developmental_slims: Filter by developmental_slims
        :type developmental_slims: List[str]
        :param system_slims: Filter by system_slims
        :type system_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            dbxrefs=dbxrefs,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            organ_slims=organ_slims,
            cell_slims=cell_slims,
            developmental_slims=developmental_slims,
            system_slims=system_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SampleTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sample_terms_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        organ_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by organ_slims")] = None,
        cell_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_slims")] = None,
        developmental_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by developmental_slims")] = None,
        system_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by system_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SampleTermResults]:
        """List items in the SampleTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param organ_slims: Filter by organ_slims
        :type organ_slims: List[str]
        :param cell_slims: Filter by cell_slims
        :type cell_slims: List[str]
        :param developmental_slims: Filter by developmental_slims
        :type developmental_slims: List[str]
        :param system_slims: Filter by system_slims
        :type system_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            dbxrefs=dbxrefs,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            organ_slims=organ_slims,
            cell_slims=cell_slims,
            developmental_slims=developmental_slims,
            system_slims=system_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SampleTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sample_terms_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_id")] = None,
        term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by term_name")] = None,
        deprecated_ntr_terms: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by deprecated_ntr_terms")] = None,
        is_a: Annotated[Optional[List[StrictStr]], Field(description="Filter by is_a")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        synonyms: Annotated[Optional[List[StrictStr]], Field(description="Filter by synonyms")] = None,
        ancestors: Annotated[Optional[List[StrictStr]], Field(description="Filter by ancestors")] = None,
        ontology: Annotated[Optional[List[StrictStr]], Field(description="Filter by ontology")] = None,
        organ_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by organ_slims")] = None,
        cell_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by cell_slims")] = None,
        developmental_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by developmental_slims")] = None,
        system_slims: Annotated[Optional[List[StrictStr]], Field(description="Filter by system_slims")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the SampleTerm collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param term_id: Filter by term_id
        :type term_id: List[str]
        :param term_name: Filter by term_name
        :type term_name: List[str]
        :param deprecated_ntr_terms: Filter by deprecated_ntr_terms
        :type deprecated_ntr_terms: List[str]
        :param is_a: Filter by is_a
        :type is_a: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param synonyms: Filter by synonyms
        :type synonyms: List[str]
        :param ancestors: Filter by ancestors
        :type ancestors: List[str]
        :param ontology: Filter by ontology
        :type ontology: List[str]
        :param organ_slims: Filter by organ_slims
        :type organ_slims: List[str]
        :param cell_slims: Filter by cell_slims
        :type cell_slims: List[str]
        :param developmental_slims: Filter by developmental_slims
        :type developmental_slims: List[str]
        :param system_slims: Filter by system_slims
        :type system_slims: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sample_terms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            term_id=term_id,
            term_name=term_name,
            deprecated_ntr_terms=deprecated_ntr_terms,
            is_a=is_a,
            dbxrefs=dbxrefs,
            id=id,
            summary=summary,
            name=name,
            synonyms=synonyms,
            ancestors=ancestors,
            ontology=ontology,
            organ_slims=organ_slims,
            cell_slims=cell_slims,
            developmental_slims=developmental_slims,
            system_slims=system_slims,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SampleTermResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sample_terms_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        term_id,
        term_name,
        deprecated_ntr_terms,
        is_a,
        dbxrefs,
        id,
        summary,
        name,
        synonyms,
        ancestors,
        ontology,
        organ_slims,
        cell_slims,
        developmental_slims,
        system_slims,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'term_id': 'multi',
            'term_name': 'multi',
            'deprecated_ntr_terms': 'multi',
            'is_a': 'multi',
            'dbxrefs': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'synonyms': 'multi',
            'ancestors': 'multi',
            'ontology': 'multi',
            'organ_slims': 'multi',
            'cell_slims': 'multi',
            'developmental_slims': 'multi',
            'system_slims': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if term_id is not None:
            
            _query_params.append(('term_id', term_id))
            
        if term_name is not None:
            
            _query_params.append(('term_name', term_name))
            
        if deprecated_ntr_terms is not None:
            
            _query_params.append(('deprecated_ntr_terms', deprecated_ntr_terms))
            
        if is_a is not None:
            
            _query_params.append(('is_a', is_a))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if ancestors is not None:
            
            _query_params.append(('ancestors', ancestors))
            
        if ontology is not None:
            
            _query_params.append(('ontology', ontology))
            
        if organ_slims is not None:
            
            _query_params.append(('organ_slims', organ_slims))
            
        if cell_slims is not None:
            
            _query_params.append(('cell_slims', cell_slims))
            
        if developmental_slims is not None:
            
            _query_params.append(('developmental_slims', developmental_slims))
            
        if system_slims is not None:
            
            _query_params.append(('system_slims', system_slims))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sample-terms/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def schema_for_item_type(
        self,
        item_type: Annotated[ItemType, Field(description="The name of the item type")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Retrieve JSON schema for item type

        Returns JSON schemas of all the item types defined in IGVF

        :param item_type: The name of the item type (required)
        :type item_type: ItemType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schema_for_item_type_serialize(
            item_type=item_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def schema_for_item_type_with_http_info(
        self,
        item_type: Annotated[ItemType, Field(description="The name of the item type")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Retrieve JSON schema for item type

        Returns JSON schemas of all the item types defined in IGVF

        :param item_type: The name of the item type (required)
        :type item_type: ItemType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schema_for_item_type_serialize(
            item_type=item_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def schema_for_item_type_without_preload_content(
        self,
        item_type: Annotated[ItemType, Field(description="The name of the item type")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve JSON schema for item type

        Returns JSON schemas of all the item types defined in IGVF

        :param item_type: The name of the item type (required)
        :type item_type: ItemType
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schema_for_item_type_serialize(
            item_type=item_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _schema_for_item_type_serialize(
        self,
        item_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if item_type is not None:
            _path_params['item_type'] = item_type.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/profiles/{item_type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def schemas(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Retrieve JSON schemas for all item types

        Returns JSON schemas of all the item types defined in IGVF

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schemas_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def schemas_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Retrieve JSON schemas for all item types

        Returns JSON schemas of all the item types defined in IGVF

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schemas_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def schemas_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve JSON schemas for all item types

        Returns JSON schemas of all the item types defined in IGVF

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._schemas_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _schemas_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResults:
        """Search for items in the IGVF Project.

        Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '404': "NoResultsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResults]:
        """Search for items in the IGVF Project.

        Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '404': "NoResultsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        type: Annotated[Optional[List[StrictStr]], Field(description="Filter by item type.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.")] = None,
        field_filters: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for items in the IGVF Project.

        Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.

        :param query: Query string for searching.
        :type query: str
        :param type: Filter by item type.
        :type type: List[str]
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
        :type sort: List[str]
        :param field_filters: Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
        :type field_filters: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            query=query,
            type=type,
            limit=limit,
            sort=sort,
            field_filters=field_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResults",
            '404': "NoResultsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_serialize(
        self,
        query,
        type,
        limit,
        sort,
        field_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'type': 'multi',
            'sort': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if field_filters is not None:
            for k, v in field_filters.items():
                _query_params.append((k, v))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sequence_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        flowcell_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by flowcell_id")] = None,
        lane: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by lane")] = None,
        read_count: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by read_count")] = None,
        minimum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by minimum_read_length")] = None,
        maximum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by maximum_read_length")] = None,
        mean_read_length: Annotated[Optional[List[Union[Annotated[float, Field(le=300000000, strict=True, ge=0)], Annotated[int, Field(le=300000000, strict=True, ge=0)]]]], Field(description="Filter by mean_read_length")] = None,
        sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_platform")] = None,
        sequencing_kit: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kit")] = None,
        sequencing_run: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by sequencing_run")] = None,
        illumina_read_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by illumina_read_type")] = None,
        index: Annotated[Optional[List[StrictStr]], Field(description="Filter by index")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        seqspecs: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspecs")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SequenceFileResults:
        """List items in the SequenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param flowcell_id: Filter by flowcell_id
        :type flowcell_id: List[str]
        :param lane: Filter by lane
        :type lane: List[int]
        :param read_count: Filter by read_count
        :type read_count: List[int]
        :param minimum_read_length: Filter by minimum_read_length
        :type minimum_read_length: List[int]
        :param maximum_read_length: Filter by maximum_read_length
        :type maximum_read_length: List[int]
        :param mean_read_length: Filter by mean_read_length
        :type mean_read_length: List[float]
        :param sequencing_platform: Filter by sequencing_platform
        :type sequencing_platform: List[str]
        :param sequencing_kit: Filter by sequencing_kit
        :type sequencing_kit: List[str]
        :param sequencing_run: Filter by sequencing_run
        :type sequencing_run: List[int]
        :param illumina_read_type: Filter by illumina_read_type
        :type illumina_read_type: List[str]
        :param index: Filter by index
        :type index: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param seqspecs: Filter by seqspecs
        :type seqspecs: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sequence_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            flowcell_id=flowcell_id,
            lane=lane,
            read_count=read_count,
            minimum_read_length=minimum_read_length,
            maximum_read_length=maximum_read_length,
            mean_read_length=mean_read_length,
            sequencing_platform=sequencing_platform,
            sequencing_kit=sequencing_kit,
            sequencing_run=sequencing_run,
            illumina_read_type=illumina_read_type,
            index=index,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            seqspecs=seqspecs,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SequenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sequence_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        flowcell_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by flowcell_id")] = None,
        lane: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by lane")] = None,
        read_count: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by read_count")] = None,
        minimum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by minimum_read_length")] = None,
        maximum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by maximum_read_length")] = None,
        mean_read_length: Annotated[Optional[List[Union[Annotated[float, Field(le=300000000, strict=True, ge=0)], Annotated[int, Field(le=300000000, strict=True, ge=0)]]]], Field(description="Filter by mean_read_length")] = None,
        sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_platform")] = None,
        sequencing_kit: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kit")] = None,
        sequencing_run: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by sequencing_run")] = None,
        illumina_read_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by illumina_read_type")] = None,
        index: Annotated[Optional[List[StrictStr]], Field(description="Filter by index")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        seqspecs: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspecs")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SequenceFileResults]:
        """List items in the SequenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param flowcell_id: Filter by flowcell_id
        :type flowcell_id: List[str]
        :param lane: Filter by lane
        :type lane: List[int]
        :param read_count: Filter by read_count
        :type read_count: List[int]
        :param minimum_read_length: Filter by minimum_read_length
        :type minimum_read_length: List[int]
        :param maximum_read_length: Filter by maximum_read_length
        :type maximum_read_length: List[int]
        :param mean_read_length: Filter by mean_read_length
        :type mean_read_length: List[float]
        :param sequencing_platform: Filter by sequencing_platform
        :type sequencing_platform: List[str]
        :param sequencing_kit: Filter by sequencing_kit
        :type sequencing_kit: List[str]
        :param sequencing_run: Filter by sequencing_run
        :type sequencing_run: List[int]
        :param illumina_read_type: Filter by illumina_read_type
        :type illumina_read_type: List[str]
        :param index: Filter by index
        :type index: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param seqspecs: Filter by seqspecs
        :type seqspecs: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sequence_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            flowcell_id=flowcell_id,
            lane=lane,
            read_count=read_count,
            minimum_read_length=minimum_read_length,
            maximum_read_length=maximum_read_length,
            mean_read_length=mean_read_length,
            sequencing_platform=sequencing_platform,
            sequencing_kit=sequencing_kit,
            sequencing_run=sequencing_run,
            illumina_read_type=illumina_read_type,
            index=index,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            seqspecs=seqspecs,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SequenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sequence_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        flowcell_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by flowcell_id")] = None,
        lane: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by lane")] = None,
        read_count: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by read_count")] = None,
        minimum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by minimum_read_length")] = None,
        maximum_read_length: Annotated[Optional[List[Annotated[int, Field(le=300000000, strict=True, ge=0)]]], Field(description="Filter by maximum_read_length")] = None,
        mean_read_length: Annotated[Optional[List[Union[Annotated[float, Field(le=300000000, strict=True, ge=0)], Annotated[int, Field(le=300000000, strict=True, ge=0)]]]], Field(description="Filter by mean_read_length")] = None,
        sequencing_platform: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_platform")] = None,
        sequencing_kit: Annotated[Optional[List[StrictStr]], Field(description="Filter by sequencing_kit")] = None,
        sequencing_run: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by sequencing_run")] = None,
        illumina_read_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by illumina_read_type")] = None,
        index: Annotated[Optional[List[StrictStr]], Field(description="Filter by index")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        seqspecs: Annotated[Optional[List[StrictStr]], Field(description="Filter by seqspecs")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the SequenceFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param flowcell_id: Filter by flowcell_id
        :type flowcell_id: List[str]
        :param lane: Filter by lane
        :type lane: List[int]
        :param read_count: Filter by read_count
        :type read_count: List[int]
        :param minimum_read_length: Filter by minimum_read_length
        :type minimum_read_length: List[int]
        :param maximum_read_length: Filter by maximum_read_length
        :type maximum_read_length: List[int]
        :param mean_read_length: Filter by mean_read_length
        :type mean_read_length: List[float]
        :param sequencing_platform: Filter by sequencing_platform
        :type sequencing_platform: List[str]
        :param sequencing_kit: Filter by sequencing_kit
        :type sequencing_kit: List[str]
        :param sequencing_run: Filter by sequencing_run
        :type sequencing_run: List[int]
        :param illumina_read_type: Filter by illumina_read_type
        :type illumina_read_type: List[str]
        :param index: Filter by index
        :type index: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param seqspecs: Filter by seqspecs
        :type seqspecs: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sequence_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            release_timestamp=release_timestamp,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            flowcell_id=flowcell_id,
            lane=lane,
            read_count=read_count,
            minimum_read_length=minimum_read_length,
            maximum_read_length=maximum_read_length,
            mean_read_length=mean_read_length,
            sequencing_platform=sequencing_platform,
            sequencing_kit=sequencing_kit,
            sequencing_run=sequencing_run,
            illumina_read_type=illumina_read_type,
            index=index,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            seqspecs=seqspecs,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SequenceFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sequence_files_serialize(
        self,
        query,
        limit,
        sort,
        controlled_access,
        anvil_url,
        release_timestamp,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        flowcell_id,
        lane,
        read_count,
        minimum_read_length,
        maximum_read_length,
        mean_read_length,
        sequencing_platform,
        sequencing_kit,
        sequencing_run,
        illumina_read_type,
        index,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        seqspecs,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'controlled_access': 'multi',
            'anvil_url': 'multi',
            'release_timestamp': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'flowcell_id': 'multi',
            'lane': 'multi',
            'read_count': 'multi',
            'minimum_read_length': 'multi',
            'maximum_read_length': 'multi',
            'mean_read_length': 'multi',
            'sequencing_platform': 'multi',
            'sequencing_kit': 'multi',
            'sequencing_run': 'multi',
            'illumina_read_type': 'multi',
            'index': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'seqspecs': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if anvil_url is not None:
            
            _query_params.append(('anvil_url', anvil_url))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if flowcell_id is not None:
            
            _query_params.append(('flowcell_id', flowcell_id))
            
        if lane is not None:
            
            _query_params.append(('lane', lane))
            
        if read_count is not None:
            
            _query_params.append(('read_count', read_count))
            
        if minimum_read_length is not None:
            
            _query_params.append(('minimum_read_length', minimum_read_length))
            
        if maximum_read_length is not None:
            
            _query_params.append(('maximum_read_length', maximum_read_length))
            
        if mean_read_length is not None:
            
            _query_params.append(('mean_read_length', mean_read_length))
            
        if sequencing_platform is not None:
            
            _query_params.append(('sequencing_platform', sequencing_platform))
            
        if sequencing_kit is not None:
            
            _query_params.append(('sequencing_kit', sequencing_kit))
            
        if sequencing_run is not None:
            
            _query_params.append(('sequencing_run', sequencing_run))
            
        if illumina_read_type is not None:
            
            _query_params.append(('illumina_read_type', illumina_read_type))
            
        if index is not None:
            
            _query_params.append(('index', index))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if seqspecs is not None:
            
            _query_params.append(('seqspecs', seqspecs))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sequence-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def signal_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        strand_specificity: Annotated[Optional[List[StrictStr]], Field(description="Filter by strand_specificity")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        normalized: Annotated[Optional[List[StrictBool]], Field(description="Filter by normalized")] = None,
        start_view_position: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by start_view_position")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignalFileResults:
        """List items in the SignalFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param strand_specificity: Filter by strand_specificity
        :type strand_specificity: List[str]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param normalized: Filter by normalized
        :type normalized: List[bool]
        :param start_view_position: Filter by start_view_position
        :type start_view_position: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signal_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            strand_specificity=strand_specificity,
            filtered=filtered,
            normalized=normalized,
            start_view_position=start_view_position,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignalFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def signal_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        strand_specificity: Annotated[Optional[List[StrictStr]], Field(description="Filter by strand_specificity")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        normalized: Annotated[Optional[List[StrictBool]], Field(description="Filter by normalized")] = None,
        start_view_position: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by start_view_position")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignalFileResults]:
        """List items in the SignalFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param strand_specificity: Filter by strand_specificity
        :type strand_specificity: List[str]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param normalized: Filter by normalized
        :type normalized: List[bool]
        :param start_view_position: Filter by start_view_position
        :type start_view_position: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signal_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            strand_specificity=strand_specificity,
            filtered=filtered,
            normalized=normalized,
            start_view_position=start_view_position,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignalFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def signal_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        reference_files: Annotated[Optional[List[StrictStr]], Field(description="Filter by reference_files")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        strand_specificity: Annotated[Optional[List[StrictStr]], Field(description="Filter by strand_specificity")] = None,
        filtered: Annotated[Optional[List[StrictBool]], Field(description="Filter by filtered")] = None,
        normalized: Annotated[Optional[List[StrictBool]], Field(description="Filter by normalized")] = None,
        start_view_position: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by start_view_position")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        content_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_summary")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the SignalFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param reference_files: Filter by reference_files
        :type reference_files: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param strand_specificity: Filter by strand_specificity
        :type strand_specificity: List[str]
        :param filtered: Filter by filtered
        :type filtered: List[bool]
        :param normalized: Filter by normalized
        :type normalized: List[bool]
        :param start_view_position: Filter by start_view_position
        :type start_view_position: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param content_summary: Filter by content_summary
        :type content_summary: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._signal_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            transcriptome_annotation=transcriptome_annotation,
            assembly=assembly,
            release_timestamp=release_timestamp,
            reference_files=reference_files,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            strand_specificity=strand_specificity,
            filtered=filtered,
            normalized=normalized,
            start_view_position=start_view_position,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            content_summary=content_summary,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SignalFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _signal_files_serialize(
        self,
        query,
        limit,
        sort,
        transcriptome_annotation,
        assembly,
        release_timestamp,
        reference_files,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        strand_specificity,
        filtered,
        normalized,
        start_view_position,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        content_summary,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'transcriptome_annotation': 'multi',
            'assembly': 'multi',
            'release_timestamp': 'multi',
            'reference_files': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            'strand_specificity': 'multi',
            'filtered': 'multi',
            'normalized': 'multi',
            'start_view_position': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'content_summary': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if reference_files is not None:
            
            _query_params.append(('reference_files', reference_files))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if strand_specificity is not None:
            
            _query_params.append(('strand_specificity', strand_specificity))
            
        if filtered is not None:
            
            _query_params.append(('filtered', filtered))
            
        if normalized is not None:
            
            _query_params.append(('normalized', normalized))
            
        if start_view_position is not None:
            
            _query_params.append(('start_view_position', start_view_position))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if content_summary is not None:
            
            _query_params.append(('content_summary', content_summary))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/signal-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def software(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        used_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by used_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SoftwareResults:
        """List items in the Software collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param used_by: Filter by used_by
        :type used_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param versions: Filter by versions
        :type versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            title=title,
            source_url=source_url,
            used_by=used_by,
            id=id,
            summary=summary,
            versions=versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def software_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        used_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by used_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SoftwareResults]:
        """List items in the Software collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param used_by: Filter by used_by
        :type used_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param versions: Filter by versions
        :type versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            title=title,
            source_url=source_url,
            used_by=used_by,
            id=id,
            summary=summary,
            versions=versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def software_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        source_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by source_url")] = None,
        used_by: Annotated[Optional[List[StrictStr]], Field(description="Filter by used_by")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        versions: Annotated[Optional[List[StrictStr]], Field(description="Filter by versions")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Software collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param used_by: Filter by used_by
        :type used_by: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param versions: Filter by versions
        :type versions: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            title=title,
            source_url=source_url,
            used_by=used_by,
            id=id,
            summary=summary,
            versions=versions,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _software_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        name,
        title,
        source_url,
        used_by,
        id,
        summary,
        versions,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'name': 'multi',
            'title': 'multi',
            'source_url': 'multi',
            'used_by': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'versions': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if source_url is not None:
            
            _query_params.append(('source_url', source_url))
            
        if used_by is not None:
            
            _query_params.append(('used_by', used_by))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if versions is not None:
            
            _query_params.append(('versions', versions))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/software/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def software_versions(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version")] = None,
        download_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_id")] = None,
        downloaded_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by downloaded_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software.@id")] = None,
        software_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by software.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SoftwareVersionResults:
        """List items in the SoftwareVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param version: Filter by version
        :type version: List[str]
        :param download_id: Filter by download_id
        :type download_id: List[str]
        :param downloaded_url: Filter by downloaded_url
        :type downloaded_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_id: Filter by software.@id
        :type software_id: List[str]
        :param software_title: Filter by software.title
        :type software_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            version=version,
            download_id=download_id,
            downloaded_url=downloaded_url,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_id=software_id,
            software_title=software_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def software_versions_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version")] = None,
        download_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_id")] = None,
        downloaded_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by downloaded_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software.@id")] = None,
        software_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by software.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SoftwareVersionResults]:
        """List items in the SoftwareVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param version: Filter by version
        :type version: List[str]
        :param download_id: Filter by download_id
        :type download_id: List[str]
        :param downloaded_url: Filter by downloaded_url
        :type downloaded_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_id: Filter by software.@id
        :type software_id: List[str]
        :param software_title: Filter by software.title
        :type software_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            version=version,
            download_id=download_id,
            downloaded_url=downloaded_url,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_id=software_id,
            software_title=software_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def software_versions_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        version: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by version")] = None,
        download_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by download_id")] = None,
        downloaded_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by downloaded_url")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        name: Annotated[Optional[List[StrictStr]], Field(description="Filter by name")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        software_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by software.@id")] = None,
        software_title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by software.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the SoftwareVersion collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param version: Filter by version
        :type version: List[str]
        :param download_id: Filter by download_id
        :type download_id: List[str]
        :param downloaded_url: Filter by downloaded_url
        :type downloaded_url: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param software_id: Filter by software.@id
        :type software_id: List[str]
        :param software_title: Filter by software.title
        :type software_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._software_versions_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            version=version,
            download_id=download_id,
            downloaded_url=downloaded_url,
            id=id,
            summary=summary,
            name=name,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            software_id=software_id,
            software_title=software_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SoftwareVersionResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _software_versions_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        version,
        download_id,
        downloaded_url,
        id,
        summary,
        name,
        award_id,
        award_component,
        lab_id,
        lab_title,
        software_id,
        software_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'version': 'multi',
            'download_id': 'multi',
            'downloaded_url': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'name': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'software.@id': 'multi',
            'software.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        if download_id is not None:
            
            _query_params.append(('download_id', download_id))
            
        if downloaded_url is not None:
            
            _query_params.append(('downloaded_url', downloaded_url))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if software_id is not None:
            
            _query_params.append(('software.@id', software_id))
            
        if software_title is not None:
            
            _query_params.append(('software.title', software_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/software-versions/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sources(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceResults:
        """List items in the Source collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sources_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sources_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceResults]:
        """List items in the Source collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sources_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sources_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        title: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by title")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Source collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sources_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            status=status,
            url=url,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            title=title,
            name=name,
            id=id,
            summary=summary,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sources_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        status,
        url,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        title,
        name,
        id,
        summary,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'status': 'multi',
            'url': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'title': 'multi',
            'name': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sources/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tabular_files(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TabularFileResults:
        """List items in the TabularFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tabular_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TabularFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tabular_files_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TabularFileResults]:
        """List items in the TabularFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tabular_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TabularFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tabular_files_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        controlled_access: Annotated[Optional[List[StrictBool]], Field(description="Filter by controlled_access")] = None,
        anvil_url: Annotated[Optional[List[StrictStr]], Field(description="Filter by anvil_url")] = None,
        assembly: Annotated[Optional[List[StrictStr]], Field(description="Filter by assembly")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        file_format_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_type")] = None,
        transcriptome_annotation: Annotated[Optional[List[StrictStr]], Field(description="Filter by transcriptome_annotation")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        analysis_step_version: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_step_version")] = None,
        content_md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by content_md5sum")] = None,
        content_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by content_type")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        derived_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by derived_from")] = None,
        file_format: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format")] = None,
        file_format_specifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_format_specifications")] = None,
        file_set: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_set")] = None,
        file_size: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=0)]]], Field(description="Filter by file_size")] = None,
        md5sum: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=32)]]], Field(description="Filter by md5sum")] = None,
        submitted_file_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_file_name")] = None,
        upload_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by upload_status")] = None,
        validation_error_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by validation_error_detail")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        integrated_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by integrated_in")] = None,
        input_file_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by input_file_for")] = None,
        gene_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by gene_list_for")] = None,
        loci_list_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by loci_list_for")] = None,
        href: Annotated[Optional[List[StrictStr]], Field(description="Filter by href")] = None,
        s3_uri: Annotated[Optional[List[StrictStr]], Field(description="Filter by s3_uri")] = None,
        upload_credentials: Annotated[Optional[List[Dict[str, Any]]], Field(description="Filter by upload_credentials")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the TabularFile collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param controlled_access: Filter by controlled_access
        :type controlled_access: List[bool]
        :param anvil_url: Filter by anvil_url
        :type anvil_url: List[str]
        :param assembly: Filter by assembly
        :type assembly: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param file_format_type: Filter by file_format_type
        :type file_format_type: List[str]
        :param transcriptome_annotation: Filter by transcriptome_annotation
        :type transcriptome_annotation: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param analysis_step_version: Filter by analysis_step_version
        :type analysis_step_version: List[str]
        :param content_md5sum: Filter by content_md5sum
        :type content_md5sum: List[str]
        :param content_type: Filter by content_type
        :type content_type: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param derived_from: Filter by derived_from
        :type derived_from: List[str]
        :param file_format: Filter by file_format
        :type file_format: List[str]
        :param file_format_specifications: Filter by file_format_specifications
        :type file_format_specifications: List[str]
        :param file_set: Filter by file_set
        :type file_set: List[str]
        :param file_size: Filter by file_size
        :type file_size: List[int]
        :param md5sum: Filter by md5sum
        :type md5sum: List[str]
        :param submitted_file_name: Filter by submitted_file_name
        :type submitted_file_name: List[str]
        :param upload_status: Filter by upload_status
        :type upload_status: List[str]
        :param validation_error_detail: Filter by validation_error_detail
        :type validation_error_detail: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param integrated_in: Filter by integrated_in
        :type integrated_in: List[str]
        :param input_file_for: Filter by input_file_for
        :type input_file_for: List[str]
        :param gene_list_for: Filter by gene_list_for
        :type gene_list_for: List[str]
        :param loci_list_for: Filter by loci_list_for
        :type loci_list_for: List[str]
        :param href: Filter by href
        :type href: List[str]
        :param s3_uri: Filter by s3_uri
        :type s3_uri: List[str]
        :param upload_credentials: Filter by upload_credentials
        :type upload_credentials: List[object]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tabular_files_serialize(
            query=query,
            limit=limit,
            sort=sort,
            controlled_access=controlled_access,
            anvil_url=anvil_url,
            assembly=assembly,
            release_timestamp=release_timestamp,
            file_format_type=file_format_type,
            transcriptome_annotation=transcriptome_annotation,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            analysis_step_version=analysis_step_version,
            content_md5sum=content_md5sum,
            content_type=content_type,
            dbxrefs=dbxrefs,
            derived_from=derived_from,
            file_format=file_format,
            file_format_specifications=file_format_specifications,
            file_set=file_set,
            file_size=file_size,
            md5sum=md5sum,
            submitted_file_name=submitted_file_name,
            upload_status=upload_status,
            validation_error_detail=validation_error_detail,
            id=id,
            summary=summary,
            integrated_in=integrated_in,
            input_file_for=input_file_for,
            gene_list_for=gene_list_for,
            loci_list_for=loci_list_for,
            href=href,
            s3_uri=s3_uri,
            upload_credentials=upload_credentials,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TabularFileResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tabular_files_serialize(
        self,
        query,
        limit,
        sort,
        controlled_access,
        anvil_url,
        assembly,
        release_timestamp,
        file_format_type,
        transcriptome_annotation,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        analysis_step_version,
        content_md5sum,
        content_type,
        dbxrefs,
        derived_from,
        file_format,
        file_format_specifications,
        file_set,
        file_size,
        md5sum,
        submitted_file_name,
        upload_status,
        validation_error_detail,
        id,
        summary,
        integrated_in,
        input_file_for,
        gene_list_for,
        loci_list_for,
        href,
        s3_uri,
        upload_credentials,
        award_id,
        award_component,
        lab_id,
        lab_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'controlled_access': 'multi',
            'anvil_url': 'multi',
            'assembly': 'multi',
            'release_timestamp': 'multi',
            'file_format_type': 'multi',
            'transcriptome_annotation': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'analysis_step_version': 'multi',
            'content_md5sum': 'multi',
            'content_type': 'multi',
            'dbxrefs': 'multi',
            'derived_from': 'multi',
            'file_format': 'multi',
            'file_format_specifications': 'multi',
            'file_set': 'multi',
            'file_size': 'multi',
            'md5sum': 'multi',
            'submitted_file_name': 'multi',
            'upload_status': 'multi',
            'validation_error_detail': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'integrated_in': 'multi',
            'input_file_for': 'multi',
            'gene_list_for': 'multi',
            'loci_list_for': 'multi',
            'href': 'multi',
            's3_uri': 'multi',
            'upload_credentials': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if controlled_access is not None:
            
            _query_params.append(('controlled_access', controlled_access))
            
        if anvil_url is not None:
            
            _query_params.append(('anvil_url', anvil_url))
            
        if assembly is not None:
            
            _query_params.append(('assembly', assembly))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if file_format_type is not None:
            
            _query_params.append(('file_format_type', file_format_type))
            
        if transcriptome_annotation is not None:
            
            _query_params.append(('transcriptome_annotation', transcriptome_annotation))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if analysis_step_version is not None:
            
            _query_params.append(('analysis_step_version', analysis_step_version))
            
        if content_md5sum is not None:
            
            _query_params.append(('content_md5sum', content_md5sum))
            
        if content_type is not None:
            
            _query_params.append(('content_type', content_type))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if derived_from is not None:
            
            _query_params.append(('derived_from', derived_from))
            
        if file_format is not None:
            
            _query_params.append(('file_format', file_format))
            
        if file_format_specifications is not None:
            
            _query_params.append(('file_format_specifications', file_format_specifications))
            
        if file_set is not None:
            
            _query_params.append(('file_set', file_set))
            
        if file_size is not None:
            
            _query_params.append(('file_size', file_size))
            
        if md5sum is not None:
            
            _query_params.append(('md5sum', md5sum))
            
        if submitted_file_name is not None:
            
            _query_params.append(('submitted_file_name', submitted_file_name))
            
        if upload_status is not None:
            
            _query_params.append(('upload_status', upload_status))
            
        if validation_error_detail is not None:
            
            _query_params.append(('validation_error_detail', validation_error_detail))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if integrated_in is not None:
            
            _query_params.append(('integrated_in', integrated_in))
            
        if input_file_for is not None:
            
            _query_params.append(('input_file_for', input_file_for))
            
        if gene_list_for is not None:
            
            _query_params.append(('gene_list_for', gene_list_for))
            
        if loci_list_for is not None:
            
            _query_params.append(('loci_list_for', loci_list_for))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if s3_uri is not None:
            
            _query_params.append(('s3_uri', s3_uri))
            
        if upload_credentials is not None:
            
            _query_params.append(('upload_credentials', upload_credentials))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tabular-files/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def technical_samples(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        sample_material: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_material")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TechnicalSampleResults:
        """List items in the TechnicalSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param sample_material: Filter by sample_material
        :type sample_material: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._technical_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            sample_material=sample_material,
            taxa=taxa,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TechnicalSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def technical_samples_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        sample_material: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_material")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TechnicalSampleResults]:
        """List items in the TechnicalSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param sample_material: Filter by sample_material
        :type sample_material: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._technical_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            sample_material=sample_material,
            taxa=taxa,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TechnicalSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def technical_samples_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        sample_material: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_material")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        institutional_certificates: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the TechnicalSample collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param sample_material: Filter by sample_material
        :type sample_material: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param institutional_certificates: Filter by institutional_certificates
        :type institutional_certificates: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._technical_samples_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            sample_material=sample_material,
            taxa=taxa,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            institutional_certificates=institutional_certificates,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            lab_id=lab_id,
            lab_title=lab_title,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TechnicalSampleResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _technical_samples_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        construct_library_sets,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        sample_material,
        taxa,
        id,
        summary,
        sorted_fractions,
        origin_of,
        institutional_certificates,
        classifications,
        award_id,
        award_component,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        lab_id,
        lab_title,
        multiplexed_in_id,
        multiplexed_in_accession,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'construct_library_sets': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            'sample_material': 'multi',
            'taxa': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'institutional_certificates': 'multi',
            'classifications': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if construct_library_sets is not None:
            
            _query_params.append(('construct_library_sets', construct_library_sets))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if sample_material is not None:
            
            _query_params.append(('sample_material', sample_material))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if institutional_certificates is not None:
            
            _query_params.append(('institutional_certificates', institutional_certificates))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/technical-samples/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tissues(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        pmi: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by pmi")] = None,
        pmi_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by pmi_units")] = None,
        ccf_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by ccf_id")] = None,
        preservation_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by preservation_method")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TissueResults:
        """List items in the Tissue collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param pmi: Filter by pmi
        :type pmi: List[int]
        :param pmi_units: Filter by pmi_units
        :type pmi_units: List[str]
        :param ccf_id: Filter by ccf_id
        :type ccf_id: List[str]
        :param preservation_method: Filter by preservation_method
        :type preservation_method: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tissues_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            pmi=pmi,
            pmi_units=pmi_units,
            ccf_id=ccf_id,
            preservation_method=preservation_method,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TissueResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tissues_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        pmi: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by pmi")] = None,
        pmi_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by pmi_units")] = None,
        ccf_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by ccf_id")] = None,
        preservation_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by preservation_method")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TissueResults]:
        """List items in the Tissue collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param pmi: Filter by pmi
        :type pmi: List[int]
        :param pmi_units: Filter by pmi_units
        :type pmi_units: List[str]
        :param ccf_id: Filter by ccf_id
        :type ccf_id: List[str]
        :param preservation_method: Filter by preservation_method
        :type preservation_method: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tissues_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            pmi=pmi,
            pmi_units=pmi_units,
            ccf_id=ccf_id,
            preservation_method=preservation_method,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TissueResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tissues_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        pmi: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by pmi")] = None,
        pmi_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by pmi_units")] = None,
        ccf_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by ccf_id")] = None,
        preservation_method: Annotated[Optional[List[StrictStr]], Field(description="Filter by preservation_method")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Tissue collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param pmi: Filter by pmi
        :type pmi: List[int]
        :param pmi_units: Filter by pmi_units
        :type pmi_units: List[str]
        :param ccf_id: Filter by ccf_id
        :type ccf_id: List[str]
        :param preservation_method: Filter by preservation_method
        :type preservation_method: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tissues_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            taxa=taxa,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            pmi=pmi,
            pmi_units=pmi_units,
            ccf_id=ccf_id,
            preservation_method=preservation_method,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TissueResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tissues_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        taxa,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        lower_bound_age,
        upper_bound_age,
        age_units,
        pooled_from,
        part_of,
        originated_from,
        donors,
        biomarkers,
        embryonic,
        cellular_sub_pool,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        construct_library_sets,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        pmi,
        pmi_units,
        ccf_id,
        preservation_method,
        id,
        summary,
        sorted_fractions,
        origin_of,
        sex,
        age,
        upper_bound_age_in_hours,
        lower_bound_age_in_hours,
        parts,
        pooled_in,
        classifications,
        award_id,
        award_component,
        disease_terms_id,
        disease_terms_term_name,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        institutional_certificates_id,
        institutional_certificates_certificate_identifier,
        lab_id,
        lab_title,
        modifications_id,
        modifications_status,
        modifications_summary,
        multiplexed_in_id,
        multiplexed_in_accession,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        treatments_id,
        treatments_purpose,
        treatments_status,
        treatments_summary,
        treatments_treatment_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'taxa': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'lower_bound_age': 'multi',
            'upper_bound_age': 'multi',
            'age_units': 'multi',
            'pooled_from': 'multi',
            'part_of': 'multi',
            'originated_from': 'multi',
            'donors': 'multi',
            'biomarkers': 'multi',
            'embryonic': 'multi',
            'cellular_sub_pool': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'construct_library_sets': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            'pmi': 'multi',
            'pmi_units': 'multi',
            'ccf_id': 'multi',
            'preservation_method': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'sex': 'multi',
            'age': 'multi',
            'upper_bound_age_in_hours': 'multi',
            'lower_bound_age_in_hours': 'multi',
            'parts': 'multi',
            'pooled_in': 'multi',
            'classifications': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'disease_terms.@id': 'multi',
            'disease_terms.term_name': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'institutional_certificates.@id': 'multi',
            'institutional_certificates.certificate_identifier': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'modifications.@id': 'multi',
            'modifications.status': 'multi',
            'modifications.summary': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'treatments.@id': 'multi',
            'treatments.purpose': 'multi',
            'treatments.status': 'multi',
            'treatments.summary': 'multi',
            'treatments.treatment_type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if lower_bound_age is not None:
            
            _query_params.append(('lower_bound_age', lower_bound_age))
            
        if upper_bound_age is not None:
            
            _query_params.append(('upper_bound_age', upper_bound_age))
            
        if age_units is not None:
            
            _query_params.append(('age_units', age_units))
            
        if pooled_from is not None:
            
            _query_params.append(('pooled_from', pooled_from))
            
        if part_of is not None:
            
            _query_params.append(('part_of', part_of))
            
        if originated_from is not None:
            
            _query_params.append(('originated_from', originated_from))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if biomarkers is not None:
            
            _query_params.append(('biomarkers', biomarkers))
            
        if embryonic is not None:
            
            _query_params.append(('embryonic', embryonic))
            
        if cellular_sub_pool is not None:
            
            _query_params.append(('cellular_sub_pool', cellular_sub_pool))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if construct_library_sets is not None:
            
            _query_params.append(('construct_library_sets', construct_library_sets))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if pmi is not None:
            
            _query_params.append(('pmi', pmi))
            
        if pmi_units is not None:
            
            _query_params.append(('pmi_units', pmi_units))
            
        if ccf_id is not None:
            
            _query_params.append(('ccf_id', ccf_id))
            
        if preservation_method is not None:
            
            _query_params.append(('preservation_method', preservation_method))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if age is not None:
            
            _query_params.append(('age', age))
            
        if upper_bound_age_in_hours is not None:
            
            _query_params.append(('upper_bound_age_in_hours', upper_bound_age_in_hours))
            
        if lower_bound_age_in_hours is not None:
            
            _query_params.append(('lower_bound_age_in_hours', lower_bound_age_in_hours))
            
        if parts is not None:
            
            _query_params.append(('parts', parts))
            
        if pooled_in is not None:
            
            _query_params.append(('pooled_in', pooled_in))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if disease_terms_id is not None:
            
            _query_params.append(('disease_terms.@id', disease_terms_id))
            
        if disease_terms_term_name is not None:
            
            _query_params.append(('disease_terms.term_name', disease_terms_term_name))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if institutional_certificates_id is not None:
            
            _query_params.append(('institutional_certificates.@id', institutional_certificates_id))
            
        if institutional_certificates_certificate_identifier is not None:
            
            _query_params.append(('institutional_certificates.certificate_identifier', institutional_certificates_certificate_identifier))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if modifications_id is not None:
            
            _query_params.append(('modifications.@id', modifications_id))
            
        if modifications_status is not None:
            
            _query_params.append(('modifications.status', modifications_status))
            
        if modifications_summary is not None:
            
            _query_params.append(('modifications.summary', modifications_summary))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if treatments_id is not None:
            
            _query_params.append(('treatments.@id', treatments_id))
            
        if treatments_purpose is not None:
            
            _query_params.append(('treatments.purpose', treatments_purpose))
            
        if treatments_status is not None:
            
            _query_params.append(('treatments.status', treatments_status))
            
        if treatments_summary is not None:
            
            _query_params.append(('treatments.summary', treatments_summary))
            
        if treatments_treatment_type is not None:
            
            _query_params.append(('treatments.treatment_type', treatments_treatment_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tissues/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def treatments(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by amount")] = None,
        amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by amount_units")] = None,
        duration: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by duration")] = None,
        duration_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by duration_units")] = None,
        p_h: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by pH")] = None,
        purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by purpose")] = None,
        post_treatment_time: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by post_treatment_time")] = None,
        post_treatment_time_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by post_treatment_time_units")] = None,
        temperature: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by temperature")] = None,
        temperature_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by temperature_units")] = None,
        treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_type")] = None,
        treatment_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by treatment_term_id")] = None,
        treatment_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_term_name")] = None,
        depletion: Annotated[Optional[List[StrictBool]], Field(description="Filter by depletion")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_treated: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_treated")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TreatmentResults:
        """List items in the Treatment collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param amount: Filter by amount
        :type amount: List[float]
        :param amount_units: Filter by amount_units
        :type amount_units: List[str]
        :param duration: Filter by duration
        :type duration: List[float]
        :param duration_units: Filter by duration_units
        :type duration_units: List[str]
        :param p_h: Filter by pH
        :type p_h: List[float]
        :param purpose: Filter by purpose
        :type purpose: List[str]
        :param post_treatment_time: Filter by post_treatment_time
        :type post_treatment_time: List[float]
        :param post_treatment_time_units: Filter by post_treatment_time_units
        :type post_treatment_time_units: List[str]
        :param temperature: Filter by temperature
        :type temperature: List[float]
        :param temperature_units: Filter by temperature_units
        :type temperature_units: List[str]
        :param treatment_type: Filter by treatment_type
        :type treatment_type: List[str]
        :param treatment_term_id: Filter by treatment_term_id
        :type treatment_term_id: List[str]
        :param treatment_term_name: Filter by treatment_term_name
        :type treatment_term_name: List[str]
        :param depletion: Filter by depletion
        :type depletion: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_treated: Filter by biosamples_treated
        :type biosamples_treated: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._treatments_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            amount=amount,
            amount_units=amount_units,
            duration=duration,
            duration_units=duration_units,
            p_h=p_h,
            purpose=purpose,
            post_treatment_time=post_treatment_time,
            post_treatment_time_units=post_treatment_time_units,
            temperature=temperature,
            temperature_units=temperature_units,
            treatment_type=treatment_type,
            treatment_term_id=treatment_term_id,
            treatment_term_name=treatment_term_name,
            depletion=depletion,
            id=id,
            summary=summary,
            biosamples_treated=biosamples_treated,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TreatmentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def treatments_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by amount")] = None,
        amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by amount_units")] = None,
        duration: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by duration")] = None,
        duration_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by duration_units")] = None,
        p_h: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by pH")] = None,
        purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by purpose")] = None,
        post_treatment_time: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by post_treatment_time")] = None,
        post_treatment_time_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by post_treatment_time_units")] = None,
        temperature: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by temperature")] = None,
        temperature_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by temperature_units")] = None,
        treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_type")] = None,
        treatment_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by treatment_term_id")] = None,
        treatment_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_term_name")] = None,
        depletion: Annotated[Optional[List[StrictBool]], Field(description="Filter by depletion")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_treated: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_treated")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TreatmentResults]:
        """List items in the Treatment collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param amount: Filter by amount
        :type amount: List[float]
        :param amount_units: Filter by amount_units
        :type amount_units: List[str]
        :param duration: Filter by duration
        :type duration: List[float]
        :param duration_units: Filter by duration_units
        :type duration_units: List[str]
        :param p_h: Filter by pH
        :type p_h: List[float]
        :param purpose: Filter by purpose
        :type purpose: List[str]
        :param post_treatment_time: Filter by post_treatment_time
        :type post_treatment_time: List[float]
        :param post_treatment_time_units: Filter by post_treatment_time_units
        :type post_treatment_time_units: List[str]
        :param temperature: Filter by temperature
        :type temperature: List[float]
        :param temperature_units: Filter by temperature_units
        :type temperature_units: List[str]
        :param treatment_type: Filter by treatment_type
        :type treatment_type: List[str]
        :param treatment_term_id: Filter by treatment_term_id
        :type treatment_term_id: List[str]
        :param treatment_term_name: Filter by treatment_term_name
        :type treatment_term_name: List[str]
        :param depletion: Filter by depletion
        :type depletion: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_treated: Filter by biosamples_treated
        :type biosamples_treated: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._treatments_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            amount=amount,
            amount_units=amount_units,
            duration=duration,
            duration_units=duration_units,
            p_h=p_h,
            purpose=purpose,
            post_treatment_time=post_treatment_time,
            post_treatment_time_units=post_treatment_time_units,
            temperature=temperature,
            temperature_units=temperature_units,
            treatment_type=treatment_type,
            treatment_term_id=treatment_term_id,
            treatment_term_name=treatment_term_name,
            depletion=depletion,
            id=id,
            summary=summary,
            biosamples_treated=biosamples_treated,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TreatmentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def treatments_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by amount")] = None,
        amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by amount_units")] = None,
        duration: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by duration")] = None,
        duration_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by duration_units")] = None,
        p_h: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by pH")] = None,
        purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by purpose")] = None,
        post_treatment_time: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by post_treatment_time")] = None,
        post_treatment_time_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by post_treatment_time_units")] = None,
        temperature: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by temperature")] = None,
        temperature_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by temperature_units")] = None,
        treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_type")] = None,
        treatment_term_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by treatment_term_id")] = None,
        treatment_term_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatment_term_name")] = None,
        depletion: Annotated[Optional[List[StrictBool]], Field(description="Filter by depletion")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        biosamples_treated: Annotated[Optional[List[StrictStr]], Field(description="Filter by biosamples_treated")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Treatment collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param amount: Filter by amount
        :type amount: List[float]
        :param amount_units: Filter by amount_units
        :type amount_units: List[str]
        :param duration: Filter by duration
        :type duration: List[float]
        :param duration_units: Filter by duration_units
        :type duration_units: List[str]
        :param p_h: Filter by pH
        :type p_h: List[float]
        :param purpose: Filter by purpose
        :type purpose: List[str]
        :param post_treatment_time: Filter by post_treatment_time
        :type post_treatment_time: List[float]
        :param post_treatment_time_units: Filter by post_treatment_time_units
        :type post_treatment_time_units: List[str]
        :param temperature: Filter by temperature
        :type temperature: List[float]
        :param temperature_units: Filter by temperature_units
        :type temperature_units: List[str]
        :param treatment_type: Filter by treatment_type
        :type treatment_type: List[str]
        :param treatment_term_id: Filter by treatment_term_id
        :type treatment_term_id: List[str]
        :param treatment_term_name: Filter by treatment_term_name
        :type treatment_term_name: List[str]
        :param depletion: Filter by depletion
        :type depletion: List[bool]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param biosamples_treated: Filter by biosamples_treated
        :type biosamples_treated: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._treatments_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            amount=amount,
            amount_units=amount_units,
            duration=duration,
            duration_units=duration_units,
            p_h=p_h,
            purpose=purpose,
            post_treatment_time=post_treatment_time,
            post_treatment_time_units=post_treatment_time_units,
            temperature=temperature,
            temperature_units=temperature_units,
            treatment_type=treatment_type,
            treatment_term_id=treatment_term_id,
            treatment_term_name=treatment_term_name,
            depletion=depletion,
            id=id,
            summary=summary,
            biosamples_treated=biosamples_treated,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TreatmentResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _treatments_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        lot_id,
        product_id,
        documents,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        amount,
        amount_units,
        duration,
        duration_units,
        p_h,
        purpose,
        post_treatment_time,
        post_treatment_time_units,
        temperature,
        temperature_units,
        treatment_type,
        treatment_term_id,
        treatment_term_name,
        depletion,
        id,
        summary,
        biosamples_treated,
        award_id,
        award_component,
        lab_id,
        lab_title,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'amount': 'multi',
            'amount_units': 'multi',
            'duration': 'multi',
            'duration_units': 'multi',
            'pH': 'multi',
            'purpose': 'multi',
            'post_treatment_time': 'multi',
            'post_treatment_time_units': 'multi',
            'temperature': 'multi',
            'temperature_units': 'multi',
            'treatment_type': 'multi',
            'treatment_term_id': 'multi',
            'treatment_term_name': 'multi',
            'depletion': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'biosamples_treated': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if amount is not None:
            
            _query_params.append(('amount', amount))
            
        if amount_units is not None:
            
            _query_params.append(('amount_units', amount_units))
            
        if duration is not None:
            
            _query_params.append(('duration', duration))
            
        if duration_units is not None:
            
            _query_params.append(('duration_units', duration_units))
            
        if p_h is not None:
            
            _query_params.append(('pH', p_h))
            
        if purpose is not None:
            
            _query_params.append(('purpose', purpose))
            
        if post_treatment_time is not None:
            
            _query_params.append(('post_treatment_time', post_treatment_time))
            
        if post_treatment_time_units is not None:
            
            _query_params.append(('post_treatment_time_units', post_treatment_time_units))
            
        if temperature is not None:
            
            _query_params.append(('temperature', temperature))
            
        if temperature_units is not None:
            
            _query_params.append(('temperature_units', temperature_units))
            
        if treatment_type is not None:
            
            _query_params.append(('treatment_type', treatment_type))
            
        if treatment_term_id is not None:
            
            _query_params.append(('treatment_term_id', treatment_term_id))
            
        if treatment_term_name is not None:
            
            _query_params.append(('treatment_term_name', treatment_term_name))
            
        if depletion is not None:
            
            _query_params.append(('depletion', depletion))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if biosamples_treated is not None:
            
            _query_params.append(('biosamples_treated', biosamples_treated))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/treatments/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def users(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        email: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by email")] = None,
        first_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by first_name")] = None,
        last_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by last_name")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        submits_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by submits_for")] = None,
        groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by groups")] = None,
        viewing_groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_groups")] = None,
        job_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by job_title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserResults:
        """List items in the User collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param email: Filter by email
        :type email: List[str]
        :param first_name: Filter by first_name
        :type first_name: List[str]
        :param last_name: Filter by last_name
        :type last_name: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param submits_for: Filter by submits_for
        :type submits_for: List[str]
        :param groups: Filter by groups
        :type groups: List[str]
        :param viewing_groups: Filter by viewing_groups
        :type viewing_groups: List[str]
        :param job_title: Filter by job_title
        :type job_title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            email=email,
            first_name=first_name,
            last_name=last_name,
            lab=lab,
            submits_for=submits_for,
            groups=groups,
            viewing_groups=viewing_groups,
            job_title=job_title,
            id=id,
            summary=summary,
            title=title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def users_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        email: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by email")] = None,
        first_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by first_name")] = None,
        last_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by last_name")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        submits_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by submits_for")] = None,
        groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by groups")] = None,
        viewing_groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_groups")] = None,
        job_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by job_title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserResults]:
        """List items in the User collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param email: Filter by email
        :type email: List[str]
        :param first_name: Filter by first_name
        :type first_name: List[str]
        :param last_name: Filter by last_name
        :type last_name: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param submits_for: Filter by submits_for
        :type submits_for: List[str]
        :param groups: Filter by groups
        :type groups: List[str]
        :param viewing_groups: Filter by viewing_groups
        :type viewing_groups: List[str]
        :param job_title: Filter by job_title
        :type job_title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            email=email,
            first_name=first_name,
            last_name=last_name,
            lab=lab,
            submits_for=submits_for,
            groups=groups,
            viewing_groups=viewing_groups,
            job_title=job_title,
            id=id,
            summary=summary,
            title=title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def users_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        email: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by email")] = None,
        first_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by first_name")] = None,
        last_name: Annotated[Optional[List[StrictStr]], Field(description="Filter by last_name")] = None,
        lab: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab")] = None,
        submits_for: Annotated[Optional[List[StrictStr]], Field(description="Filter by submits_for")] = None,
        groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by groups")] = None,
        viewing_groups: Annotated[Optional[List[StrictStr]], Field(description="Filter by viewing_groups")] = None,
        job_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by job_title")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        title: Annotated[Optional[List[StrictStr]], Field(description="Filter by title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the User collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param email: Filter by email
        :type email: List[str]
        :param first_name: Filter by first_name
        :type first_name: List[str]
        :param last_name: Filter by last_name
        :type last_name: List[str]
        :param lab: Filter by lab
        :type lab: List[str]
        :param submits_for: Filter by submits_for
        :type submits_for: List[str]
        :param groups: Filter by groups
        :type groups: List[str]
        :param viewing_groups: Filter by viewing_groups
        :type viewing_groups: List[str]
        :param job_title: Filter by job_title
        :type job_title: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param title: Filter by title
        :type title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._users_serialize(
            query=query,
            limit=limit,
            sort=sort,
            status=status,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            email=email,
            first_name=first_name,
            last_name=last_name,
            lab=lab,
            submits_for=submits_for,
            groups=groups,
            viewing_groups=viewing_groups,
            job_title=job_title,
            id=id,
            summary=summary,
            title=title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _users_serialize(
        self,
        query,
        limit,
        sort,
        status,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        email,
        first_name,
        last_name,
        lab,
        submits_for,
        groups,
        viewing_groups,
        job_title,
        id,
        summary,
        title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'status': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'email': 'multi',
            'first_name': 'multi',
            'last_name': 'multi',
            'lab': 'multi',
            'submits_for': 'multi',
            'groups': 'multi',
            'viewing_groups': 'multi',
            'job_title': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if email is not None:
            
            _query_params.append(('email', email))
            
        if first_name is not None:
            
            _query_params.append(('first_name', first_name))
            
        if last_name is not None:
            
            _query_params.append(('last_name', last_name))
            
        if lab is not None:
            
            _query_params.append(('lab', lab))
            
        if submits_for is not None:
            
            _query_params.append(('submits_for', submits_for))
            
        if groups is not None:
            
            _query_params.append(('groups', groups))
            
        if viewing_groups is not None:
            
            _query_params.append(('viewing_groups', viewing_groups))
            
        if job_title is not None:
            
            _query_params.append(('job_title', job_title))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if title is not None:
            
            _query_params.append(('title', title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/users/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def whole_organisms(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WholeOrganismResults:
        """List items in the WholeOrganism collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._whole_organisms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WholeOrganismResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def whole_organisms_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WholeOrganismResults]:
        """List items in the WholeOrganism collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._whole_organisms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WholeOrganismResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def whole_organisms_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        taxa: Annotated[Optional[List[StrictStr]], Field(description="Filter by taxa")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        url: Annotated[Optional[List[StrictStr]], Field(description="Filter by url")] = None,
        lot_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by lot_id")] = None,
        product_id: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by product_id")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        lower_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age")] = None,
        upper_bound_age: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age")] = None,
        age_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by age_units")] = None,
        pooled_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_from")] = None,
        part_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by part_of")] = None,
        originated_from: Annotated[Optional[List[StrictStr]], Field(description="Filter by originated_from")] = None,
        donors: Annotated[Optional[List[StrictStr]], Field(description="Filter by donors")] = None,
        biomarkers: Annotated[Optional[List[StrictStr]], Field(description="Filter by biomarkers")] = None,
        embryonic: Annotated[Optional[List[StrictBool]], Field(description="Filter by embryonic")] = None,
        cellular_sub_pool: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by cellular_sub_pool")] = None,
        starting_amount: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by starting_amount")] = None,
        starting_amount_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by starting_amount_units")] = None,
        dbxrefs: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by dbxrefs")] = None,
        date_obtained: Annotated[Optional[List[StrictStr]], Field(description="Filter by date_obtained")] = None,
        sorted_from_detail: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from_detail")] = None,
        virtual: Annotated[Optional[List[StrictBool]], Field(description="Filter by virtual")] = None,
        construct_library_sets: Annotated[Optional[List[StrictStr]], Field(description="Filter by construct_library_sets")] = None,
        moi: Annotated[Optional[List[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]]], Field(description="Filter by moi")] = None,
        nucleic_acid_delivery: Annotated[Optional[List[StrictStr]], Field(description="Filter by nucleic_acid_delivery")] = None,
        time_post_library_delivery: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by time_post_library_delivery")] = None,
        time_post_library_delivery_units: Annotated[Optional[List[StrictStr]], Field(description="Filter by time_post_library_delivery_units")] = None,
        protocols: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by protocols")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        sorted_fractions: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_fractions")] = None,
        origin_of: Annotated[Optional[List[StrictStr]], Field(description="Filter by origin_of")] = None,
        sex: Annotated[Optional[List[StrictStr]], Field(description="Filter by sex")] = None,
        age: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by age")] = None,
        upper_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by upper_bound_age_in_hours")] = None,
        lower_bound_age_in_hours: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Filter by lower_bound_age_in_hours")] = None,
        parts: Annotated[Optional[List[StrictStr]], Field(description="Filter by parts")] = None,
        pooled_in: Annotated[Optional[List[StrictStr]], Field(description="Filter by pooled_in")] = None,
        classifications: Annotated[Optional[List[StrictStr]], Field(description="Filter by classifications")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        disease_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by disease_terms.@id")] = None,
        disease_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by disease_terms.term_name")] = None,
        file_sets_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.@id")] = None,
        file_sets_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.accession")] = None,
        file_sets_aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.aliases")] = None,
        file_sets_assay_term_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by file_sets.assay_term.term_name")] = None,
        file_sets_lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.lab.title")] = None,
        file_sets_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.status")] = None,
        file_sets_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by file_sets.summary")] = None,
        institutional_certificates_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by institutional_certificates.@id")] = None,
        institutional_certificates_certificate_identifier: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by institutional_certificates.certificate_identifier")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        modifications_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.@id")] = None,
        modifications_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.status")] = None,
        modifications_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by modifications.summary")] = None,
        multiplexed_in_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.@id")] = None,
        multiplexed_in_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by multiplexed_in.accession")] = None,
        sample_terms_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sample_terms.@id")] = None,
        sample_terms_term_name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by sample_terms.term_name")] = None,
        sorted_from_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.@id")] = None,
        sorted_from_accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by sorted_from.accession")] = None,
        sources_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by sources.@id")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        treatments_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.@id")] = None,
        treatments_purpose: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.purpose")] = None,
        treatments_status: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.status")] = None,
        treatments_summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.summary")] = None,
        treatments_treatment_type: Annotated[Optional[List[StrictStr]], Field(description="Filter by treatments.treatment_type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the WholeOrganism collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param taxa: Filter by taxa
        :type taxa: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param url: Filter by url
        :type url: List[str]
        :param lot_id: Filter by lot_id
        :type lot_id: List[str]
        :param product_id: Filter by product_id
        :type product_id: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param lower_bound_age: Filter by lower_bound_age
        :type lower_bound_age: List[float]
        :param upper_bound_age: Filter by upper_bound_age
        :type upper_bound_age: List[float]
        :param age_units: Filter by age_units
        :type age_units: List[str]
        :param pooled_from: Filter by pooled_from
        :type pooled_from: List[str]
        :param part_of: Filter by part_of
        :type part_of: List[str]
        :param originated_from: Filter by originated_from
        :type originated_from: List[str]
        :param donors: Filter by donors
        :type donors: List[str]
        :param biomarkers: Filter by biomarkers
        :type biomarkers: List[str]
        :param embryonic: Filter by embryonic
        :type embryonic: List[bool]
        :param cellular_sub_pool: Filter by cellular_sub_pool
        :type cellular_sub_pool: List[str]
        :param starting_amount: Filter by starting_amount
        :type starting_amount: List[float]
        :param starting_amount_units: Filter by starting_amount_units
        :type starting_amount_units: List[str]
        :param dbxrefs: Filter by dbxrefs
        :type dbxrefs: List[str]
        :param date_obtained: Filter by date_obtained
        :type date_obtained: List[str]
        :param sorted_from_detail: Filter by sorted_from_detail
        :type sorted_from_detail: List[str]
        :param virtual: Filter by virtual
        :type virtual: List[bool]
        :param construct_library_sets: Filter by construct_library_sets
        :type construct_library_sets: List[str]
        :param moi: Filter by moi
        :type moi: List[float]
        :param nucleic_acid_delivery: Filter by nucleic_acid_delivery
        :type nucleic_acid_delivery: List[str]
        :param time_post_library_delivery: Filter by time_post_library_delivery
        :type time_post_library_delivery: List[float]
        :param time_post_library_delivery_units: Filter by time_post_library_delivery_units
        :type time_post_library_delivery_units: List[str]
        :param protocols: Filter by protocols
        :type protocols: List[str]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param sorted_fractions: Filter by sorted_fractions
        :type sorted_fractions: List[str]
        :param origin_of: Filter by origin_of
        :type origin_of: List[str]
        :param sex: Filter by sex
        :type sex: List[str]
        :param age: Filter by age
        :type age: List[str]
        :param upper_bound_age_in_hours: Filter by upper_bound_age_in_hours
        :type upper_bound_age_in_hours: List[float]
        :param lower_bound_age_in_hours: Filter by lower_bound_age_in_hours
        :type lower_bound_age_in_hours: List[float]
        :param parts: Filter by parts
        :type parts: List[str]
        :param pooled_in: Filter by pooled_in
        :type pooled_in: List[str]
        :param classifications: Filter by classifications
        :type classifications: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param disease_terms_id: Filter by disease_terms.@id
        :type disease_terms_id: List[str]
        :param disease_terms_term_name: Filter by disease_terms.term_name
        :type disease_terms_term_name: List[str]
        :param file_sets_id: Filter by file_sets.@id
        :type file_sets_id: List[str]
        :param file_sets_accession: Filter by file_sets.accession
        :type file_sets_accession: List[str]
        :param file_sets_aliases: Filter by file_sets.aliases
        :type file_sets_aliases: List[str]
        :param file_sets_assay_term_term_name: Filter by file_sets.assay_term.term_name
        :type file_sets_assay_term_term_name: List[str]
        :param file_sets_lab_title: Filter by file_sets.lab.title
        :type file_sets_lab_title: List[str]
        :param file_sets_status: Filter by file_sets.status
        :type file_sets_status: List[str]
        :param file_sets_summary: Filter by file_sets.summary
        :type file_sets_summary: List[str]
        :param institutional_certificates_id: Filter by institutional_certificates.@id
        :type institutional_certificates_id: List[str]
        :param institutional_certificates_certificate_identifier: Filter by institutional_certificates.certificate_identifier
        :type institutional_certificates_certificate_identifier: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param modifications_id: Filter by modifications.@id
        :type modifications_id: List[str]
        :param modifications_status: Filter by modifications.status
        :type modifications_status: List[str]
        :param modifications_summary: Filter by modifications.summary
        :type modifications_summary: List[str]
        :param multiplexed_in_id: Filter by multiplexed_in.@id
        :type multiplexed_in_id: List[str]
        :param multiplexed_in_accession: Filter by multiplexed_in.accession
        :type multiplexed_in_accession: List[str]
        :param sample_terms_id: Filter by sample_terms.@id
        :type sample_terms_id: List[str]
        :param sample_terms_term_name: Filter by sample_terms.term_name
        :type sample_terms_term_name: List[str]
        :param sorted_from_id: Filter by sorted_from.@id
        :type sorted_from_id: List[str]
        :param sorted_from_accession: Filter by sorted_from.accession
        :type sorted_from_accession: List[str]
        :param sources_id: Filter by sources.@id
        :type sources_id: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param treatments_id: Filter by treatments.@id
        :type treatments_id: List[str]
        :param treatments_purpose: Filter by treatments.purpose
        :type treatments_purpose: List[str]
        :param treatments_status: Filter by treatments.status
        :type treatments_status: List[str]
        :param treatments_summary: Filter by treatments.summary
        :type treatments_summary: List[str]
        :param treatments_treatment_type: Filter by treatments.treatment_type
        :type treatments_treatment_type: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._whole_organisms_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            taxa=taxa,
            publications=publications,
            publication_identifiers=publication_identifiers,
            url=url,
            lot_id=lot_id,
            product_id=product_id,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            lower_bound_age=lower_bound_age,
            upper_bound_age=upper_bound_age,
            age_units=age_units,
            pooled_from=pooled_from,
            part_of=part_of,
            originated_from=originated_from,
            donors=donors,
            biomarkers=biomarkers,
            embryonic=embryonic,
            cellular_sub_pool=cellular_sub_pool,
            starting_amount=starting_amount,
            starting_amount_units=starting_amount_units,
            dbxrefs=dbxrefs,
            date_obtained=date_obtained,
            sorted_from_detail=sorted_from_detail,
            virtual=virtual,
            construct_library_sets=construct_library_sets,
            moi=moi,
            nucleic_acid_delivery=nucleic_acid_delivery,
            time_post_library_delivery=time_post_library_delivery,
            time_post_library_delivery_units=time_post_library_delivery_units,
            protocols=protocols,
            id=id,
            summary=summary,
            sorted_fractions=sorted_fractions,
            origin_of=origin_of,
            sex=sex,
            age=age,
            upper_bound_age_in_hours=upper_bound_age_in_hours,
            lower_bound_age_in_hours=lower_bound_age_in_hours,
            parts=parts,
            pooled_in=pooled_in,
            classifications=classifications,
            award_id=award_id,
            award_component=award_component,
            disease_terms_id=disease_terms_id,
            disease_terms_term_name=disease_terms_term_name,
            file_sets_id=file_sets_id,
            file_sets_accession=file_sets_accession,
            file_sets_aliases=file_sets_aliases,
            file_sets_assay_term_term_name=file_sets_assay_term_term_name,
            file_sets_lab_title=file_sets_lab_title,
            file_sets_status=file_sets_status,
            file_sets_summary=file_sets_summary,
            institutional_certificates_id=institutional_certificates_id,
            institutional_certificates_certificate_identifier=institutional_certificates_certificate_identifier,
            lab_id=lab_id,
            lab_title=lab_title,
            modifications_id=modifications_id,
            modifications_status=modifications_status,
            modifications_summary=modifications_summary,
            multiplexed_in_id=multiplexed_in_id,
            multiplexed_in_accession=multiplexed_in_accession,
            sample_terms_id=sample_terms_id,
            sample_terms_term_name=sample_terms_term_name,
            sorted_from_id=sorted_from_id,
            sorted_from_accession=sorted_from_accession,
            sources_id=sources_id,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            treatments_id=treatments_id,
            treatments_purpose=treatments_purpose,
            treatments_status=treatments_status,
            treatments_summary=treatments_summary,
            treatments_treatment_type=treatments_treatment_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WholeOrganismResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _whole_organisms_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        taxa,
        publications,
        publication_identifiers,
        url,
        lot_id,
        product_id,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        lower_bound_age,
        upper_bound_age,
        age_units,
        pooled_from,
        part_of,
        originated_from,
        donors,
        biomarkers,
        embryonic,
        cellular_sub_pool,
        starting_amount,
        starting_amount_units,
        dbxrefs,
        date_obtained,
        sorted_from_detail,
        virtual,
        construct_library_sets,
        moi,
        nucleic_acid_delivery,
        time_post_library_delivery,
        time_post_library_delivery_units,
        protocols,
        id,
        summary,
        sorted_fractions,
        origin_of,
        sex,
        age,
        upper_bound_age_in_hours,
        lower_bound_age_in_hours,
        parts,
        pooled_in,
        classifications,
        award_id,
        award_component,
        disease_terms_id,
        disease_terms_term_name,
        file_sets_id,
        file_sets_accession,
        file_sets_aliases,
        file_sets_assay_term_term_name,
        file_sets_lab_title,
        file_sets_status,
        file_sets_summary,
        institutional_certificates_id,
        institutional_certificates_certificate_identifier,
        lab_id,
        lab_title,
        modifications_id,
        modifications_status,
        modifications_summary,
        multiplexed_in_id,
        multiplexed_in_accession,
        sample_terms_id,
        sample_terms_term_name,
        sorted_from_id,
        sorted_from_accession,
        sources_id,
        submitted_by_id,
        submitted_by_title,
        treatments_id,
        treatments_purpose,
        treatments_status,
        treatments_summary,
        treatments_treatment_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'taxa': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'url': 'multi',
            'lot_id': 'multi',
            'product_id': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'lower_bound_age': 'multi',
            'upper_bound_age': 'multi',
            'age_units': 'multi',
            'pooled_from': 'multi',
            'part_of': 'multi',
            'originated_from': 'multi',
            'donors': 'multi',
            'biomarkers': 'multi',
            'embryonic': 'multi',
            'cellular_sub_pool': 'multi',
            'starting_amount': 'multi',
            'starting_amount_units': 'multi',
            'dbxrefs': 'multi',
            'date_obtained': 'multi',
            'sorted_from_detail': 'multi',
            'virtual': 'multi',
            'construct_library_sets': 'multi',
            'moi': 'multi',
            'nucleic_acid_delivery': 'multi',
            'time_post_library_delivery': 'multi',
            'time_post_library_delivery_units': 'multi',
            'protocols': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'sorted_fractions': 'multi',
            'origin_of': 'multi',
            'sex': 'multi',
            'age': 'multi',
            'upper_bound_age_in_hours': 'multi',
            'lower_bound_age_in_hours': 'multi',
            'parts': 'multi',
            'pooled_in': 'multi',
            'classifications': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'disease_terms.@id': 'multi',
            'disease_terms.term_name': 'multi',
            'file_sets.@id': 'multi',
            'file_sets.accession': 'multi',
            'file_sets.aliases': 'multi',
            'file_sets.assay_term.term_name': 'multi',
            'file_sets.lab.title': 'multi',
            'file_sets.status': 'multi',
            'file_sets.summary': 'multi',
            'institutional_certificates.@id': 'multi',
            'institutional_certificates.certificate_identifier': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'modifications.@id': 'multi',
            'modifications.status': 'multi',
            'modifications.summary': 'multi',
            'multiplexed_in.@id': 'multi',
            'multiplexed_in.accession': 'multi',
            'sample_terms.@id': 'multi',
            'sample_terms.term_name': 'multi',
            'sorted_from.@id': 'multi',
            'sorted_from.accession': 'multi',
            'sources.@id': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
            'treatments.@id': 'multi',
            'treatments.purpose': 'multi',
            'treatments.status': 'multi',
            'treatments.summary': 'multi',
            'treatments.treatment_type': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if taxa is not None:
            
            _query_params.append(('taxa', taxa))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if url is not None:
            
            _query_params.append(('url', url))
            
        if lot_id is not None:
            
            _query_params.append(('lot_id', lot_id))
            
        if product_id is not None:
            
            _query_params.append(('product_id', product_id))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if lower_bound_age is not None:
            
            _query_params.append(('lower_bound_age', lower_bound_age))
            
        if upper_bound_age is not None:
            
            _query_params.append(('upper_bound_age', upper_bound_age))
            
        if age_units is not None:
            
            _query_params.append(('age_units', age_units))
            
        if pooled_from is not None:
            
            _query_params.append(('pooled_from', pooled_from))
            
        if part_of is not None:
            
            _query_params.append(('part_of', part_of))
            
        if originated_from is not None:
            
            _query_params.append(('originated_from', originated_from))
            
        if donors is not None:
            
            _query_params.append(('donors', donors))
            
        if biomarkers is not None:
            
            _query_params.append(('biomarkers', biomarkers))
            
        if embryonic is not None:
            
            _query_params.append(('embryonic', embryonic))
            
        if cellular_sub_pool is not None:
            
            _query_params.append(('cellular_sub_pool', cellular_sub_pool))
            
        if starting_amount is not None:
            
            _query_params.append(('starting_amount', starting_amount))
            
        if starting_amount_units is not None:
            
            _query_params.append(('starting_amount_units', starting_amount_units))
            
        if dbxrefs is not None:
            
            _query_params.append(('dbxrefs', dbxrefs))
            
        if date_obtained is not None:
            
            _query_params.append(('date_obtained', date_obtained))
            
        if sorted_from_detail is not None:
            
            _query_params.append(('sorted_from_detail', sorted_from_detail))
            
        if virtual is not None:
            
            _query_params.append(('virtual', virtual))
            
        if construct_library_sets is not None:
            
            _query_params.append(('construct_library_sets', construct_library_sets))
            
        if moi is not None:
            
            _query_params.append(('moi', moi))
            
        if nucleic_acid_delivery is not None:
            
            _query_params.append(('nucleic_acid_delivery', nucleic_acid_delivery))
            
        if time_post_library_delivery is not None:
            
            _query_params.append(('time_post_library_delivery', time_post_library_delivery))
            
        if time_post_library_delivery_units is not None:
            
            _query_params.append(('time_post_library_delivery_units', time_post_library_delivery_units))
            
        if protocols is not None:
            
            _query_params.append(('protocols', protocols))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if sorted_fractions is not None:
            
            _query_params.append(('sorted_fractions', sorted_fractions))
            
        if origin_of is not None:
            
            _query_params.append(('origin_of', origin_of))
            
        if sex is not None:
            
            _query_params.append(('sex', sex))
            
        if age is not None:
            
            _query_params.append(('age', age))
            
        if upper_bound_age_in_hours is not None:
            
            _query_params.append(('upper_bound_age_in_hours', upper_bound_age_in_hours))
            
        if lower_bound_age_in_hours is not None:
            
            _query_params.append(('lower_bound_age_in_hours', lower_bound_age_in_hours))
            
        if parts is not None:
            
            _query_params.append(('parts', parts))
            
        if pooled_in is not None:
            
            _query_params.append(('pooled_in', pooled_in))
            
        if classifications is not None:
            
            _query_params.append(('classifications', classifications))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if disease_terms_id is not None:
            
            _query_params.append(('disease_terms.@id', disease_terms_id))
            
        if disease_terms_term_name is not None:
            
            _query_params.append(('disease_terms.term_name', disease_terms_term_name))
            
        if file_sets_id is not None:
            
            _query_params.append(('file_sets.@id', file_sets_id))
            
        if file_sets_accession is not None:
            
            _query_params.append(('file_sets.accession', file_sets_accession))
            
        if file_sets_aliases is not None:
            
            _query_params.append(('file_sets.aliases', file_sets_aliases))
            
        if file_sets_assay_term_term_name is not None:
            
            _query_params.append(('file_sets.assay_term.term_name', file_sets_assay_term_term_name))
            
        if file_sets_lab_title is not None:
            
            _query_params.append(('file_sets.lab.title', file_sets_lab_title))
            
        if file_sets_status is not None:
            
            _query_params.append(('file_sets.status', file_sets_status))
            
        if file_sets_summary is not None:
            
            _query_params.append(('file_sets.summary', file_sets_summary))
            
        if institutional_certificates_id is not None:
            
            _query_params.append(('institutional_certificates.@id', institutional_certificates_id))
            
        if institutional_certificates_certificate_identifier is not None:
            
            _query_params.append(('institutional_certificates.certificate_identifier', institutional_certificates_certificate_identifier))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if modifications_id is not None:
            
            _query_params.append(('modifications.@id', modifications_id))
            
        if modifications_status is not None:
            
            _query_params.append(('modifications.status', modifications_status))
            
        if modifications_summary is not None:
            
            _query_params.append(('modifications.summary', modifications_summary))
            
        if multiplexed_in_id is not None:
            
            _query_params.append(('multiplexed_in.@id', multiplexed_in_id))
            
        if multiplexed_in_accession is not None:
            
            _query_params.append(('multiplexed_in.accession', multiplexed_in_accession))
            
        if sample_terms_id is not None:
            
            _query_params.append(('sample_terms.@id', sample_terms_id))
            
        if sample_terms_term_name is not None:
            
            _query_params.append(('sample_terms.term_name', sample_terms_term_name))
            
        if sorted_from_id is not None:
            
            _query_params.append(('sorted_from.@id', sorted_from_id))
            
        if sorted_from_accession is not None:
            
            _query_params.append(('sorted_from.accession', sorted_from_accession))
            
        if sources_id is not None:
            
            _query_params.append(('sources.@id', sources_id))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        if treatments_id is not None:
            
            _query_params.append(('treatments.@id', treatments_id))
            
        if treatments_purpose is not None:
            
            _query_params.append(('treatments.purpose', treatments_purpose))
            
        if treatments_status is not None:
            
            _query_params.append(('treatments.status', treatments_status))
            
        if treatments_summary is not None:
            
            _query_params.append(('treatments.summary', treatments_summary))
            
        if treatments_treatment_type is not None:
            
            _query_params.append(('treatments.treatment_type', treatments_treatment_type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/whole-organisms/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def workflows(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        source_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by source_url")] = None,
        workflow_repositories: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow_repositories")] = None,
        workflow_version: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by workflow_version")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_steps: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_steps")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        standards_page_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.@id")] = None,
        standards_page_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WorkflowResults:
        """List items in the Workflow collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param workflow_repositories: Filter by workflow_repositories
        :type workflow_repositories: List[str]
        :param workflow_version: Filter by workflow_version
        :type workflow_version: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_steps: Filter by analysis_steps
        :type analysis_steps: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param standards_page_id: Filter by standards_page.@id
        :type standards_page_id: List[str]
        :param standards_page_title: Filter by standards_page.title
        :type standards_page_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            source_url=source_url,
            workflow_repositories=workflow_repositories,
            workflow_version=workflow_version,
            id=id,
            summary=summary,
            analysis_steps=analysis_steps,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            standards_page_id=standards_page_id,
            standards_page_title=standards_page_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkflowResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def workflows_with_http_info(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        source_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by source_url")] = None,
        workflow_repositories: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow_repositories")] = None,
        workflow_version: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by workflow_version")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_steps: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_steps")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        standards_page_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.@id")] = None,
        standards_page_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WorkflowResults]:
        """List items in the Workflow collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param workflow_repositories: Filter by workflow_repositories
        :type workflow_repositories: List[str]
        :param workflow_version: Filter by workflow_version
        :type workflow_version: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_steps: Filter by analysis_steps
        :type analysis_steps: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param standards_page_id: Filter by standards_page.@id
        :type standards_page_id: List[str]
        :param standards_page_title: Filter by standards_page.title
        :type standards_page_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            source_url=source_url,
            workflow_repositories=workflow_repositories,
            workflow_version=workflow_version,
            id=id,
            summary=summary,
            analysis_steps=analysis_steps,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            standards_page_id=standards_page_id,
            standards_page_title=standards_page_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkflowResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def workflows_without_preload_content(
        self,
        query: Annotated[Optional[StrictStr], Field(description="Query string for searching.")] = None,
        limit: Annotated[Optional[Any], Field(description="Maximum number of results to return. Default is 25. Use 'all' for all results.")] = None,
        sort: Annotated[Optional[List[StrictStr]], Field(description="Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.")] = None,
        release_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by release_timestamp")] = None,
        publications: Annotated[Optional[List[StrictStr]], Field(description="Filter by publications")] = None,
        publication_identifiers: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by publication_identifiers")] = None,
        documents: Annotated[Optional[List[StrictStr]], Field(description="Filter by documents")] = None,
        accession: Annotated[Optional[List[StrictStr]], Field(description="Filter by accession")] = None,
        alternate_accessions: Annotated[Optional[List[StrictStr]], Field(description="Filter by alternate_accessions")] = None,
        collections: Annotated[Optional[List[StrictStr]], Field(description="Filter by collections")] = None,
        status: Annotated[Optional[List[StrictStr]], Field(description="Filter by status")] = None,
        revoke_detail: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by revoke_detail")] = None,
        uuid: Annotated[Optional[List[StrictStr]], Field(description="Filter by uuid")] = None,
        notes: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by notes")] = None,
        aliases: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by aliases")] = None,
        creation_timestamp: Annotated[Optional[List[StrictStr]], Field(description="Filter by creation_timestamp")] = None,
        submitter_comment: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by submitter_comment")] = None,
        description: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by description")] = None,
        name: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by name")] = None,
        source_url: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Filter by source_url")] = None,
        workflow_repositories: Annotated[Optional[List[StrictStr]], Field(description="Filter by workflow_repositories")] = None,
        workflow_version: Annotated[Optional[List[Annotated[int, Field(strict=True, ge=1)]]], Field(description="Filter by workflow_version")] = None,
        id: Annotated[Optional[List[StrictStr]], Field(description="Filter by @id")] = None,
        summary: Annotated[Optional[List[StrictStr]], Field(description="Filter by summary")] = None,
        analysis_steps: Annotated[Optional[List[StrictStr]], Field(description="Filter by analysis_steps")] = None,
        award_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.@id")] = None,
        award_component: Annotated[Optional[List[StrictStr]], Field(description="Filter by award.component")] = None,
        lab_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.@id")] = None,
        lab_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by lab.title")] = None,
        standards_page_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.@id")] = None,
        standards_page_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by standards_page.title")] = None,
        submitted_by_id: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.@id")] = None,
        submitted_by_title: Annotated[Optional[List[StrictStr]], Field(description="Filter by submitted_by.title")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List items in the Workflow collection.

        Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.

        :param query: Query string for searching.
        :type query: str
        :param limit: Maximum number of results to return. Default is 25. Use 'all' for all results.
        :type limit: Limit
        :param sort: Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
        :type sort: List[str]
        :param release_timestamp: Filter by release_timestamp
        :type release_timestamp: List[str]
        :param publications: Filter by publications
        :type publications: List[str]
        :param publication_identifiers: Filter by publication_identifiers
        :type publication_identifiers: List[str]
        :param documents: Filter by documents
        :type documents: List[str]
        :param accession: Filter by accession
        :type accession: List[str]
        :param alternate_accessions: Filter by alternate_accessions
        :type alternate_accessions: List[str]
        :param collections: Filter by collections
        :type collections: List[str]
        :param status: Filter by status
        :type status: List[str]
        :param revoke_detail: Filter by revoke_detail
        :type revoke_detail: List[str]
        :param uuid: Filter by uuid
        :type uuid: List[str]
        :param notes: Filter by notes
        :type notes: List[str]
        :param aliases: Filter by aliases
        :type aliases: List[str]
        :param creation_timestamp: Filter by creation_timestamp
        :type creation_timestamp: List[str]
        :param submitter_comment: Filter by submitter_comment
        :type submitter_comment: List[str]
        :param description: Filter by description
        :type description: List[str]
        :param name: Filter by name
        :type name: List[str]
        :param source_url: Filter by source_url
        :type source_url: List[str]
        :param workflow_repositories: Filter by workflow_repositories
        :type workflow_repositories: List[str]
        :param workflow_version: Filter by workflow_version
        :type workflow_version: List[int]
        :param id: Filter by @id
        :type id: List[str]
        :param summary: Filter by summary
        :type summary: List[str]
        :param analysis_steps: Filter by analysis_steps
        :type analysis_steps: List[str]
        :param award_id: Filter by award.@id
        :type award_id: List[str]
        :param award_component: Filter by award.component
        :type award_component: List[str]
        :param lab_id: Filter by lab.@id
        :type lab_id: List[str]
        :param lab_title: Filter by lab.title
        :type lab_title: List[str]
        :param standards_page_id: Filter by standards_page.@id
        :type standards_page_id: List[str]
        :param standards_page_title: Filter by standards_page.title
        :type standards_page_title: List[str]
        :param submitted_by_id: Filter by submitted_by.@id
        :type submitted_by_id: List[str]
        :param submitted_by_title: Filter by submitted_by.title
        :type submitted_by_title: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._workflows_serialize(
            query=query,
            limit=limit,
            sort=sort,
            release_timestamp=release_timestamp,
            publications=publications,
            publication_identifiers=publication_identifiers,
            documents=documents,
            accession=accession,
            alternate_accessions=alternate_accessions,
            collections=collections,
            status=status,
            revoke_detail=revoke_detail,
            uuid=uuid,
            notes=notes,
            aliases=aliases,
            creation_timestamp=creation_timestamp,
            submitter_comment=submitter_comment,
            description=description,
            name=name,
            source_url=source_url,
            workflow_repositories=workflow_repositories,
            workflow_version=workflow_version,
            id=id,
            summary=summary,
            analysis_steps=analysis_steps,
            award_id=award_id,
            award_component=award_component,
            lab_id=lab_id,
            lab_title=lab_title,
            standards_page_id=standards_page_id,
            standards_page_title=standards_page_title,
            submitted_by_id=submitted_by_id,
            submitted_by_title=submitted_by_title,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "WorkflowResults",
            '400': "object",
            '404': "NoResultsResponse",
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _workflows_serialize(
        self,
        query,
        limit,
        sort,
        release_timestamp,
        publications,
        publication_identifiers,
        documents,
        accession,
        alternate_accessions,
        collections,
        status,
        revoke_detail,
        uuid,
        notes,
        aliases,
        creation_timestamp,
        submitter_comment,
        description,
        name,
        source_url,
        workflow_repositories,
        workflow_version,
        id,
        summary,
        analysis_steps,
        award_id,
        award_component,
        lab_id,
        lab_title,
        standards_page_id,
        standards_page_title,
        submitted_by_id,
        submitted_by_title,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort': 'multi',
            'release_timestamp': 'multi',
            'publications': 'multi',
            'publication_identifiers': 'multi',
            'documents': 'multi',
            'accession': 'multi',
            'alternate_accessions': 'multi',
            'collections': 'multi',
            'status': 'multi',
            'revoke_detail': 'multi',
            'uuid': 'multi',
            'notes': 'multi',
            'aliases': 'multi',
            'creation_timestamp': 'multi',
            'submitter_comment': 'multi',
            'description': 'multi',
            'name': 'multi',
            'source_url': 'multi',
            'workflow_repositories': 'multi',
            'workflow_version': 'multi',
            '@id': 'multi',
            'summary': 'multi',
            'analysis_steps': 'multi',
            'award.@id': 'multi',
            'award.component': 'multi',
            'lab.@id': 'multi',
            'lab.title': 'multi',
            'standards_page.@id': 'multi',
            'standards_page.title': 'multi',
            'submitted_by.@id': 'multi',
            'submitted_by.title': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if release_timestamp is not None:
            
            _query_params.append(('release_timestamp', release_timestamp))
            
        if publications is not None:
            
            _query_params.append(('publications', publications))
            
        if publication_identifiers is not None:
            
            _query_params.append(('publication_identifiers', publication_identifiers))
            
        if documents is not None:
            
            _query_params.append(('documents', documents))
            
        if accession is not None:
            
            _query_params.append(('accession', accession))
            
        if alternate_accessions is not None:
            
            _query_params.append(('alternate_accessions', alternate_accessions))
            
        if collections is not None:
            
            _query_params.append(('collections', collections))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if revoke_detail is not None:
            
            _query_params.append(('revoke_detail', revoke_detail))
            
        if uuid is not None:
            
            _query_params.append(('uuid', uuid))
            
        if notes is not None:
            
            _query_params.append(('notes', notes))
            
        if aliases is not None:
            
            _query_params.append(('aliases', aliases))
            
        if creation_timestamp is not None:
            
            _query_params.append(('creation_timestamp', creation_timestamp))
            
        if submitter_comment is not None:
            
            _query_params.append(('submitter_comment', submitter_comment))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if source_url is not None:
            
            _query_params.append(('source_url', source_url))
            
        if workflow_repositories is not None:
            
            _query_params.append(('workflow_repositories', workflow_repositories))
            
        if workflow_version is not None:
            
            _query_params.append(('workflow_version', workflow_version))
            
        if id is not None:
            
            _query_params.append(('@id', id))
            
        if summary is not None:
            
            _query_params.append(('summary', summary))
            
        if analysis_steps is not None:
            
            _query_params.append(('analysis_steps', analysis_steps))
            
        if award_id is not None:
            
            _query_params.append(('award.@id', award_id))
            
        if award_component is not None:
            
            _query_params.append(('award.component', award_component))
            
        if lab_id is not None:
            
            _query_params.append(('lab.@id', lab_id))
            
        if lab_title is not None:
            
            _query_params.append(('lab.title', lab_title))
            
        if standards_page_id is not None:
            
            _query_params.append(('standards_page.@id', standards_page_id))
            
        if standards_page_title is not None:
            
            _query_params.append(('standards_page.title', standards_page_title))
            
        if submitted_by_id is not None:
            
            _query_params.append(('submitted_by.@id', submitted_by_id))
            
        if submitted_by_title is not None:
            
            _query_params.append(('submitted_by.title', submitted_by_title))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # Set client side default value of Query Param "frame".
        _query_params.append(('frame', 'object'))

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/workflows/@@listing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


