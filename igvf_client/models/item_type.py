# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class ItemType(str, Enum):
    """
    ItemType
    """

    """
    allowed enum values
    """
    ACCESSKEY = 'AccessKey'
    ANALYSISSTEP = 'AnalysisStep'
    ANALYSISSTEPVERSION = 'AnalysisStepVersion'
    AWARD = 'Award'
    BIOMARKER = 'Biomarker'
    DOCUMENT = 'Document'
    HUMANDONOR = 'HumanDonor'
    RODENTDONOR = 'RodentDonor'
    ALIGNMENTFILE = 'AlignmentFile'
    CONFIGURATIONFILE = 'ConfigurationFile'
    GENOMEBROWSERANNOTATIONFILE = 'GenomeBrowserAnnotationFile'
    IMAGEFILE = 'ImageFile'
    MATRIXFILE = 'MatrixFile'
    MODELFILE = 'ModelFile'
    REFERENCEFILE = 'ReferenceFile'
    SEQUENCEFILE = 'SequenceFile'
    SIGNALFILE = 'SignalFile'
    TABULARFILE = 'TabularFile'
    ANALYSISSET = 'AnalysisSet'
    AUXILIARYSET = 'AuxiliarySet'
    CONSTRUCTLIBRARYSET = 'ConstructLibrarySet'
    CURATEDSET = 'CuratedSet'
    MEASUREMENTSET = 'MeasurementSet'
    MODELSET = 'ModelSet'
    PREDICTIONSET = 'PredictionSet'
    GENE = 'Gene'
    IMAGE = 'Image'
    INSTITUTIONALCERTIFICATE = 'InstitutionalCertificate'
    LAB = 'Lab'
    CRISPRMODIFICATION = 'CrisprModification'
    MODIFICATION = 'Modification'
    ASSAYTERM = 'AssayTerm'
    PHENOTYPETERM = 'PhenotypeTerm'
    PLATFORMTERM = 'PlatformTerm'
    SAMPLETERM = 'SampleTerm'
    OPENREADINGFRAME = 'OpenReadingFrame'
    PAGE = 'Page'
    PHENOTYPICFEATURE = 'PhenotypicFeature'
    PUBLICATION = 'Publication'
    INVITROSYSTEM = 'InVitroSystem'
    MULTIPLEXEDSAMPLE = 'MultiplexedSample'
    PRIMARYCELL = 'PrimaryCell'
    TECHNICALSAMPLE = 'TechnicalSample'
    TISSUE = 'Tissue'
    WHOLEORGANISM = 'WholeOrganism'
    SOFTWARE = 'Software'
    SOFTWAREVERSION = 'SoftwareVersion'
    SOURCE = 'Source'
    TREATMENT = 'Treatment'
    USER = 'User'
    WORKFLOW = 'Workflow'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ItemType from a JSON string"""
        return cls(json.loads(json_str))


