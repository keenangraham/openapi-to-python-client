/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A CRISPR modification altering sample genomic material. For example, CRISPRi dCas9-KRAB modification.
*/
export class CrisprModification {
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * The originating lab(s) or vendor(s).
    */
    'sources'?: Set<string>;
    /**
    * The lot identifier provided by the originating lab or vendor.
    */
    'lotId'?: string;
    /**
    * The product or catalog identifier provided following deposition to addgene.org.
    */
    'productId'?: string;
    /**
    * Documents that provide additional information (not data file).
    */
    'documents'?: Set<string>;
    /**
    * The status of the metadata object.
    */
    'status'?: CrisprModification.StatusEnum;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * A boolean indicating whether the modification has been activated by a chemical agent.
    */
    'activated'?: boolean;
    /**
    * The CHEBI identifier for the activating agent of the modification.
    */
    'activatingAgentTermId'?: string;
    /**
    * The CHEBI name for the activating agent of the modification.
    */
    'activatingAgentTermName'?: string;
    /**
    * The purpose or intended effect of a modification.
    */
    'modality'?: CrisprModification.ModalityEnum;
    /**
    * The name of the CRISPR associated protein used in the modification.
    */
    'cas'?: CrisprModification.CasEnum;
    /**
    * The name of the molecule fused to a Cas protein.
    */
    'fusedDomain'?: CrisprModification.FusedDomainEnum;
    /**
    * The tagged protein in modifications in which the Cas nuclease is fused to an antibody.
    */
    'taggedProtein'?: string;
    /**
    * The originating species of the Cas nuclease.
    */
    'casSpecies'?: CrisprModification.CasSpeciesEnum;
    'id'?: string;
    'type'?: Array<string>;
    'summary'?: string;
    /**
    * The biosamples which have been modified with this modification.
    */
    'biosamplesModified'?: Set<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string"
        },
        {
            "name": "sources",
            "baseName": "sources",
            "type": "Set<string>"
        },
        {
            "name": "lotId",
            "baseName": "lot_id",
            "type": "string"
        },
        {
            "name": "productId",
            "baseName": "product_id",
            "type": "string"
        },
        {
            "name": "documents",
            "baseName": "documents",
            "type": "Set<string>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "CrisprModification.StatusEnum"
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string"
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string"
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string"
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "activated",
            "baseName": "activated",
            "type": "boolean"
        },
        {
            "name": "activatingAgentTermId",
            "baseName": "activating_agent_term_id",
            "type": "string"
        },
        {
            "name": "activatingAgentTermName",
            "baseName": "activating_agent_term_name",
            "type": "string"
        },
        {
            "name": "modality",
            "baseName": "modality",
            "type": "CrisprModification.ModalityEnum"
        },
        {
            "name": "cas",
            "baseName": "cas",
            "type": "CrisprModification.CasEnum"
        },
        {
            "name": "fusedDomain",
            "baseName": "fused_domain",
            "type": "CrisprModification.FusedDomainEnum"
        },
        {
            "name": "taggedProtein",
            "baseName": "tagged_protein",
            "type": "string"
        },
        {
            "name": "casSpecies",
            "baseName": "cas_species",
            "type": "CrisprModification.CasSpeciesEnum"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        },
        {
            "name": "biosamplesModified",
            "baseName": "biosamples_modified",
            "type": "Set<string>"
        }    ];

    static getAttributeTypeMap() {
        return CrisprModification.attributeTypeMap;
    }
}

export namespace CrisprModification {
    export enum StatusEnum {
        Archived = <any> 'archived',
        Deleted = <any> 'deleted',
        InProgress = <any> 'in progress',
        Released = <any> 'released'
    }
    export enum ModalityEnum {
        Activation = <any> 'activation',
        BaseEditing = <any> 'base editing',
        Cutting = <any> 'cutting',
        Interference = <any> 'interference',
        Knockout = <any> 'knockout',
        Localizing = <any> 'localizing',
        PrimeEditing = <any> 'prime editing'
    }
    export enum CasEnum {
        Cas9 = <any> 'Cas9',
        Cas12a = <any> 'Cas12a',
        Cas13 = <any> 'Cas13',
        DCas9 = <any> 'dCas9',
        NCas9 = <any> 'nCas9',
        SpG = <any> 'SpG',
        SpRy = <any> 'SpRY'
    }
    export enum FusedDomainEnum {
        _2xVp64 = <any> '2xVP64',
        _3xVp64 = <any> '3xVP64',
        Abe8e = <any> 'ABE8e',
        Abe820 = <any> 'ABE8.20',
        AntiFlag = <any> 'ANTI-FLAG',
        Be4 = <any> 'BE4',
        Be4max = <any> 'BE4max',
        EA3A = <any> 'eA3A',
        EA3AT31A = <any> 'eA3A-T31A',
        EA3AT44DS45A = <any> 'eA3A-T44D-S45A',
        Kox1Krab = <any> 'KOX1-KRAB',
        MMlvRtPe2 = <any> 'M-MLV RT (PE2)',
        P300 = <any> 'p300',
        TdCbe = <any> 'TdCBE',
        TdCgbe = <any> 'TdCGBE',
        TdDe = <any> 'TdDE',
        Vph = <any> 'VPH',
        Vp64 = <any> 'VP64',
        Vp64P65RtaVpr = <any> 'VP64-p65-Rta (VPR)',
        Zim3Krab = <any> 'ZIM3-KRAB'
    }
    export enum CasSpeciesEnum {
        StreptococcusPyogenesSp = <any> 'Streptococcus pyogenes (Sp)',
        StaphylococcusAureusSa = <any> 'Staphylococcus aureus (Sa)',
        CampylobacterJejuniCj = <any> 'Campylobacter jejuni (Cj)',
        NeisseriaMeningitidisNm = <any> 'Neisseria meningitidis (Nm)'
    }
}
