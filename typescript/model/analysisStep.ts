/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A step in a computational analysis workflow. For example, a sequence alignment step that represents the phase of the computational analysis in which sequenced reads are being aligned to the reference genome.
*/
export class AnalysisStep {
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * The status of the metadata object.
    */
    'status'?: AnalysisStep.StatusEnum;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The classification of the software.
    */
    'analysisStepTypes'?: Set<AnalysisStep.AnalysisStepTypesEnum>;
    /**
    * Unique lowercased label of the analysis step that includes the relevant assays, the software used, and the purpose of the step, e.g. rampage-grit-peak-calling-step
    */
    'stepLabel'?: string;
    /**
    * The preferred viewable name of the analysis step, likely the same as the step label.
    */
    'title'?: string;
    /**
    * The computational workflow in which this analysis step belongs.
    */
    'workflow'?: string;
    /**
    * The precursor steps.
    */
    'parents'?: Set<string>;
    /**
    * The content types used as input for the analysis step.
    */
    'inputContentTypes'?: Set<string>;
    /**
    * The content types produced as output by the analysis step.
    */
    'outputContentTypes'?: Set<string>;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the object.
    */
    'summary'?: string;
    /**
    * Full name of the analysis step.
    */
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AnalysisStep.StatusEnum"
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string"
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string"
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string"
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "analysisStepTypes",
            "baseName": "analysis_step_types",
            "type": "Set<AnalysisStep.AnalysisStepTypesEnum>"
        },
        {
            "name": "stepLabel",
            "baseName": "step_label",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "workflow",
            "baseName": "workflow",
            "type": "string"
        },
        {
            "name": "parents",
            "baseName": "parents",
            "type": "Set<string>"
        },
        {
            "name": "inputContentTypes",
            "baseName": "input_content_types",
            "type": "Set<string>"
        },
        {
            "name": "outputContentTypes",
            "baseName": "output_content_types",
            "type": "Set<string>"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AnalysisStep.attributeTypeMap;
    }
}

export namespace AnalysisStep {
    export enum StatusEnum {
        Archived = <any> 'archived',
        Deleted = <any> 'deleted',
        InProgress = <any> 'in progress',
        Released = <any> 'released'
    }
    export enum AnalysisStepTypesEnum {
        Alignment = <any> 'alignment',
        FileFormatConversion = <any> 'file format conversion',
        SignalGeneration = <any> 'signal generation'
    }
}
