/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A grant providing financial support for a scientific project. For example, HG012076 supporting \"Single-cell Mapping Center for Human Regulatory Elements and Gene Activity.\"
*/
export class Award {
    /**
    * The status of the metadata object.
    */
    'status'?: Award.StatusEnum;
    /**
    * An external resource with additional information.
    */
    'url'?: string;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The grant name from the NIH database, if applicable.
    */
    'title'?: string;
    /**
    * The official grant number from the NIH database, if applicable
    */
    'name'?: string;
    /**
    * The date when the award begins.
    */
    'startDate'?: string;
    /**
    * The date when the award concludes.
    */
    'endDate'?: string;
    /**
    * Principal Investigator(s) of the grant.
    */
    'pis'?: Set<string>;
    /**
    * The contact Principal Investigator of the grant.
    */
    'contactPi'?: string;
    /**
    * The collection of biological data related to a single initiative, originating from a consortium.
    */
    'project'?: Award.ProjectEnum;
    /**
    * The group that determines which set of data the user has permission to view.
    */
    'viewingGroup'?: Award.ViewingGroupEnum;
    /**
    * The project component the award is associated with.
    */
    'component'?: Award.ComponentEnum;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the award.
    */
    'summary'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "Award.StatusEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string"
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "startDate",
            "baseName": "start_date",
            "type": "string"
        },
        {
            "name": "endDate",
            "baseName": "end_date",
            "type": "string"
        },
        {
            "name": "pis",
            "baseName": "pis",
            "type": "Set<string>"
        },
        {
            "name": "contactPi",
            "baseName": "contact_pi",
            "type": "string"
        },
        {
            "name": "project",
            "baseName": "project",
            "type": "Award.ProjectEnum"
        },
        {
            "name": "viewingGroup",
            "baseName": "viewing_group",
            "type": "Award.ViewingGroupEnum"
        },
        {
            "name": "component",
            "baseName": "component",
            "type": "Award.ComponentEnum"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Award.attributeTypeMap;
    }
}

export namespace Award {
    export enum StatusEnum {
        Current = <any> 'current',
        Deleted = <any> 'deleted',
        Disabled = <any> 'disabled'
    }
    export enum ProjectEnum {
        Community = <any> 'community',
        Encode = <any> 'ENCODE',
        Igvf = <any> 'IGVF'
    }
    export enum ViewingGroupEnum {
        Community = <any> 'community',
        Igvf = <any> 'IGVF'
    }
    export enum ComponentEnum {
        Affiliate = <any> 'affiliate',
        DataAnalysis = <any> 'data analysis',
        DataCoordination = <any> 'data coordination',
        FunctionalCharacterization = <any> 'functional characterization',
        Mapping = <any> 'mapping',
        Networks = <any> 'networks',
        PredictiveModeling = <any> 'predictive modeling'
    }
}
