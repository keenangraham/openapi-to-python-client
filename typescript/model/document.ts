/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Attachment } from './attachment';

/**
* A document with additional information regarding another object submitted to the data portal. For example, a plasmid map document associated with a transduced cell line sample.
*/
export class Document {
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * The status of the metadata object.
    */
    'status'?: Document.StatusEnum;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    'attachment'?: Attachment;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The category that best describes the document.
    */
    'documentType'?: Document.DocumentTypeEnum;
    /**
    * The method used for the characterization.
    */
    'characterizationMethod'?: Document.CharacterizationMethodEnum;
    /**
    * External resources with additional information to the document.
    */
    'urls'?: Set<string>;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the document.
    */
    'summary'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Document.StatusEnum"
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string"
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string"
        },
        {
            "name": "attachment",
            "baseName": "attachment",
            "type": "Attachment"
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string"
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "documentType",
            "baseName": "document_type",
            "type": "Document.DocumentTypeEnum"
        },
        {
            "name": "characterizationMethod",
            "baseName": "characterization_method",
            "type": "Document.CharacterizationMethodEnum"
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Set<string>"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Document.attributeTypeMap;
    }
}

export namespace Document {
    export enum StatusEnum {
        Archived = <any> 'archived',
        Deleted = <any> 'deleted',
        InProgress = <any> 'in progress',
        Released = <any> 'released'
    }
    export enum DocumentTypeEnum {
        CellFateChangeProtocol = <any> 'cell fate change protocol',
        Characterization = <any> 'characterization',
        ComputationalProtocol = <any> 'computational protocol',
        ExperimentalProtocol = <any> 'experimental protocol',
        FileFormatSpecification = <any> 'file format specification',
        Image = <any> 'image',
        ModelSourceData = <any> 'model source data',
        PlateMap = <any> 'plate map',
        PlasmidMap = <any> 'plasmid map',
        PlasmidSequence = <any> 'plasmid sequence',
        Standards = <any> 'standards'
    }
    export enum CharacterizationMethodEnum {
        Facs = <any> 'FACS',
        Immunoblot = <any> 'immunoblot',
        Immunofluorescence = <any> 'immunofluorescence',
        Immunoprecipitation = <any> 'immunoprecipitation',
        MassSpectrometry = <any> 'mass spectrometry',
        Pcr = <any> 'PCR',
        RestrictionDigest = <any> 'restriction digest',
        RtQPcr = <any> 'RT-qPCR',
        Sequencing = <any> 'sequencing'
    }
}
