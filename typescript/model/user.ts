/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A user of IGVF data portal who is a member or affiliate member of IGVF.
*/
export class User {
    /**
    * The status of the metadata object.
    */
    'status'?: User.StatusEnum;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The email associated with the user\'s account.
    */
    'email'?: string;
    /**
    * The user\'s first (given) name.
    */
    'firstName'?: string;
    /**
    * The user\'s last (family) name.
    */
    'lastName'?: string;
    /**
    * Lab user is primarily associated with.
    */
    'lab'?: string;
    /**
    * Labs user is authorized to submit data for.
    */
    'submitsFor'?: Set<string>;
    /**
    * Additional access control groups
    */
    'groups'?: Set<User.GroupsEnum>;
    /**
    * The group that determines which set of data the user has permission to view.
    */
    'viewingGroups'?: Set<User.ViewingGroupsEnum>;
    /**
    * The role of the user in their lab or organization.
    */
    'jobTitle'?: User.JobTitleEnum;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the object.
    */
    'summary'?: string;
    /**
    * The full name of the user.
    */
    'title'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "User.StatusEnum"
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string"
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string"
        },
        {
            "name": "submitsFor",
            "baseName": "submits_for",
            "type": "Set<string>"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Set<User.GroupsEnum>"
        },
        {
            "name": "viewingGroups",
            "baseName": "viewing_groups",
            "type": "Set<User.ViewingGroupsEnum>"
        },
        {
            "name": "jobTitle",
            "baseName": "job_title",
            "type": "User.JobTitleEnum"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return User.attributeTypeMap;
    }
}

export namespace User {
    export enum StatusEnum {
        Current = <any> 'current',
        Deleted = <any> 'deleted',
        Disabled = <any> 'disabled'
    }
    export enum GroupsEnum {
        Admin = <any> 'admin',
        ReadOnlyAdmin = <any> 'read-only-admin',
        Verified = <any> 'verified'
    }
    export enum ViewingGroupsEnum {
        Community = <any> 'community',
        Igvf = <any> 'IGVF'
    }
    export enum JobTitleEnum {
        PrincipalInvestigator = <any> 'Principal Investigator',
        CoInvestigator = <any> 'Co-Investigator',
        ProjectManager = <any> 'Project Manager',
        Submitter = <any> 'Submitter',
        PostDoc = <any> 'Post Doc',
        DataWrangler = <any> 'Data Wrangler',
        Scientist = <any> 'Scientist',
        ComputationalScientist = <any> 'Computational Scientist',
        SoftwareDeveloper = <any> 'Software Developer',
        NhgriStaffMember = <any> 'NHGRI staff member',
        Other = <any> 'Other'
    }
}
