/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* A file containing sequencing results in bam, fastq, or pod5 formats.
*/
export class SequenceFile {
    /**
    * Boolean value, indicating the file being controlled access, if true.
    */
    'controlledAccess'?: boolean;
    /**
    * URL linking to the controlled access file that has been deposited at AnVIL workspace.
    */
    'anvilUrl'?: string;
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * Documents that provide additional information (not data file).
    */
    'documents'?: Set<string>;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    /**
    * A unique identifier to be used to reference the object prefixed with IGVF.
    */
    'accession'?: string;
    /**
    * Accessions previously assigned to objects that have been merged with this object.
    */
    'alternateAccessions'?: Set<string>;
    /**
    * Some samples are part of particular data collections.
    */
    'collections'?: Set<SequenceFileCollectionsEnum>;
    /**
    * The status of the metadata object.
    */
    'status'?: SequenceFileStatusEnum;
    /**
    * Explanation of why an object was transitioned to the revoked status.
    */
    'revokeDetail'?: string;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The analysis step version of the file.
    */
    'analysisStepVersion'?: string;
    /**
    * The MD5sum of the uncompressed file.
    */
    'contentMd5sum'?: string;
    /**
    * The type of content in the file.
    */
    'contentType'?: string;
    /**
    * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF file objects.
    */
    'dbxrefs'?: Set<string>;
    /**
    * The files participating as inputs into software to produce this output file.
    */
    'derivedFrom'?: Set<string>;
    /**
    * The file format or extension of the file.
    */
    'fileFormat'?: SequenceFileFileFormatEnum;
    /**
    * Document that further explains the file format.
    */
    'fileFormatSpecifications'?: Set<string>;
    /**
    * The file set that this file belongs to.
    */
    'fileSet'?: string;
    /**
    * File size specified in bytes.
    */
    'fileSize'?: number;
    /**
    * The md5sum of the file being transferred.
    */
    'md5sum'?: string;
    /**
    * Original name of the file.
    */
    'submittedFileName'?: string;
    /**
    * The upload/validation status of the file.
    */
    'uploadStatus'?: SequenceFileUploadStatusEnum;
    /**
    * Explanation of why the file failed the automated content checks.
    */
    'validationErrorDetail'?: string;
    /**
    * The alphanumeric identifier for the flowcell of a sequencing machine.
    */
    'flowcellId'?: string;
    /**
    * An integer identifying the lane of a sequencing machine.
    */
    'lane'?: number;
    /**
    * Number of reads in a fastq file.
    */
    'readCount'?: number;
    /**
    * For high-throughput sequencing, the minimum number of contiguous nucleotides determined by sequencing.
    */
    'minimumReadLength'?: number;
    /**
    * For high-throughput sequencing, the maximum number of contiguous nucleotides determined by sequencing.
    */
    'maximumReadLength'?: number;
    /**
    * For high-throughput sequencing, the mean number of contiguous nucleotides determined by sequencing.
    */
    'meanReadLength'?: number;
    /**
    * The measurement device used to produce sequencing data.
    */
    'sequencingPlatform'?: string;
    /**
    * A reagent kit used with a library to prepare it for sequencing.
    */
    'sequencingKit'?: SequenceFileSequencingKitEnum;
    /**
    * An ordinal number indicating which sequencing run of the associated library that the file belongs to.
    */
    'sequencingRun'?: number;
    /**
    * The read type of the file. Relevant only for files produced using an Illumina sequencing platform.
    */
    'illuminaReadType'?: SequenceFileIlluminaReadTypeEnum;
    /**
    * An Illumina index associated with the file.
    */
    'index'?: string;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the sequence file.
    */
    'summary'?: string;
    /**
    * Construct library set(s) that this file was used for in insert design.
    */
    'integratedIn'?: Set<string>;
    /**
    * The files which are derived from this file.
    */
    'inputFileFor'?: Set<string>;
    /**
    * File Set(s) that this file is a gene list for.
    */
    'geneListFor'?: Set<string>;
    /**
    * File Set(s) that this file is a loci list for.
    */
    'lociListFor'?: Set<string>;
    /**
    * The download path to obtain file.
    */
    'href'?: string;
    /**
    * The S3 URI of public file object.
    */
    's3Uri'?: string;
    /**
    * The upload credentials for S3 to submit the file content.
    */
    'uploadCredentials'?: any;
    /**
    * Link(s) to the associated seqspec YAML configuration file(s).
    */
    'seqspecs'?: Set<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "controlledAccess",
            "baseName": "controlled_access",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "anvilUrl",
            "baseName": "anvil_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "documents",
            "baseName": "documents",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string",
            "format": ""
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string",
            "format": ""
        },
        {
            "name": "accession",
            "baseName": "accession",
            "type": "string",
            "format": ""
        },
        {
            "name": "alternateAccessions",
            "baseName": "alternate_accessions",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "collections",
            "baseName": "collections",
            "type": "Set<SequenceFileCollectionsEnum>",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "SequenceFileStatusEnum",
            "format": ""
        },
        {
            "name": "revokeDetail",
            "baseName": "revoke_detail",
            "type": "string",
            "format": ""
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string",
            "format": ""
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string",
            "format": ""
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string",
            "format": ""
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "analysisStepVersion",
            "baseName": "analysis_step_version",
            "type": "string",
            "format": ""
        },
        {
            "name": "contentMd5sum",
            "baseName": "content_md5sum",
            "type": "string",
            "format": ""
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "dbxrefs",
            "baseName": "dbxrefs",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "derivedFrom",
            "baseName": "derived_from",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "fileFormat",
            "baseName": "file_format",
            "type": "SequenceFileFileFormatEnum",
            "format": ""
        },
        {
            "name": "fileFormatSpecifications",
            "baseName": "file_format_specifications",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "fileSet",
            "baseName": "file_set",
            "type": "string",
            "format": ""
        },
        {
            "name": "fileSize",
            "baseName": "file_size",
            "type": "number",
            "format": ""
        },
        {
            "name": "md5sum",
            "baseName": "md5sum",
            "type": "string",
            "format": ""
        },
        {
            "name": "submittedFileName",
            "baseName": "submitted_file_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "uploadStatus",
            "baseName": "upload_status",
            "type": "SequenceFileUploadStatusEnum",
            "format": ""
        },
        {
            "name": "validationErrorDetail",
            "baseName": "validation_error_detail",
            "type": "string",
            "format": ""
        },
        {
            "name": "flowcellId",
            "baseName": "flowcell_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "lane",
            "baseName": "lane",
            "type": "number",
            "format": ""
        },
        {
            "name": "readCount",
            "baseName": "read_count",
            "type": "number",
            "format": ""
        },
        {
            "name": "minimumReadLength",
            "baseName": "minimum_read_length",
            "type": "number",
            "format": ""
        },
        {
            "name": "maximumReadLength",
            "baseName": "maximum_read_length",
            "type": "number",
            "format": ""
        },
        {
            "name": "meanReadLength",
            "baseName": "mean_read_length",
            "type": "number",
            "format": ""
        },
        {
            "name": "sequencingPlatform",
            "baseName": "sequencing_platform",
            "type": "string",
            "format": ""
        },
        {
            "name": "sequencingKit",
            "baseName": "sequencing_kit",
            "type": "SequenceFileSequencingKitEnum",
            "format": ""
        },
        {
            "name": "sequencingRun",
            "baseName": "sequencing_run",
            "type": "number",
            "format": ""
        },
        {
            "name": "illuminaReadType",
            "baseName": "illumina_read_type",
            "type": "SequenceFileIlluminaReadTypeEnum",
            "format": ""
        },
        {
            "name": "index",
            "baseName": "index",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string",
            "format": ""
        },
        {
            "name": "integratedIn",
            "baseName": "integrated_in",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "inputFileFor",
            "baseName": "input_file_for",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "geneListFor",
            "baseName": "gene_list_for",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "lociListFor",
            "baseName": "loci_list_for",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "href",
            "baseName": "href",
            "type": "string",
            "format": ""
        },
        {
            "name": "s3Uri",
            "baseName": "s3_uri",
            "type": "string",
            "format": ""
        },
        {
            "name": "uploadCredentials",
            "baseName": "upload_credentials",
            "type": "any",
            "format": ""
        },
        {
            "name": "seqspecs",
            "baseName": "seqspecs",
            "type": "Set<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SequenceFile.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum SequenceFileCollectionsEnum {
    ClinGen = 'ClinGen',
    Encode = 'ENCODE',
    GregoR = 'GREGoR',
    IgvfCatalogBetaV01 = 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02 = 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03 = 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04 = 'IGVF_catalog_beta_v0.4',
    MaveDb = 'MaveDB',
    MprAbase = 'MPRAbase',
    Vista = 'Vista'
}
export enum SequenceFileStatusEnum {
    InProgress = 'in progress',
    Released = 'released',
    Deleted = 'deleted',
    Replaced = 'replaced',
    Revoked = 'revoked',
    Archived = 'archived'
}
export enum SequenceFileFileFormatEnum {
    Bam = 'bam',
    Fastq = 'fastq',
    Pod5 = 'pod5'
}
export enum SequenceFileUploadStatusEnum {
    Pending = 'pending',
    FileNotFound = 'file not found',
    Invalidated = 'invalidated',
    Validated = 'validated'
}
export enum SequenceFileSequencingKitEnum {
    HiSeqSbsKitV4 = 'HiSeq SBS Kit v4',
    HiSeqSrClusterKitV4CBotHs = 'HiSeq SR Cluster Kit v4-cBot-HS',
    HiSeqPeClusterKitV4CBotHs = 'HiSeq PE Cluster Kit v4-cBot-HS',
    HiSeqSrRapidClusterKitV2 = 'HiSeq SR Rapid Cluster Kit v2',
    HiSeqPeRapidClusterKitV2 = 'HiSeq PE Rapid Cluster Kit v2',
    HiSeqRapidSbsKitV2 = 'HiSeq Rapid SBS Kit v2',
    HiSeq30004000SbsKit = 'HiSeq 3000/4000 SBS Kit',
    HiSeq30004000SrClusterKit = 'HiSeq 3000/4000 SR Cluster Kit',
    HiSeq30004000PeClusterKit = 'HiSeq 3000/4000 PE Cluster Kit',
    MiSeqReagentKitV2 = 'MiSeq Reagent Kit v2',
    NextSeq500MidOutputKit = 'NextSeq 500 Mid Output Kit',
    NextSeq500HighOutputKit = 'NextSeq 500 High Output Kit',
    NextSeq500MidOutputV2Kit = 'NextSeq 500 Mid Output v2 Kit',
    NextSeq500HighOutputV2Kit = 'NextSeq 500 High Output v2 Kit',
    NextSeq500550MidOutputV25Kit = 'NextSeq 500/550 Mid-Output v2.5 Kit',
    NextSeq500550HighOutputV25Kit = 'NextSeq 500/550 High-Output v2.5 Kit',
    TgNextSeq500550MidOutputKitV25 = 'TG NextSeq 500/550 Mid-Output Kit v2.5',
    TgNextSeq500550HighOutputKitV25 = 'TG NextSeq 500/550 High-Output Kit v2.5',
    NextSeq10002000P1ReagentKit = 'NextSeq 1000/2000 P1 Reagent Kit',
    NextSeq10002000P2ReagentKit = 'NextSeq 1000/2000 P2 Reagent Kit',
    NextSeq10002000P3ReagentKit = 'NextSeq 1000/2000 P3 Reagent Kit',
    NextSeq10002000P1XleapSbsReagentKit = 'NextSeq 1000/2000 P1 XLEAP-SBS Reagent Kit',
    NextSeq10002000P2XleapSbsReagentKit = 'NextSeq 1000/2000 P2 XLEAP-SBS Reagent Kit',
    NextSeq2000P3XleapSbsReagentKit = 'NextSeq 2000 P3 XLEAP-SBS Reagent Kit',
    NextSeq2000P4XleapSbsReagentKit = 'NextSeq 2000 P4 XLEAP-SBS Reagent Kit',
    NovaSeq6000SpReagentKitV15 = 'NovaSeq 6000 SP Reagent Kit v1.5',
    NovaSeq6000S1ReagentKitV15 = 'NovaSeq 6000 S1 Reagent Kit v1.5',
    NovaSeq6000S2ReagentKitV15 = 'NovaSeq 6000 S2 Reagent Kit v1.5',
    NovaSeq6000S4ReagentKitV15 = 'NovaSeq 6000 S4 Reagent Kit v1.5',
    NovaSeqXSeries10BReagentKit = 'NovaSeq X Series 10B Reagent Kit',
    OntLigationSequencingKitV14 = 'ONT Ligation Sequencing Kit V14',
    SequelSequencingKit30 = 'Sequel sequencing kit 3.0',
    SequelIiSequencingKit20 = 'Sequel II sequencing kit 2.0'
}
export enum SequenceFileIlluminaReadTypeEnum {
    R1 = 'R1',
    R2 = 'R2',
    R3 = 'R3',
    I1 = 'I1',
    I2 = 'I2'
}

