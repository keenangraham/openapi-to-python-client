/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Attachment } from '../models/Attachment';
import { HttpFile } from '../http/http';

/**
* A document with additional information regarding another object submitted to the data portal. For example, a plasmid map document associated with a transduced cell line sample.
*/
export class Document {
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * The status of the metadata object.
    */
    'status'?: DocumentStatusEnum;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    'attachment'?: Attachment;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The category that best describes the document.
    */
    'documentType'?: DocumentDocumentTypeEnum;
    /**
    * The method used for the characterization.
    */
    'characterizationMethod'?: DocumentCharacterizationMethodEnum;
    /**
    * External resources with additional information to the document.
    */
    'urls'?: Set<string>;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the document.
    */
    'summary'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "DocumentStatusEnum",
            "format": ""
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string",
            "format": ""
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string",
            "format": ""
        },
        {
            "name": "attachment",
            "baseName": "attachment",
            "type": "Attachment",
            "format": ""
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string",
            "format": ""
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string",
            "format": ""
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string",
            "format": ""
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "documentType",
            "baseName": "document_type",
            "type": "DocumentDocumentTypeEnum",
            "format": ""
        },
        {
            "name": "characterizationMethod",
            "baseName": "characterization_method",
            "type": "DocumentCharacterizationMethodEnum",
            "format": ""
        },
        {
            "name": "urls",
            "baseName": "urls",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Document.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum DocumentStatusEnum {
    Archived = 'archived',
    Deleted = 'deleted',
    InProgress = 'in progress',
    Released = 'released'
}
export enum DocumentDocumentTypeEnum {
    CellFateChangeProtocol = 'cell fate change protocol',
    Characterization = 'characterization',
    ComputationalProtocol = 'computational protocol',
    ExperimentalProtocol = 'experimental protocol',
    FileFormatSpecification = 'file format specification',
    Image = 'image',
    ModelSourceData = 'model source data',
    PlateMap = 'plate map',
    PlasmidMap = 'plasmid map',
    PlasmidSequence = 'plasmid sequence',
    Standards = 'standards'
}
export enum DocumentCharacterizationMethodEnum {
    Facs = 'FACS',
    Immunoblot = 'immunoblot',
    Immunofluorescence = 'immunofluorescence',
    Immunoprecipitation = 'immunoprecipitation',
    MassSpectrometry = 'mass spectrometry',
    Pcr = 'PCR',
    RestrictionDigest = 'restriction digest',
    RtQPcr = 'RT-qPCR',
    Sequencing = 'sequencing'
}

