/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* A phenotypic feature of a donor the sample is coming from. For example, the donorâ€™s height measured at the time of sample collection.
*/
export class PhenotypicFeature {
    /**
    * The date the object was released.
    */
    'releaseTimestamp'?: string;
    /**
    * The status of the metadata object.
    */
    'status'?: PhenotypicFeatureStatusEnum;
    /**
    * Lab associated with the submission.
    */
    'lab'?: string;
    /**
    * Grant associated with the submission.
    */
    'award'?: string;
    /**
    * The version of the JSON schema that the server uses to validate the object.
    */
    'schemaVersion'?: string;
    /**
    * The unique identifier associated with every object.
    */
    'uuid'?: string;
    /**
    * DACC internal notes.
    */
    'notes'?: string;
    /**
    * Lab specific identifiers to reference an object.
    */
    'aliases'?: Set<string>;
    /**
    * The date the object was created.
    */
    'creationTimestamp'?: string;
    /**
    * The user who submitted the object.
    */
    'submittedBy'?: string;
    /**
    * Additional information specified by the submitter to be displayed as a comment on the portal.
    */
    'submitterComment'?: string;
    /**
    * A plain text description of the object.
    */
    'description'?: string;
    /**
    * The phenotypic feature observed for the donor.
    */
    'feature'?: string;
    /**
    * A quantity associated with the phenotypic feature, if applicable.
    */
    'quantity'?: number;
    /**
    * The unit of measurement for a quantity associated with the phenotypic feature.
    */
    'quantityUnits'?: PhenotypicFeatureQuantityUnitsEnum;
    /**
    * The date the feature was observed or measured.
    */
    'observationDate'?: string;
    'id'?: string;
    'type'?: Array<string>;
    /**
    * A summary of the object.
    */
    'summary'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "releaseTimestamp",
            "baseName": "release_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PhenotypicFeatureStatusEnum",
            "format": ""
        },
        {
            "name": "lab",
            "baseName": "lab",
            "type": "string",
            "format": ""
        },
        {
            "name": "award",
            "baseName": "award",
            "type": "string",
            "format": ""
        },
        {
            "name": "schemaVersion",
            "baseName": "schema_version",
            "type": "string",
            "format": ""
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string",
            "format": ""
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string",
            "format": ""
        },
        {
            "name": "aliases",
            "baseName": "aliases",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "submittedBy",
            "baseName": "submitted_by",
            "type": "string",
            "format": ""
        },
        {
            "name": "submitterComment",
            "baseName": "submitter_comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "feature",
            "baseName": "feature",
            "type": "string",
            "format": ""
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number",
            "format": ""
        },
        {
            "name": "quantityUnits",
            "baseName": "quantity_units",
            "type": "PhenotypicFeatureQuantityUnitsEnum",
            "format": ""
        },
        {
            "name": "observationDate",
            "baseName": "observation_date",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PhenotypicFeature.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum PhenotypicFeatureStatusEnum {
    Archived = 'archived',
    Deleted = 'deleted',
    InProgress = 'in progress',
    Released = 'released'
}
export enum PhenotypicFeatureQuantityUnitsEnum {
    Meter = 'meter',
    Micromole = 'micromole',
    Nanogram = 'nanogram',
    Microgram = 'microgram',
    Milligram = 'milligram',
    Gram = 'gram',
    Kilogram = 'kilogram',
    MilliInternationalUnitPerMilliliter = 'milli-International Unit per milliliter',
    PicogramPerMilliliter = 'picogram per milliliter',
    NanogramPerMilliliter = 'nanogram per milliliter',
    MilligramPerDeciliter = 'milligram per deciliter'
}

