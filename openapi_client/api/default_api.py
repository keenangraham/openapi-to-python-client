# coding: utf-8

"""
    IVGF Project Search API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.search_get200_response import SearchGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_get(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File ")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. ")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Limits the number of results. Use 'all' to retrieve all results. ")] = None,
        query: Annotated[Optional[StrictStr], Field(description="General search term that can return multiple object types.")] = None,
        var_field: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchGet200Response:
        """Search for objects in the ENCODE Project

        Search endpoint that accepts various query parameters to filter and format results. Supports complex filtering on multiple types and their fields within JSON objects. 

        :param type: Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File 
        :type type: str
        :param frame: Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. 
        :type frame: str
        :param limit: Limits the number of results. Use 'all' to retrieve all results. 
        :type limit: str
        :param query: General search term that can return multiple object types.
        :type query: str
        :param var_field: Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) 
        :type var_field: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            type=type,
            frame=frame,
            limit=limit,
            query=query,
            var_field=var_field,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGet200Response",
            '400': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_get_with_http_info(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File ")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. ")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Limits the number of results. Use 'all' to retrieve all results. ")] = None,
        query: Annotated[Optional[StrictStr], Field(description="General search term that can return multiple object types.")] = None,
        var_field: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchGet200Response]:
        """Search for objects in the ENCODE Project

        Search endpoint that accepts various query parameters to filter and format results. Supports complex filtering on multiple types and their fields within JSON objects. 

        :param type: Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File 
        :type type: str
        :param frame: Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. 
        :type frame: str
        :param limit: Limits the number of results. Use 'all' to retrieve all results. 
        :type limit: str
        :param query: General search term that can return multiple object types.
        :type query: str
        :param var_field: Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) 
        :type var_field: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            type=type,
            frame=frame,
            limit=limit,
            query=query,
            var_field=var_field,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGet200Response",
            '400': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_get_without_preload_content(
        self,
        type: Annotated[Optional[StrictStr], Field(description="Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File ")] = None,
        frame: Annotated[Optional[StrictStr], Field(description="Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. ")] = None,
        limit: Annotated[Optional[StrictStr], Field(description="Limits the number of results. Use 'all' to retrieve all results. ")] = None,
        query: Annotated[Optional[StrictStr], Field(description="General search term that can return multiple object types.")] = None,
        var_field: Annotated[Optional[Dict[str, Any]], Field(description="Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for objects in the ENCODE Project

        Search endpoint that accepts various query parameters to filter and format results. Supports complex filtering on multiple types and their fields within JSON objects. 

        :param type: Specifies the type(s) of object to search for. Multiple types can be specified by repeating the parameter. Example: type=Experiment&type=File 
        :type type: str
        :param frame: Specifies the format of the returned objects. - If not specified, returns a subset of object properties. - 'embedded' returns all object properties with selected embedded objects expanded. - 'object' returns all properties with embedded objects referred by identifier. 
        :type frame: str
        :param limit: Limits the number of results. Use 'all' to retrieve all results. 
        :type limit: str
        :param query: General search term that can return multiple object types.
        :type query: str
        :param var_field: Any field from any object type can be used as a filter. Supports complex queries including nested properties, range queries, and wildcard searches. Examples: - quality_metrics.frip=lt:0.65 (less than) - file_size=gte:1000000 (greater than or equal) - treatments=* (wildcard, existence check) - treatments!=* (negation, non-existence check) 
        :type var_field: Dict[str, object]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_get_serialize(
            type=type,
            frame=frame,
            limit=limit,
            query=query,
            var_field=var_field,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGet200Response",
            '400': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_get_serialize(
        self,
        type,
        frame,
        limit,
        query,
        var_field,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if frame is not None:
            
            _query_params.append(('frame', frame))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if var_field is not None:
            
            _query_params.append(('field', var_field))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


