# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NoResultsResponse(BaseModel):
    """
    NoResultsResponse
    """ # noqa: E501
    context: Optional[StrictStr] = Field(default=None, alias="@context")
    graph: Optional[List[StrictStr]] = Field(default=None, alias="@graph")
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    type: Optional[List[StrictStr]] = Field(default=None, alias="@type")
    clear_filters: Optional[StrictStr] = None
    columns: Optional[Dict[str, Any]] = None
    facet_groups: Optional[List[StrictStr]] = None
    facets: Optional[List[StrictStr]] = None
    filters: Optional[List[StrictStr]] = None
    notification: Optional[StrictStr] = None
    sort: Optional[Dict[str, Any]] = None
    title: Optional[StrictStr] = None
    total: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["@context", "@graph", "@id", "@type", "clear_filters", "columns", "facet_groups", "facets", "filters", "notification", "sort", "title", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoResultsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoResultsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": obj.get("@context"),
            "@graph": obj.get("@graph"),
            "@id": obj.get("@id"),
            "@type": obj.get("@type"),
            "clear_filters": obj.get("clear_filters"),
            "columns": obj.get("columns"),
            "facet_groups": obj.get("facet_groups"),
            "facets": obj.get("facets"),
            "filters": obj.get("filters"),
            "notification": obj.get("notification"),
            "sort": obj.get("sort"),
            "title": obj.get("title"),
            "total": obj.get("total")
        })
        return _obj


