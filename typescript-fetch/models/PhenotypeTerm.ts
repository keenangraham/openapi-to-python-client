/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An ontology term from Experimental Factor Ontology (EFO), Human Disease Ontology (DOID), Human Phenotype Ontology (HP), Mondo Disease Ontology (MONDO), National Cancer Institute Thesaurus (NCIT), or Ontology of Biological Attributes (OBA) for phenotypes, diseases, and traits.
 * @export
 * @interface PhenotypeTerm
 */
export interface PhenotypeTerm {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    status?: PhenotypeTermStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof PhenotypeTerm
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    description?: string;
    /**
     * An ontology term identifier describing a phenotype.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    termId?: string;
    /**
     * Ontology term describing a biological sample, assay, trait, or disease.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    termName?: string;
    /**
     * A list of deprecated NTR terms previously associated with this ontology term.
     * @type {Set<string>}
     * @memberof PhenotypeTerm
     */
    deprecatedNtrTerms?: Set<string>;
    /**
     * A list of ontology terms which are the nearest ancestor to this ontology term.
     * @type {Set<string>}
     * @memberof PhenotypeTerm
     */
    isA?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof PhenotypeTerm
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PhenotypeTerm
     */
    type?: Array<string>;
    /**
     * A summary of the ontology term.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    summary?: string;
    /**
     * A unique identifier for the ontology term, reformatted from the original term ID.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    name?: string;
    /**
     * Synonyms for the term that have been recorded in an ontology.
     * @type {Set<string>}
     * @memberof PhenotypeTerm
     */
    synonyms?: Set<string>;
    /**
     * List of term names of ontological terms that precede the given term in the ontological tree. These ancestor terms are typically more general ontological terms under which the term is classified.
     * @type {Set<string>}
     * @memberof PhenotypeTerm
     */
    ancestors?: Set<string>;
    /**
     * The ontology in which the term is recorded.
     * @type {string}
     * @memberof PhenotypeTerm
     */
    ontology?: string;
}


/**
 * @export
 */
export const PhenotypeTermStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PhenotypeTermStatusEnum = typeof PhenotypeTermStatusEnum[keyof typeof PhenotypeTermStatusEnum];


/**
 * Check if a given object implements the PhenotypeTerm interface.
 */
export function instanceOfPhenotypeTerm(value: object): value is PhenotypeTerm {
    return true;
}

export function PhenotypeTermFromJSON(json: any): PhenotypeTerm {
    return PhenotypeTermFromJSONTyped(json, false);
}

export function PhenotypeTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhenotypeTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'termId': json['term_id'] == null ? undefined : json['term_id'],
        'termName': json['term_name'] == null ? undefined : json['term_name'],
        'deprecatedNtrTerms': json['deprecated_ntr_terms'] == null ? undefined : json['deprecated_ntr_terms'],
        'isA': json['is_a'] == null ? undefined : json['is_a'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'name': json['name'] == null ? undefined : json['name'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'ancestors': json['ancestors'] == null ? undefined : json['ancestors'],
        'ontology': json['ontology'] == null ? undefined : json['ontology'],
    };
}

export function PhenotypeTermToJSON(value?: PhenotypeTerm | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'term_id': value['termId'],
        'term_name': value['termName'],
        'deprecated_ntr_terms': value['deprecatedNtrTerms'] == null ? undefined : Array.from(value['deprecatedNtrTerms'] as Set<any>),
        'is_a': value['isA'] == null ? undefined : Array.from(value['isA'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'name': value['name'],
        'synonyms': value['synonyms'] == null ? undefined : Array.from(value['synonyms'] as Set<any>),
        'ancestors': value['ancestors'] == null ? undefined : Array.from(value['ancestors'] as Set<any>),
        'ontology': value['ontology'],
    };
}

