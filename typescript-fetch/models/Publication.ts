/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Attachment } from './Attachment';
import {
    AttachmentFromJSON,
    AttachmentFromJSONTyped,
    AttachmentToJSON,
} from './Attachment';

/**
 * A publication related to IGVF.
 * @export
 * @interface Publication
 */
export interface Publication {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof Publication
     */
    releaseTimestamp?: string;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof Publication
     */
    publicationIdentifiers?: Set<string>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof Publication
     */
    status?: PublicationStatusEnum;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof Publication
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof Publication
     */
    award?: string;
    /**
     * 
     * @type {Attachment}
     * @memberof Publication
     */
    attachment?: Attachment;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof Publication
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof Publication
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof Publication
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof Publication
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof Publication
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof Publication
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof Publication
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof Publication
     */
    description?: string;
    /**
     * Title of the publication or communication.
     * @type {string}
     * @memberof Publication
     */
    title?: string;
    /**
     * Abstract of the publication or communication.
     * @type {string}
     * @memberof Publication
     */
    _abstract?: string;
    /**
     * The authors of the publication.
     * @type {string}
     * @memberof Publication
     */
    authors?: string;
    /**
     * The date the publication or communication was published; must be in YYYY-MM-DD format.
     * @type {string}
     * @memberof Publication
     */
    datePublished?: string;
    /**
     * The date the publication was revised.
     * @type {string}
     * @memberof Publication
     */
    dateRevised?: string;
    /**
     * The issue of the publication.
     * @type {string}
     * @memberof Publication
     */
    issue?: string;
    /**
     * Pagination of the reference
     * @type {string}
     * @memberof Publication
     */
    page?: string;
    /**
     * The volume of the publication.
     * @type {string}
     * @memberof Publication
     */
    volume?: string;
    /**
     * The journal of the publication.
     * @type {string}
     * @memberof Publication
     */
    journal?: string;
    /**
     * The affiliation of the lab with a larger organization, such as IGVF.
     * @type {Set<string>}
     * @memberof Publication
     */
    publishedBy?: Set<PublicationPublishedByEnum>;
    /**
     * 
     * @type {string}
     * @memberof Publication
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Publication
     */
    type?: Array<string>;
    /**
     * A summary of the publication.
     * @type {string}
     * @memberof Publication
     */
    summary?: string;
    /**
     * The year the publication was published.
     * @type {number}
     * @memberof Publication
     */
    publicationYear?: number;
    /**
     * The samples associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    samples?: Set<string>;
    /**
     * The donors associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    donors?: Set<string>;
    /**
     * The file sets associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    fileSets?: Set<string>;
    /**
     * The workflows associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    workflows?: Set<string>;
    /**
     * The software associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    software?: Set<string>;
    /**
     * The software versions associated with this publication.
     * @type {Set<string>}
     * @memberof Publication
     */
    softwareVersions?: Set<string>;
}


/**
 * @export
 */
export const PublicationStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PublicationStatusEnum = typeof PublicationStatusEnum[keyof typeof PublicationStatusEnum];

/**
 * @export
 */
export const PublicationPublishedByEnum = {
    Community: 'community',
    Igvf: 'IGVF',
    Encode: 'ENCODE'
} as const;
export type PublicationPublishedByEnum = typeof PublicationPublishedByEnum[keyof typeof PublicationPublishedByEnum];


/**
 * Check if a given object implements the Publication interface.
 */
export function instanceOfPublication(value: object): value is Publication {
    return true;
}

export function PublicationFromJSON(json: any): Publication {
    return PublicationFromJSONTyped(json, false);
}

export function PublicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Publication {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'status': json['status'] == null ? undefined : json['status'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'attachment': json['attachment'] == null ? undefined : AttachmentFromJSON(json['attachment']),
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'title': json['title'] == null ? undefined : json['title'],
        '_abstract': json['abstract'] == null ? undefined : json['abstract'],
        'authors': json['authors'] == null ? undefined : json['authors'],
        'datePublished': json['date_published'] == null ? undefined : json['date_published'],
        'dateRevised': json['date_revised'] == null ? undefined : json['date_revised'],
        'issue': json['issue'] == null ? undefined : json['issue'],
        'page': json['page'] == null ? undefined : json['page'],
        'volume': json['volume'] == null ? undefined : json['volume'],
        'journal': json['journal'] == null ? undefined : json['journal'],
        'publishedBy': json['published_by'] == null ? undefined : json['published_by'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'publicationYear': json['publication_year'] == null ? undefined : json['publication_year'],
        'samples': json['samples'] == null ? undefined : json['samples'],
        'donors': json['donors'] == null ? undefined : json['donors'],
        'fileSets': json['file_sets'] == null ? undefined : json['file_sets'],
        'workflows': json['workflows'] == null ? undefined : json['workflows'],
        'software': json['software'] == null ? undefined : json['software'],
        'softwareVersions': json['software_versions'] == null ? undefined : json['software_versions'],
    };
}

export function PublicationToJSON(value?: Publication | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'status': value['status'],
        'lab': value['lab'],
        'award': value['award'],
        'attachment': AttachmentToJSON(value['attachment']),
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'title': value['title'],
        'abstract': value['_abstract'],
        'authors': value['authors'],
        'date_published': value['datePublished'],
        'date_revised': value['dateRevised'],
        'issue': value['issue'],
        'page': value['page'],
        'volume': value['volume'],
        'journal': value['journal'],
        'published_by': value['publishedBy'] == null ? undefined : Array.from(value['publishedBy'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'publication_year': value['publicationYear'],
        'samples': value['samples'] == null ? undefined : Array.from(value['samples'] as Set<any>),
        'donors': value['donors'] == null ? undefined : Array.from(value['donors'] as Set<any>),
        'file_sets': value['fileSets'] == null ? undefined : Array.from(value['fileSets'] as Set<any>),
        'workflows': value['workflows'] == null ? undefined : Array.from(value['workflows'] as Set<any>),
        'software': value['software'] == null ? undefined : Array.from(value['software'] as Set<any>),
        'software_versions': value['softwareVersions'] == null ? undefined : Array.from(value['softwareVersions'] as Set<any>),
    };
}

