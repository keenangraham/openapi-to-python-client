/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A workflow for computational analysis of genomic data. A workflow is made up of analysis steps.
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof Workflow
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof Workflow
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof Workflow
     */
    publicationIdentifiers?: Set<string>;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof Workflow
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof Workflow
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof Workflow
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof Workflow
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof Workflow
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof Workflow
     */
    collections?: Set<WorkflowCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof Workflow
     */
    status?: WorkflowStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof Workflow
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof Workflow
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof Workflow
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof Workflow
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof Workflow
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof Workflow
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof Workflow
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof Workflow
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof Workflow
     */
    description?: string;
    /**
     * The preferred viewable name of the workflow.
     * @type {string}
     * @memberof Workflow
     */
    name?: string;
    /**
     * An external resource to the code base of the workflow in github.
     * @type {string}
     * @memberof Workflow
     */
    sourceUrl?: string;
    /**
     * Resources hosting the workflow.
     * @type {Set<string>}
     * @memberof Workflow
     */
    workflowRepositories?: Set<string>;
    /**
     * A link to a page describing the standards for this workflow.
     * @type {string}
     * @memberof Workflow
     */
    standardsPage?: string;
    /**
     * The version of this workflow.
     * @type {number}
     * @memberof Workflow
     */
    workflowVersion?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Workflow
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof Workflow
     */
    summary?: string;
    /**
     * The analysis steps which are part of this workflow.
     * @type {Set<string>}
     * @memberof Workflow
     */
    analysisSteps?: Set<string>;
}


/**
 * @export
 */
export const WorkflowCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type WorkflowCollectionsEnum = typeof WorkflowCollectionsEnum[keyof typeof WorkflowCollectionsEnum];

/**
 * @export
 */
export const WorkflowStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type WorkflowStatusEnum = typeof WorkflowStatusEnum[keyof typeof WorkflowStatusEnum];


/**
 * Check if a given object implements the Workflow interface.
 */
export function instanceOfWorkflow(value: object): value is Workflow {
    return true;
}

export function WorkflowFromJSON(json: any): Workflow {
    return WorkflowFromJSONTyped(json, false);
}

export function WorkflowFromJSONTyped(json: any, ignoreDiscriminator: boolean): Workflow {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'name': json['name'] == null ? undefined : json['name'],
        'sourceUrl': json['source_url'] == null ? undefined : json['source_url'],
        'workflowRepositories': json['workflow_repositories'] == null ? undefined : json['workflow_repositories'],
        'standardsPage': json['standards_page'] == null ? undefined : json['standards_page'],
        'workflowVersion': json['workflow_version'] == null ? undefined : json['workflow_version'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'analysisSteps': json['analysis_steps'] == null ? undefined : json['analysis_steps'],
    };
}

export function WorkflowToJSON(value?: Workflow | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'name': value['name'],
        'source_url': value['sourceUrl'],
        'workflow_repositories': value['workflowRepositories'] == null ? undefined : Array.from(value['workflowRepositories'] as Set<any>),
        'standards_page': value['standardsPage'],
        'workflow_version': value['workflowVersion'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'analysis_steps': value['analysisSteps'] == null ? undefined : Array.from(value['analysisSteps'] as Set<any>),
    };
}

