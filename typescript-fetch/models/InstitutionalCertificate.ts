/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An institutional certificate defining the data sharing limitations for data authorized for submission to the IGVF portal.
 * @export
 * @interface InstitutionalCertificate
 */
export interface InstitutionalCertificate {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    status?: InstitutionalCertificateStatusEnum;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    award?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof InstitutionalCertificate
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    description?: string;
    /**
     * A unique identifier for the certificate.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    certificateIdentifier?: string;
    /**
     * Indicator of whether the samples are under controlled access.
     * @type {boolean}
     * @memberof InstitutionalCertificate
     */
    controlledAccess?: boolean;
    /**
     * Code indicating the limitations on data use for data generated from the applicable samples. GRU (General research use): Use of the data is limited only by the terms of the Data Use Certification: these data will be added to the dbGaP Collection. HMB (Health/medical/biomedical): Use of the data is limited to health/medical/biomedical purposes, does not include the study of population origins or ancestry. DS (Disease specific): Use of the data must be related to the specified disease. Other: any other customized limitation.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    dataUseLimitation?: InstitutionalCertificateDataUseLimitationEnum;
    /**
     * Code indicating a modifier on the limitations on data use for data generated from the applicable samples. COL: Requestor must provide a letter of collaboration with the primary study investigator(s). GSO: Use of the data is limited to genetic studies only. IRB: Approval Required IRB Requestor must provide documentation of local IRB approval. MDS: Use of the data includes methods development research (e.g., development and testing of software or algorithms). NPU: Use of the data is limited to not-for-profit organizations. PUB: Requestor agrees to make results of studies using the data available to the larger scientific community.
     * @type {Set<string>}
     * @memberof InstitutionalCertificate
     */
    dataUseLimitationModifiers?: Set<InstitutionalCertificateDataUseLimitationModifiersEnum>;
    /**
     * Samples covered by this institutional certificate.
     * @type {Set<string>}
     * @memberof InstitutionalCertificate
     */
    samples?: Set<string>;
    /**
     * Link to the institutional certification form.
     * @type {Set<string>}
     * @memberof InstitutionalCertificate
     */
    urls?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InstitutionalCertificate
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof InstitutionalCertificate
     */
    summary?: string;
}


/**
 * @export
 */
export const InstitutionalCertificateStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type InstitutionalCertificateStatusEnum = typeof InstitutionalCertificateStatusEnum[keyof typeof InstitutionalCertificateStatusEnum];

/**
 * @export
 */
export const InstitutionalCertificateDataUseLimitationEnum = {
    Ds: 'DS',
    Gru: 'GRU',
    Hmb: 'HMB',
    Other: 'other'
} as const;
export type InstitutionalCertificateDataUseLimitationEnum = typeof InstitutionalCertificateDataUseLimitationEnum[keyof typeof InstitutionalCertificateDataUseLimitationEnum];

/**
 * @export
 */
export const InstitutionalCertificateDataUseLimitationModifiersEnum = {
    Col: 'COL',
    Gso: 'GSO',
    Irb: 'IRB',
    Mds: 'MDS',
    Npu: 'NPU',
    Pub: 'PUB'
} as const;
export type InstitutionalCertificateDataUseLimitationModifiersEnum = typeof InstitutionalCertificateDataUseLimitationModifiersEnum[keyof typeof InstitutionalCertificateDataUseLimitationModifiersEnum];


/**
 * Check if a given object implements the InstitutionalCertificate interface.
 */
export function instanceOfInstitutionalCertificate(value: object): value is InstitutionalCertificate {
    return true;
}

export function InstitutionalCertificateFromJSON(json: any): InstitutionalCertificate {
    return InstitutionalCertificateFromJSONTyped(json, false);
}

export function InstitutionalCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstitutionalCertificate {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'certificateIdentifier': json['certificate_identifier'] == null ? undefined : json['certificate_identifier'],
        'controlledAccess': json['controlled_access'] == null ? undefined : json['controlled_access'],
        'dataUseLimitation': json['data_use_limitation'] == null ? undefined : json['data_use_limitation'],
        'dataUseLimitationModifiers': json['data_use_limitation_modifiers'] == null ? undefined : json['data_use_limitation_modifiers'],
        'samples': json['samples'] == null ? undefined : json['samples'],
        'urls': json['urls'] == null ? undefined : json['urls'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function InstitutionalCertificateToJSON(value?: InstitutionalCertificate | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'lab': value['lab'],
        'award': value['award'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'certificate_identifier': value['certificateIdentifier'],
        'controlled_access': value['controlledAccess'],
        'data_use_limitation': value['dataUseLimitation'],
        'data_use_limitation_modifiers': value['dataUseLimitationModifiers'] == null ? undefined : Array.from(value['dataUseLimitationModifiers'] as Set<any>),
        'samples': value['samples'] == null ? undefined : Array.from(value['samples'] as Set<any>),
        'urls': value['urls'] == null ? undefined : Array.from(value['urls'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
    };
}

