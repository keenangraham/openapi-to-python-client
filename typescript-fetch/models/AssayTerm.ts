/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An ontology term from Ontology of Biomedical Investigations (OBI) for assays.
 * @export
 * @interface AssayTerm
 */
export interface AssayTerm {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof AssayTerm
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof AssayTerm
     */
    status?: AssayTermStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof AssayTerm
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof AssayTerm
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof AssayTerm
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof AssayTerm
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof AssayTerm
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof AssayTerm
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof AssayTerm
     */
    description?: string;
    /**
     * An ontology term identifier describing an assay.
     * @type {string}
     * @memberof AssayTerm
     */
    termId?: string;
    /**
     * Ontology term describing a biological sample, assay, trait, or disease.
     * @type {string}
     * @memberof AssayTerm
     */
    termName?: string;
    /**
     * A list of deprecated NTR terms previously associated with this ontology term.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    deprecatedNtrTerms?: Set<string>;
    /**
     * A list of ontology terms which are the nearest ancestor to this ontology term.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    isA?: Set<string>;
    /**
     * The custom lab preferred labels that this assay term may be associated with.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    preferredAssayTitles?: Set<AssayTermPreferredAssayTitlesEnum>;
    /**
     * 
     * @type {string}
     * @memberof AssayTerm
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AssayTerm
     */
    type?: Array<string>;
    /**
     * A summary of the ontology term.
     * @type {string}
     * @memberof AssayTerm
     */
    summary?: string;
    /**
     * A unique identifier for the ontology term, reformatted from the original term ID.
     * @type {string}
     * @memberof AssayTerm
     */
    name?: string;
    /**
     * Synonyms for the term that have been recorded in an ontology.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    synonyms?: Set<string>;
    /**
     * List of term names of ontological terms that precede the given term in the ontological tree. These ancestor terms are typically more general ontological terms under which the term is classified.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    ancestors?: Set<string>;
    /**
     * The ontology in which the term is recorded.
     * @type {string}
     * @memberof AssayTerm
     */
    ontology?: string;
    /**
     * A broad categorization of the assay term.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    assaySlims?: Set<string>;
    /**
     * The type of feature or interaction measured by the assay.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    categorySlims?: Set<string>;
    /**
     * The purpose of the assay.
     * @type {Set<string>}
     * @memberof AssayTerm
     */
    objectiveSlims?: Set<string>;
}


/**
 * @export
 */
export const AssayTermStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AssayTermStatusEnum = typeof AssayTermStatusEnum[keyof typeof AssayTermStatusEnum];

/**
 * @export
 */
export const AssayTermPreferredAssayTitlesEnum = {
    _10xMultiome: '10x multiome',
    _10xMultiomeWithMultiSeq: '10x multiome with MULTI-seq',
    AavMpra: 'AAV-MPRA',
    AtacSeq: 'ATAC-seq',
    CeresSeq: 'CERES-seq',
    CellPainting: 'Cell painting',
    CrisprFlowFish: 'CRISPR FlowFISH',
    DogmaSeq: 'DOGMA-seq',
    HistoneChIpSeq: 'Histone ChIP-seq',
    HiC: 'Hi-C',
    LentiMpra: 'lentiMPRA',
    Merfish: 'MERFISH',
    Miaa: 'MIAA',
    MN2H: 'mN2H',
    Mpra: 'MPRA',
    MpraScQer: 'MPRA (scQer)',
    MultiSeq: 'MULTI-seq',
    ParseSpliTSeq: 'Parse SPLiT-seq',
    PerturbSeq: 'Perturb-seq',
    RnaSeq: 'RNA-seq',
    Sge: 'SGE',
    ScAtacSeq: 'scATAC-seq',
    ScNtSeq: 'scNT-seq',
    ScNtSeq2: 'scNT-seq2',
    ScRnaSeq: 'scRNA-seq',
    SemiQY2H: 'semi-qY2H',
    ShareSeq: 'SHARE-seq',
    SmFish: 'smFISH',
    SnAtacSeq: 'snATAC-seq',
    SnmCSeq2: 'snmC-Seq2',
    SnMctSeq: 'snMCT-seq',
    SnM3CSeq: 'snM3C-seq',
    SnRnaSeq: 'snRNA-seq',
    Superstarr: 'SUPERSTARR',
    TapSeq: 'TAP-seq',
    TfChIpSeq: 'TF ChIP-seq',
    VampSeq: 'VAMP-seq',
    VariantFlowFish: 'Variant FlowFISH',
    VariantPainting: 'Variant painting',
    Y2H: 'Y2H',
    YN2H: 'yN2H'
} as const;
export type AssayTermPreferredAssayTitlesEnum = typeof AssayTermPreferredAssayTitlesEnum[keyof typeof AssayTermPreferredAssayTitlesEnum];


/**
 * Check if a given object implements the AssayTerm interface.
 */
export function instanceOfAssayTerm(value: object): value is AssayTerm {
    return true;
}

export function AssayTermFromJSON(json: any): AssayTerm {
    return AssayTermFromJSONTyped(json, false);
}

export function AssayTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssayTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'termId': json['term_id'] == null ? undefined : json['term_id'],
        'termName': json['term_name'] == null ? undefined : json['term_name'],
        'deprecatedNtrTerms': json['deprecated_ntr_terms'] == null ? undefined : json['deprecated_ntr_terms'],
        'isA': json['is_a'] == null ? undefined : json['is_a'],
        'preferredAssayTitles': json['preferred_assay_titles'] == null ? undefined : json['preferred_assay_titles'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'name': json['name'] == null ? undefined : json['name'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'ancestors': json['ancestors'] == null ? undefined : json['ancestors'],
        'ontology': json['ontology'] == null ? undefined : json['ontology'],
        'assaySlims': json['assay_slims'] == null ? undefined : json['assay_slims'],
        'categorySlims': json['category_slims'] == null ? undefined : json['category_slims'],
        'objectiveSlims': json['objective_slims'] == null ? undefined : json['objective_slims'],
    };
}

export function AssayTermToJSON(value?: AssayTerm | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'term_id': value['termId'],
        'term_name': value['termName'],
        'deprecated_ntr_terms': value['deprecatedNtrTerms'] == null ? undefined : Array.from(value['deprecatedNtrTerms'] as Set<any>),
        'is_a': value['isA'] == null ? undefined : Array.from(value['isA'] as Set<any>),
        'preferred_assay_titles': value['preferredAssayTitles'] == null ? undefined : Array.from(value['preferredAssayTitles'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'name': value['name'],
        'synonyms': value['synonyms'] == null ? undefined : Array.from(value['synonyms'] as Set<any>),
        'ancestors': value['ancestors'] == null ? undefined : Array.from(value['ancestors'] as Set<any>),
        'ontology': value['ontology'],
        'assay_slims': value['assaySlims'] == null ? undefined : Array.from(value['assaySlims'] as Set<any>),
        'category_slims': value['categorySlims'] == null ? undefined : Array.from(value['categorySlims'] as Set<any>),
        'objective_slims': value['objectiveSlims'] == null ? undefined : Array.from(value['objectiveSlims'] as Set<any>),
    };
}

