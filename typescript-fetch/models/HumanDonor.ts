/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelatedDonor } from './RelatedDonor';
import {
    RelatedDonorFromJSON,
    RelatedDonorFromJSONTyped,
    RelatedDonorToJSON,
} from './RelatedDonor';

/**
 * A human donor of any biosample, including cell lines. Submission of any sample originating from a human donor requires submission of information about the relevant donor. For example, submission of the donor of K562 is a prerequisite for submission of any K562 cell line samples.
 * @export
 * @interface HumanDonor
 */
export interface HumanDonor {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof HumanDonor
     */
    releaseTimestamp?: string;
    /**
     * The species of the organism.
     * @type {string}
     * @memberof HumanDonor
     */
    taxa?: HumanDonorTaxaEnum;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    publicationIdentifiers?: Set<string>;
    /**
     * An external resource with additional information.
     * @type {string}
     * @memberof HumanDonor
     */
    url?: string;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof HumanDonor
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof HumanDonor
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof HumanDonor
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    collections?: Set<HumanDonorCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof HumanDonor
     */
    status?: HumanDonorStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof HumanDonor
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof HumanDonor
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof HumanDonor
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof HumanDonor
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof HumanDonor
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof HumanDonor
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof HumanDonor
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof HumanDonor
     */
    description?: string;
    /**
     * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF donors.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    dbxrefs?: Set<string>;
    /**
     * Sex of the donor.
     * @type {string}
     * @memberof HumanDonor
     */
    sex?: HumanDonorSexEnum;
    /**
     * A list of associated phenotypic features of the donor.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    phenotypicFeatures?: Set<string>;
    /**
     * Virtual donors are not representing actual human or model organism donors, samples coming from which were used in experiments, but rather capturing metadata about hypothetical donors that the reported analysis results are relevant for.
     * @type {boolean}
     * @memberof HumanDonor
     */
    virtual?: boolean;
    /**
     * Familial relations of this donor.
     * @type {Set<RelatedDonor>}
     * @memberof HumanDonor
     */
    relatedDonors?: Set<RelatedDonor>;
    /**
     * Ethnicity of the donor.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    ethnicities?: Set<HumanDonorEthnicitiesEnum>;
    /**
     * Identifiers of this human donor.
     * @type {Set<string>}
     * @memberof HumanDonor
     */
    humanDonorIdentifiers?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof HumanDonor
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof HumanDonor
     */
    type?: Array<string>;
    /**
     * A summary of the human donor.
     * @type {string}
     * @memberof HumanDonor
     */
    summary?: string;
}


/**
 * @export
 */
export const HumanDonorTaxaEnum = {
    HomoSapiens: 'Homo sapiens'
} as const;
export type HumanDonorTaxaEnum = typeof HumanDonorTaxaEnum[keyof typeof HumanDonorTaxaEnum];

/**
 * @export
 */
export const HumanDonorCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type HumanDonorCollectionsEnum = typeof HumanDonorCollectionsEnum[keyof typeof HumanDonorCollectionsEnum];

/**
 * @export
 */
export const HumanDonorStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type HumanDonorStatusEnum = typeof HumanDonorStatusEnum[keyof typeof HumanDonorStatusEnum];

/**
 * @export
 */
export const HumanDonorSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type HumanDonorSexEnum = typeof HumanDonorSexEnum[keyof typeof HumanDonorSexEnum];

/**
 * @export
 */
export const HumanDonorEthnicitiesEnum = {
    AfricanAmerican: 'African American',
    AfricanCaribbean: 'African Caribbean',
    Arab: 'Arab',
    Asian: 'Asian',
    Black: 'Black',
    BlackAfrican: 'Black African',
    Chinese: 'Chinese',
    Colombian: 'Colombian',
    DaiChinese: 'Dai Chinese',
    Esan: 'Esan',
    Eskimo: 'Eskimo',
    European: 'European',
    Gambian: 'Gambian',
    HanChinese: 'Han Chinese',
    Hispanic: 'Hispanic',
    Indian: 'Indian',
    Japanese: 'Japanese',
    KinhVietnamese: 'Kinh Vietnamese',
    Luhya: 'Luhya',
    Maasai: 'Maasai',
    Mende: 'Mende',
    NativeHawaiian: 'Native Hawaiian',
    PacificIslander: 'Pacific Islander',
    PuertoRican: 'Puerto Rican',
    Yoruba: 'Yoruba'
} as const;
export type HumanDonorEthnicitiesEnum = typeof HumanDonorEthnicitiesEnum[keyof typeof HumanDonorEthnicitiesEnum];


/**
 * Check if a given object implements the HumanDonor interface.
 */
export function instanceOfHumanDonor(value: object): value is HumanDonor {
    return true;
}

export function HumanDonorFromJSON(json: any): HumanDonor {
    return HumanDonorFromJSONTyped(json, false);
}

export function HumanDonorFromJSONTyped(json: any, ignoreDiscriminator: boolean): HumanDonor {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'taxa': json['taxa'] == null ? undefined : json['taxa'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'url': json['url'] == null ? undefined : json['url'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'sex': json['sex'] == null ? undefined : json['sex'],
        'phenotypicFeatures': json['phenotypic_features'] == null ? undefined : json['phenotypic_features'],
        'virtual': json['virtual'] == null ? undefined : json['virtual'],
        'relatedDonors': json['related_donors'] == null ? undefined : (new Set((json['related_donors'] as Array<any>).map(RelatedDonorFromJSON))),
        'ethnicities': json['ethnicities'] == null ? undefined : json['ethnicities'],
        'humanDonorIdentifiers': json['human_donor_identifiers'] == null ? undefined : json['human_donor_identifiers'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function HumanDonorToJSON(value?: HumanDonor | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'taxa': value['taxa'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'url': value['url'],
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'sex': value['sex'],
        'phenotypic_features': value['phenotypicFeatures'] == null ? undefined : Array.from(value['phenotypicFeatures'] as Set<any>),
        'virtual': value['virtual'],
        'related_donors': value['relatedDonors'] == null ? undefined : (Array.from(value['relatedDonors'] as Set<any>).map(RelatedDonorToJSON)),
        'ethnicities': value['ethnicities'] == null ? undefined : Array.from(value['ethnicities'] as Set<any>),
        'human_donor_identifiers': value['humanDonorIdentifiers'] == null ? undefined : Array.from(value['humanDonorIdentifiers'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
    };
}

