/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A biosample that is directly harvested from a donor, typically a dissection from an organ.
 * @export
 * @interface Tissue
 */
export interface Tissue {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof Tissue
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof Tissue
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof Tissue
     */
    publicationIdentifiers?: Set<string>;
    /**
     * The species of the organism.
     * @type {string}
     * @memberof Tissue
     */
    taxa?: TissueTaxaEnum;
    /**
     * An external resource with additional information.
     * @type {string}
     * @memberof Tissue
     */
    url?: string;
    /**
     * The originating lab(s) or vendor(s).
     * @type {Set<string>}
     * @memberof Tissue
     */
    sources?: Set<string>;
    /**
     * The lot identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof Tissue
     */
    lotId?: string;
    /**
     * The product identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof Tissue
     */
    productId?: string;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof Tissue
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof Tissue
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof Tissue
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof Tissue
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof Tissue
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof Tissue
     */
    collections?: Set<TissueCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof Tissue
     */
    status?: TissueStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof Tissue
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof Tissue
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof Tissue
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof Tissue
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof Tissue
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof Tissue
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof Tissue
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof Tissue
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof Tissue
     */
    description?: string;
    /**
     * Lower bound of age of the organism at the time of collection of the sample.
     * @type {number}
     * @memberof Tissue
     */
    lowerBoundAge?: number;
    /**
     * Upper bound of age of the organism at the time of collection of the sample.
     * @type {number}
     * @memberof Tissue
     */
    upperBoundAge?: number;
    /**
     * The units of time associated with age of the biosample.
     * @type {string}
     * @memberof Tissue
     */
    ageUnits?: TissueAgeUnitsEnum;
    /**
     * Ontology terms identifying a biosample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    sampleTerms?: Set<string>;
    /**
     * Ontology term of the disease associated with the biosample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    diseaseTerms?: Set<string>;
    /**
     * The biosamples this biosample is pooled from.
     * @type {Set<string>}
     * @memberof Tissue
     */
    pooledFrom?: Set<string>;
    /**
     * Links to a biosample which represents a larger sample from which this sample was taken regardless of whether it is a tissue taken from an organism or smaller slices of a piece of tissue or aliquots of a cell growth.
     * @type {string}
     * @memberof Tissue
     */
    partOf?: string;
    /**
     * Links to a biosample that was originated from due to differentiation, dedifferentiation, reprogramming, or the introduction of a genetic modification.
     * @type {string}
     * @memberof Tissue
     */
    originatedFrom?: string;
    /**
     * A list of treatments applied to the biosample with the purpose of perturbation.
     * @type {Set<string>}
     * @memberof Tissue
     */
    treatments?: Set<string>;
    /**
     * Donor(s) the sample was derived from.
     * @type {Set<string>}
     * @memberof Tissue
     */
    donors?: Set<string>;
    /**
     * Biological markers that are associated with this sample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    biomarkers?: Set<string>;
    /**
     * Biosample is embryonic.
     * @type {boolean}
     * @memberof Tissue
     */
    embryonic?: boolean;
    /**
     * Links to modifications applied to this biosample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    modifications?: Set<string>;
    /**
     * Cellular sub-pool fraction of the sample. Also known as PKR and sub-library.
     * @type {string}
     * @memberof Tissue
     */
    cellularSubPool?: string;
    /**
     * The initial quantity of samples obtained.
     * @type {number}
     * @memberof Tissue
     */
    startingAmount?: number;
    /**
     * The units used to quantify the amount of samples obtained.
     * @type {string}
     * @memberof Tissue
     */
    startingAmountUnits?: TissueStartingAmountUnitsEnum;
    /**
     * Biosample identifiers from external resources, such as Biosample database or Cellosaurus.
     * @type {Set<string>}
     * @memberof Tissue
     */
    dbxrefs?: Set<string>;
    /**
     * The date the sample was harvested, dissected or created, depending on the type of the sample.
     * @type {string}
     * @memberof Tissue
     */
    dateObtained?: string;
    /**
     * Links to a larger sample from which this sample was obtained through sorting.
     * @type {string}
     * @memberof Tissue
     */
    sortedFrom?: string;
    /**
     * Detail for sample sorted into fractions capturing information about sorting.
     * @type {string}
     * @memberof Tissue
     */
    sortedFromDetail?: string;
    /**
     * Virtual samples are not representing actual physical entities from experiments, but rather capturing metadata about hypothetical samples that the reported analysis results are relevant for.
     * @type {boolean}
     * @memberof Tissue
     */
    virtual?: boolean;
    /**
     * The construct library sets of vectors introduced to this sample prior to performing an assay.
     * @type {Set<string>}
     * @memberof Tissue
     */
    constructLibrarySets?: Set<string>;
    /**
     * The actual multiplicity of infection (MOI) for vectors introduced to this sample. At least one construct library set must be specified in order to specify MOI. This property should capture the actual MOI, and not the targeted MOI.
     * @type {number}
     * @memberof Tissue
     */
    moi?: number;
    /**
     * Method of introduction of nucleic acid into the cell.
     * @type {string}
     * @memberof Tissue
     */
    nucleicAcidDelivery?: TissueNucleicAcidDeliveryEnum;
    /**
     * The time that elapsed past the time-point when the construct library sets were introduced.
     * @type {number}
     * @memberof Tissue
     */
    timePostLibraryDelivery?: number;
    /**
     * The units of time that elapsed past the point when the construct library sets were introduced.
     * @type {string}
     * @memberof Tissue
     */
    timePostLibraryDeliveryUnits?: TissueTimePostLibraryDeliveryUnitsEnum;
    /**
     * Links to the protocol(s) for preparing the samples on Protocols.io.
     * @type {Set<string>}
     * @memberof Tissue
     */
    protocols?: Set<string>;
    /**
     * The amount of time elapsed since death.
     * @type {number}
     * @memberof Tissue
     */
    pmi?: number;
    /**
     * The unit in which the PMI time was reported.
     * @type {string}
     * @memberof Tissue
     */
    pmiUnits?: TissuePmiUnitsEnum;
    /**
     * HubMap Common Coordinate Framework unique identifier corresponding to the organ, biological structure, and spatial location of the tissue specimen.
     * @type {string}
     * @memberof Tissue
     */
    ccfId?: string;
    /**
     * The method by which the tissue was preserved: cryopreservation (slow-freeze) or flash-freezing.
     * @type {string}
     * @memberof Tissue
     */
    preservationMethod?: TissuePreservationMethodEnum;
    /**
     * 
     * @type {string}
     * @memberof Tissue
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Tissue
     */
    type?: Array<string>;
    /**
     * A summary of the sample.
     * @type {string}
     * @memberof Tissue
     */
    summary?: string;
    /**
     * The file sets linked to this sample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    fileSets?: Set<string>;
    /**
     * The multiplexed samples in which this sample is included.
     * @type {Set<string>}
     * @memberof Tissue
     */
    multiplexedIn?: Set<string>;
    /**
     * The fractions into which this sample has been sorted.
     * @type {Set<string>}
     * @memberof Tissue
     */
    sortedFractions?: Set<string>;
    /**
     * The samples which originate from this sample, such as through a process of cell differentiation.
     * @type {Set<string>}
     * @memberof Tissue
     */
    originOf?: Set<string>;
    /**
     * The institutional certificates under which use of this sample is approved.
     * @type {Set<string>}
     * @memberof Tissue
     */
    institutionalCertificates?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof Tissue
     */
    sex?: TissueSexEnum;
    /**
     * Age of organism at the time of collection of the sample.
     * @type {string}
     * @memberof Tissue
     */
    age?: string;
    /**
     * Upper bound of age of organism in hours at the time of collection of the sample.
     * @type {number}
     * @memberof Tissue
     */
    upperBoundAgeInHours?: number;
    /**
     * Lower bound of age of organism in hours at the time of collection of the sample .
     * @type {number}
     * @memberof Tissue
     */
    lowerBoundAgeInHours?: number;
    /**
     * The parts into which this sample has been divided.
     * @type {Set<string>}
     * @memberof Tissue
     */
    parts?: Set<string>;
    /**
     * The pooled samples in which this sample is included.
     * @type {Set<string>}
     * @memberof Tissue
     */
    pooledIn?: Set<string>;
    /**
     * The general category of this type of sample.
     * @type {Set<string>}
     * @memberof Tissue
     */
    classifications?: Set<string>;
}


/**
 * @export
 */
export const TissueTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type TissueTaxaEnum = typeof TissueTaxaEnum[keyof typeof TissueTaxaEnum];

/**
 * @export
 */
export const TissueCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type TissueCollectionsEnum = typeof TissueCollectionsEnum[keyof typeof TissueCollectionsEnum];

/**
 * @export
 */
export const TissueStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TissueStatusEnum = typeof TissueStatusEnum[keyof typeof TissueStatusEnum];

/**
 * @export
 */
export const TissueAgeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;
export type TissueAgeUnitsEnum = typeof TissueAgeUnitsEnum[keyof typeof TissueAgeUnitsEnum];

/**
 * @export
 */
export const TissueStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type TissueStartingAmountUnitsEnum = typeof TissueStartingAmountUnitsEnum[keyof typeof TissueStartingAmountUnitsEnum];

/**
 * @export
 */
export const TissueNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type TissueNucleicAcidDeliveryEnum = typeof TissueNucleicAcidDeliveryEnum[keyof typeof TissueNucleicAcidDeliveryEnum];

/**
 * @export
 */
export const TissueTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type TissueTimePostLibraryDeliveryUnitsEnum = typeof TissueTimePostLibraryDeliveryUnitsEnum[keyof typeof TissueTimePostLibraryDeliveryUnitsEnum];

/**
 * @export
 */
export const TissuePmiUnitsEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week'
} as const;
export type TissuePmiUnitsEnum = typeof TissuePmiUnitsEnum[keyof typeof TissuePmiUnitsEnum];

/**
 * @export
 */
export const TissuePreservationMethodEnum = {
    Cryopreservation: 'cryopreservation',
    FlashFreezing: 'flash-freezing'
} as const;
export type TissuePreservationMethodEnum = typeof TissuePreservationMethodEnum[keyof typeof TissuePreservationMethodEnum];

/**
 * @export
 */
export const TissueSexEnum = {
    Female: 'female',
    Male: 'male',
    Mixed: 'mixed',
    Unspecified: 'unspecified'
} as const;
export type TissueSexEnum = typeof TissueSexEnum[keyof typeof TissueSexEnum];


/**
 * Check if a given object implements the Tissue interface.
 */
export function instanceOfTissue(value: object): value is Tissue {
    return true;
}

export function TissueFromJSON(json: any): Tissue {
    return TissueFromJSONTyped(json, false);
}

export function TissueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tissue {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'taxa': json['taxa'] == null ? undefined : json['taxa'],
        'url': json['url'] == null ? undefined : json['url'],
        'sources': json['sources'] == null ? undefined : json['sources'],
        'lotId': json['lot_id'] == null ? undefined : json['lot_id'],
        'productId': json['product_id'] == null ? undefined : json['product_id'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'lowerBoundAge': json['lower_bound_age'] == null ? undefined : json['lower_bound_age'],
        'upperBoundAge': json['upper_bound_age'] == null ? undefined : json['upper_bound_age'],
        'ageUnits': json['age_units'] == null ? undefined : json['age_units'],
        'sampleTerms': json['sample_terms'] == null ? undefined : json['sample_terms'],
        'diseaseTerms': json['disease_terms'] == null ? undefined : json['disease_terms'],
        'pooledFrom': json['pooled_from'] == null ? undefined : json['pooled_from'],
        'partOf': json['part_of'] == null ? undefined : json['part_of'],
        'originatedFrom': json['originated_from'] == null ? undefined : json['originated_from'],
        'treatments': json['treatments'] == null ? undefined : json['treatments'],
        'donors': json['donors'] == null ? undefined : json['donors'],
        'biomarkers': json['biomarkers'] == null ? undefined : json['biomarkers'],
        'embryonic': json['embryonic'] == null ? undefined : json['embryonic'],
        'modifications': json['modifications'] == null ? undefined : json['modifications'],
        'cellularSubPool': json['cellular_sub_pool'] == null ? undefined : json['cellular_sub_pool'],
        'startingAmount': json['starting_amount'] == null ? undefined : json['starting_amount'],
        'startingAmountUnits': json['starting_amount_units'] == null ? undefined : json['starting_amount_units'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'dateObtained': json['date_obtained'] == null ? undefined : json['date_obtained'],
        'sortedFrom': json['sorted_from'] == null ? undefined : json['sorted_from'],
        'sortedFromDetail': json['sorted_from_detail'] == null ? undefined : json['sorted_from_detail'],
        'virtual': json['virtual'] == null ? undefined : json['virtual'],
        'constructLibrarySets': json['construct_library_sets'] == null ? undefined : json['construct_library_sets'],
        'moi': json['moi'] == null ? undefined : json['moi'],
        'nucleicAcidDelivery': json['nucleic_acid_delivery'] == null ? undefined : json['nucleic_acid_delivery'],
        'timePostLibraryDelivery': json['time_post_library_delivery'] == null ? undefined : json['time_post_library_delivery'],
        'timePostLibraryDeliveryUnits': json['time_post_library_delivery_units'] == null ? undefined : json['time_post_library_delivery_units'],
        'protocols': json['protocols'] == null ? undefined : json['protocols'],
        'pmi': json['pmi'] == null ? undefined : json['pmi'],
        'pmiUnits': json['pmi_units'] == null ? undefined : json['pmi_units'],
        'ccfId': json['ccf_id'] == null ? undefined : json['ccf_id'],
        'preservationMethod': json['preservation_method'] == null ? undefined : json['preservation_method'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'fileSets': json['file_sets'] == null ? undefined : json['file_sets'],
        'multiplexedIn': json['multiplexed_in'] == null ? undefined : json['multiplexed_in'],
        'sortedFractions': json['sorted_fractions'] == null ? undefined : json['sorted_fractions'],
        'originOf': json['origin_of'] == null ? undefined : json['origin_of'],
        'institutionalCertificates': json['institutional_certificates'] == null ? undefined : json['institutional_certificates'],
        'sex': json['sex'] == null ? undefined : json['sex'],
        'age': json['age'] == null ? undefined : json['age'],
        'upperBoundAgeInHours': json['upper_bound_age_in_hours'] == null ? undefined : json['upper_bound_age_in_hours'],
        'lowerBoundAgeInHours': json['lower_bound_age_in_hours'] == null ? undefined : json['lower_bound_age_in_hours'],
        'parts': json['parts'] == null ? undefined : json['parts'],
        'pooledIn': json['pooled_in'] == null ? undefined : json['pooled_in'],
        'classifications': json['classifications'] == null ? undefined : json['classifications'],
    };
}

export function TissueToJSON(value?: Tissue | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'taxa': value['taxa'],
        'url': value['url'],
        'sources': value['sources'] == null ? undefined : Array.from(value['sources'] as Set<any>),
        'lot_id': value['lotId'],
        'product_id': value['productId'],
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'lower_bound_age': value['lowerBoundAge'],
        'upper_bound_age': value['upperBoundAge'],
        'age_units': value['ageUnits'],
        'sample_terms': value['sampleTerms'] == null ? undefined : Array.from(value['sampleTerms'] as Set<any>),
        'disease_terms': value['diseaseTerms'] == null ? undefined : Array.from(value['diseaseTerms'] as Set<any>),
        'pooled_from': value['pooledFrom'] == null ? undefined : Array.from(value['pooledFrom'] as Set<any>),
        'part_of': value['partOf'],
        'originated_from': value['originatedFrom'],
        'treatments': value['treatments'] == null ? undefined : Array.from(value['treatments'] as Set<any>),
        'donors': value['donors'] == null ? undefined : Array.from(value['donors'] as Set<any>),
        'biomarkers': value['biomarkers'] == null ? undefined : Array.from(value['biomarkers'] as Set<any>),
        'embryonic': value['embryonic'],
        'modifications': value['modifications'] == null ? undefined : Array.from(value['modifications'] as Set<any>),
        'cellular_sub_pool': value['cellularSubPool'],
        'starting_amount': value['startingAmount'],
        'starting_amount_units': value['startingAmountUnits'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'date_obtained': value['dateObtained'],
        'sorted_from': value['sortedFrom'],
        'sorted_from_detail': value['sortedFromDetail'],
        'virtual': value['virtual'],
        'construct_library_sets': value['constructLibrarySets'] == null ? undefined : Array.from(value['constructLibrarySets'] as Set<any>),
        'moi': value['moi'],
        'nucleic_acid_delivery': value['nucleicAcidDelivery'],
        'time_post_library_delivery': value['timePostLibraryDelivery'],
        'time_post_library_delivery_units': value['timePostLibraryDeliveryUnits'],
        'protocols': value['protocols'] == null ? undefined : Array.from(value['protocols'] as Set<any>),
        'pmi': value['pmi'],
        'pmi_units': value['pmiUnits'],
        'ccf_id': value['ccfId'],
        'preservation_method': value['preservationMethod'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'file_sets': value['fileSets'] == null ? undefined : Array.from(value['fileSets'] as Set<any>),
        'multiplexed_in': value['multiplexedIn'] == null ? undefined : Array.from(value['multiplexedIn'] as Set<any>),
        'sorted_fractions': value['sortedFractions'] == null ? undefined : Array.from(value['sortedFractions'] as Set<any>),
        'origin_of': value['originOf'] == null ? undefined : Array.from(value['originOf'] as Set<any>),
        'institutional_certificates': value['institutionalCertificates'] == null ? undefined : Array.from(value['institutionalCertificates'] as Set<any>),
        'sex': value['sex'],
        'age': value['age'],
        'upper_bound_age_in_hours': value['upperBoundAgeInHours'],
        'lower_bound_age_in_hours': value['lowerBoundAgeInHours'],
        'parts': value['parts'] == null ? undefined : Array.from(value['parts'] as Set<any>),
        'pooled_in': value['pooledIn'] == null ? undefined : Array.from(value['pooledIn'] as Set<any>),
        'classifications': value['classifications'] == null ? undefined : Array.from(value['classifications'] as Set<any>),
    };
}

