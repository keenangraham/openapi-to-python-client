/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Measurement set is a file set that hosts raw data files (e.g. FASTQs) resulting from sequencing of a library prepared from the nucleic acids of the sample that is the main target of the assay. For example sequencing of accessible regions in the genome, or sequencing of the transcriptome of the sample. The assay can either be bulk or single cell type. The sample specific raw sequencing results will be captured in the measurement sets. The files in the measurement sets are specific to the sample being investigated. See auxiliary sets for files that are not a direct result of sequencing the sample under investigation.
 * @export
 * @interface MeasurementSet
 */
export interface MeasurementSet {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof MeasurementSet
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    publicationIdentifiers?: Set<string>;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof MeasurementSet
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof MeasurementSet
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof MeasurementSet
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    collections?: Set<MeasurementSetCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof MeasurementSet
     */
    status?: MeasurementSetStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof MeasurementSet
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof MeasurementSet
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof MeasurementSet
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof MeasurementSet
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof MeasurementSet
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof MeasurementSet
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof MeasurementSet
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof MeasurementSet
     */
    description?: string;
    /**
     * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF file sets.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    dbxrefs?: Set<string>;
    /**
     * The sample(s) associated with this file set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    samples?: Set<string>;
    /**
     * The donors of the samples associated with this measurement set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    donors?: Set<string>;
    /**
     * The category that best describes this measurement set.
     * @type {string}
     * @memberof MeasurementSet
     */
    fileSetType?: MeasurementSetFileSetTypeEnum;
    /**
     * The assay used to produce data in this measurement set.
     * @type {string}
     * @memberof MeasurementSet
     */
    assayTerm?: string;
    /**
     * The platform used to construct the library sequenced in this measurement set.
     * @type {string}
     * @memberof MeasurementSet
     */
    libraryConstructionPlatform?: string;
    /**
     * Links to the protocol(s) for conducting the assay on Protocols.io.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    protocols?: Set<string>;
    /**
     * The custom lab preferred label for the experiment performed in this measurement set.
     * @type {string}
     * @memberof MeasurementSet
     */
    preferredAssayTitle?: MeasurementSetPreferredAssayTitleEnum;
    /**
     * The number of datasets included in the multiome experiment this measurement set is a part of.
     * @type {number}
     * @memberof MeasurementSet
     */
    multiomeSize?: number;
    /**
     * File sets that can serve as scientific controls for this measurement_set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    controlFileSets?: Set<string>;
    /**
     * Description of the libraries sequenced in this measurement set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    sequencingLibraryTypes?: Set<MeasurementSetSequencingLibraryTypesEnum>;
    /**
     * The auxiliary sets of files produced alongside raw data from this measurement set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    auxiliarySets?: Set<string>;
    /**
     * Links to the external site where images produced by this measurement are stored.
     * @type {string}
     * @memberof MeasurementSet
     */
    externalImageUrl?: string;
    /**
     * A list of genes targeted in this assay. For example, TF ChIP-seq attempts to identify binding sites of a protein encoded by a specific gene. In CRISPR FlowFISH, the modified samples are sorted based on expression of a specific gene. This property differs from small_scale_gene_list in Construct Library Set, which describes genes targeted by the content integrated in the constructs (such as guide RNAs.)
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    targetedGenes?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof MeasurementSet
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MeasurementSet
     */
    type?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MeasurementSet
     */
    summary?: string;
    /**
     * The files associated with this file set.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    files?: Set<string>;
    /**
     * The file sets for which this file set is a control.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    controlFor?: Set<string>;
    /**
     * The timestamp the first file object in the file_set or associated auxiliary sets was created.
     * @type {string}
     * @memberof MeasurementSet
     */
    submittedFilesTimestamp?: string;
    /**
     * The file sets that use this file set as an input.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    inputFileSetFor?: Set<string>;
    /**
     * Related datasets included in the multiome experiment this measurement set is a part of.
     * @type {Set<string>}
     * @memberof MeasurementSet
     */
    relatedMultiomeDatasets?: Set<string>;
}


/**
 * @export
 */
export const MeasurementSetCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type MeasurementSetCollectionsEnum = typeof MeasurementSetCollectionsEnum[keyof typeof MeasurementSetCollectionsEnum];

/**
 * @export
 */
export const MeasurementSetStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MeasurementSetStatusEnum = typeof MeasurementSetStatusEnum[keyof typeof MeasurementSetStatusEnum];

/**
 * @export
 */
export const MeasurementSetFileSetTypeEnum = {
    ExperimentalData: 'experimental data'
} as const;
export type MeasurementSetFileSetTypeEnum = typeof MeasurementSetFileSetTypeEnum[keyof typeof MeasurementSetFileSetTypeEnum];

/**
 * @export
 */
export const MeasurementSetPreferredAssayTitleEnum = {
    _10xMultiome: '10x multiome',
    _10xMultiomeWithMultiSeq: '10x multiome with MULTI-seq',
    AavMpra: 'AAV-MPRA',
    AtacSeq: 'ATAC-seq',
    CeresSeq: 'CERES-seq',
    CellPainting: 'Cell painting',
    CrisprFlowFish: 'CRISPR FlowFISH',
    DogmaSeq: 'DOGMA-seq',
    HistoneChIpSeq: 'Histone ChIP-seq',
    HiC: 'Hi-C',
    LentiMpra: 'lentiMPRA',
    Merfish: 'MERFISH',
    Miaa: 'MIAA',
    MN2H: 'mN2H',
    Mpra: 'MPRA',
    MpraScQer: 'MPRA (scQer)',
    MultiSeq: 'MULTI-seq',
    ParseSpliTSeq: 'Parse SPLiT-seq',
    PerturbSeq: 'Perturb-seq',
    RnaSeq: 'RNA-seq',
    Sge: 'SGE',
    ScAtacSeq: 'scATAC-seq',
    ScNtSeq: 'scNT-seq',
    ScNtSeq2: 'scNT-seq2',
    ScRnaSeq: 'scRNA-seq',
    SemiQY2H: 'semi-qY2H',
    ShareSeq: 'SHARE-seq',
    SmFish: 'smFISH',
    SnAtacSeq: 'snATAC-seq',
    SnmCSeq2: 'snmC-Seq2',
    SnMctSeq: 'snMCT-seq',
    SnM3CSeq: 'snM3C-seq',
    SnRnaSeq: 'snRNA-seq',
    Superstarr: 'SUPERSTARR',
    TapSeq: 'TAP-seq',
    TfChIpSeq: 'TF ChIP-seq',
    VampSeq: 'VAMP-seq',
    VariantFlowFish: 'Variant FlowFISH',
    VariantPainting: 'Variant painting',
    Y2H: 'Y2H',
    YN2H: 'yN2H'
} as const;
export type MeasurementSetPreferredAssayTitleEnum = typeof MeasurementSetPreferredAssayTitleEnum[keyof typeof MeasurementSetPreferredAssayTitleEnum];

/**
 * @export
 */
export const MeasurementSetSequencingLibraryTypesEnum = {
    DirectRna: 'direct RNA',
    ExomeCapture: 'exome capture',
    MRnaEnriched: 'mRNA enriched',
    RRnaDepleted: 'rRNA depleted',
    PolyADepleted: 'polyA depleted',
    PolyAEnriched: 'polyA enriched'
} as const;
export type MeasurementSetSequencingLibraryTypesEnum = typeof MeasurementSetSequencingLibraryTypesEnum[keyof typeof MeasurementSetSequencingLibraryTypesEnum];


/**
 * Check if a given object implements the MeasurementSet interface.
 */
export function instanceOfMeasurementSet(value: object): value is MeasurementSet {
    return true;
}

export function MeasurementSetFromJSON(json: any): MeasurementSet {
    return MeasurementSetFromJSONTyped(json, false);
}

export function MeasurementSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementSet {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'samples': json['samples'] == null ? undefined : json['samples'],
        'donors': json['donors'] == null ? undefined : json['donors'],
        'fileSetType': json['file_set_type'] == null ? undefined : json['file_set_type'],
        'assayTerm': json['assay_term'] == null ? undefined : json['assay_term'],
        'libraryConstructionPlatform': json['library_construction_platform'] == null ? undefined : json['library_construction_platform'],
        'protocols': json['protocols'] == null ? undefined : json['protocols'],
        'preferredAssayTitle': json['preferred_assay_title'] == null ? undefined : json['preferred_assay_title'],
        'multiomeSize': json['multiome_size'] == null ? undefined : json['multiome_size'],
        'controlFileSets': json['control_file_sets'] == null ? undefined : json['control_file_sets'],
        'sequencingLibraryTypes': json['sequencing_library_types'] == null ? undefined : json['sequencing_library_types'],
        'auxiliarySets': json['auxiliary_sets'] == null ? undefined : json['auxiliary_sets'],
        'externalImageUrl': json['external_image_url'] == null ? undefined : json['external_image_url'],
        'targetedGenes': json['targeted_genes'] == null ? undefined : json['targeted_genes'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'files': json['files'] == null ? undefined : json['files'],
        'controlFor': json['control_for'] == null ? undefined : json['control_for'],
        'submittedFilesTimestamp': json['submitted_files_timestamp'] == null ? undefined : json['submitted_files_timestamp'],
        'inputFileSetFor': json['input_file_set_for'] == null ? undefined : json['input_file_set_for'],
        'relatedMultiomeDatasets': json['related_multiome_datasets'] == null ? undefined : json['related_multiome_datasets'],
    };
}

export function MeasurementSetToJSON(value?: MeasurementSet | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'samples': value['samples'] == null ? undefined : Array.from(value['samples'] as Set<any>),
        'donors': value['donors'] == null ? undefined : Array.from(value['donors'] as Set<any>),
        'file_set_type': value['fileSetType'],
        'assay_term': value['assayTerm'],
        'library_construction_platform': value['libraryConstructionPlatform'],
        'protocols': value['protocols'] == null ? undefined : Array.from(value['protocols'] as Set<any>),
        'preferred_assay_title': value['preferredAssayTitle'],
        'multiome_size': value['multiomeSize'],
        'control_file_sets': value['controlFileSets'] == null ? undefined : Array.from(value['controlFileSets'] as Set<any>),
        'sequencing_library_types': value['sequencingLibraryTypes'] == null ? undefined : Array.from(value['sequencingLibraryTypes'] as Set<any>),
        'auxiliary_sets': value['auxiliarySets'] == null ? undefined : Array.from(value['auxiliarySets'] as Set<any>),
        'external_image_url': value['externalImageUrl'],
        'targeted_genes': value['targetedGenes'] == null ? undefined : Array.from(value['targetedGenes'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'files': value['files'] == null ? undefined : Array.from(value['files'] as Set<any>),
        'control_for': value['controlFor'] == null ? undefined : Array.from(value['controlFor'] as Set<any>),
        'submitted_files_timestamp': value['submittedFilesTimestamp'],
        'input_file_set_for': value['inputFileSetFor'] == null ? undefined : Array.from(value['inputFileSetFor'] as Set<any>),
        'related_multiome_datasets': value['relatedMultiomeDatasets'] == null ? undefined : Array.from(value['relatedMultiomeDatasets'] as Set<any>),
    };
}

