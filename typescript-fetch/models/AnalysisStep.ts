/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A step in a computational analysis workflow. For example, a sequence alignment step that represents the phase of the computational analysis in which sequenced reads are being aligned to the reference genome.
 * @export
 * @interface AnalysisStep
 */
export interface AnalysisStep {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof AnalysisStep
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof AnalysisStep
     */
    status?: AnalysisStepStatusEnum;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof AnalysisStep
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof AnalysisStep
     */
    award?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof AnalysisStep
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof AnalysisStep
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof AnalysisStep
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof AnalysisStep
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof AnalysisStep
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof AnalysisStep
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof AnalysisStep
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof AnalysisStep
     */
    description?: string;
    /**
     * The classification of the software.
     * @type {Set<string>}
     * @memberof AnalysisStep
     */
    analysisStepTypes?: Set<AnalysisStepAnalysisStepTypesEnum>;
    /**
     * Unique lowercased label of the analysis step that includes the relevant assays, the software used, and the purpose of the step, e.g. rampage-grit-peak-calling-step
     * @type {string}
     * @memberof AnalysisStep
     */
    stepLabel?: string;
    /**
     * The preferred viewable name of the analysis step, likely the same as the step label.
     * @type {string}
     * @memberof AnalysisStep
     */
    title?: string;
    /**
     * The computational workflow in which this analysis step belongs.
     * @type {string}
     * @memberof AnalysisStep
     */
    workflow?: string;
    /**
     * The precursor steps.
     * @type {Set<string>}
     * @memberof AnalysisStep
     */
    parents?: Set<string>;
    /**
     * The content types used as input for the analysis step.
     * @type {Set<string>}
     * @memberof AnalysisStep
     */
    inputContentTypes?: Set<string>;
    /**
     * The content types produced as output by the analysis step.
     * @type {Set<string>}
     * @memberof AnalysisStep
     */
    outputContentTypes?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof AnalysisStep
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnalysisStep
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof AnalysisStep
     */
    summary?: string;
    /**
     * Full name of the analysis step.
     * @type {string}
     * @memberof AnalysisStep
     */
    name?: string;
}


/**
 * @export
 */
export const AnalysisStepStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AnalysisStepStatusEnum = typeof AnalysisStepStatusEnum[keyof typeof AnalysisStepStatusEnum];

/**
 * @export
 */
export const AnalysisStepAnalysisStepTypesEnum = {
    Alignment: 'alignment',
    FileFormatConversion: 'file format conversion',
    SignalGeneration: 'signal generation'
} as const;
export type AnalysisStepAnalysisStepTypesEnum = typeof AnalysisStepAnalysisStepTypesEnum[keyof typeof AnalysisStepAnalysisStepTypesEnum];


/**
 * Check if a given object implements the AnalysisStep interface.
 */
export function instanceOfAnalysisStep(value: object): value is AnalysisStep {
    return true;
}

export function AnalysisStepFromJSON(json: any): AnalysisStep {
    return AnalysisStepFromJSONTyped(json, false);
}

export function AnalysisStepFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalysisStep {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'analysisStepTypes': json['analysis_step_types'] == null ? undefined : json['analysis_step_types'],
        'stepLabel': json['step_label'] == null ? undefined : json['step_label'],
        'title': json['title'] == null ? undefined : json['title'],
        'workflow': json['workflow'] == null ? undefined : json['workflow'],
        'parents': json['parents'] == null ? undefined : json['parents'],
        'inputContentTypes': json['input_content_types'] == null ? undefined : json['input_content_types'],
        'outputContentTypes': json['output_content_types'] == null ? undefined : json['output_content_types'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'name': json['name'] == null ? undefined : json['name'],
    };
}

export function AnalysisStepToJSON(value?: AnalysisStep | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'lab': value['lab'],
        'award': value['award'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'analysis_step_types': value['analysisStepTypes'] == null ? undefined : Array.from(value['analysisStepTypes'] as Set<any>),
        'step_label': value['stepLabel'],
        'title': value['title'],
        'workflow': value['workflow'],
        'parents': value['parents'] == null ? undefined : Array.from(value['parents'] as Set<any>),
        'input_content_types': value['inputContentTypes'] == null ? undefined : Array.from(value['inputContentTypes'] as Set<any>),
        'output_content_types': value['outputContentTypes'] == null ? undefined : Array.from(value['outputContentTypes'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'name': value['name'],
    };
}

