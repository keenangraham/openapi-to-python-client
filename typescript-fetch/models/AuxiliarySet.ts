/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Auxiliary set is a file set that hosts raw data files (e.g. FASTQs) resulting from sequencing of nucleic acids of a sample that are a proxy to some vital information and necessary for the analysis of an associated measurement set. Auxiliary sets usually would not provide any information about the transcriptome or the genome of the sample in question. For example auxiliary sets would include the sequencing of barcodes that correspond to the elements introduced into cells, or sequencing of guide RNA coding sequences in the cells. The files hosted in the auxiliary sets are relevant for the analysis, but they by themselves are not assessing much of the biology of the sample being analyzed.
 * @export
 * @interface AuxiliarySet
 */
export interface AuxiliarySet {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof AuxiliarySet
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    publicationIdentifiers?: Set<string>;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof AuxiliarySet
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof AuxiliarySet
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof AuxiliarySet
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    collections?: Set<AuxiliarySetCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof AuxiliarySet
     */
    status?: AuxiliarySetStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof AuxiliarySet
     */
    revokeDetail?: string;
    /**
     * An external resource with additional information.
     * @type {string}
     * @memberof AuxiliarySet
     */
    url?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof AuxiliarySet
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof AuxiliarySet
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof AuxiliarySet
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof AuxiliarySet
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof AuxiliarySet
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof AuxiliarySet
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof AuxiliarySet
     */
    description?: string;
    /**
     * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF file sets.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    dbxrefs?: Set<string>;
    /**
     * The sample(s) associated with this file set.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    samples?: Set<string>;
    /**
     * The donors of the samples associated with this auxiliary set.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    donors?: Set<string>;
    /**
     * The category that best describes this auxiliary file set.
     * @type {string}
     * @memberof AuxiliarySet
     */
    fileSetType?: AuxiliarySetFileSetTypeEnum;
    /**
     * The platform used to construct the library sequenced in this auxiliary set.
     * @type {string}
     * @memberof AuxiliarySet
     */
    libraryConstructionPlatform?: string;
    /**
     * 
     * @type {string}
     * @memberof AuxiliarySet
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuxiliarySet
     */
    type?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AuxiliarySet
     */
    summary?: string;
    /**
     * The files associated with this file set.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    files?: Set<string>;
    /**
     * The file sets for which this file set is a control.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    controlFor?: Set<string>;
    /**
     * The timestamp the first file object in the file_set or associated auxiliary sets was created.
     * @type {string}
     * @memberof AuxiliarySet
     */
    submittedFilesTimestamp?: string;
    /**
     * The file sets that use this file set as an input.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    inputFileSetFor?: Set<string>;
    /**
     * The measurement sets that link to this auxiliary set.
     * @type {Set<string>}
     * @memberof AuxiliarySet
     */
    measurementSets?: Set<string>;
}


/**
 * @export
 */
export const AuxiliarySetCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type AuxiliarySetCollectionsEnum = typeof AuxiliarySetCollectionsEnum[keyof typeof AuxiliarySetCollectionsEnum];

/**
 * @export
 */
export const AuxiliarySetStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AuxiliarySetStatusEnum = typeof AuxiliarySetStatusEnum[keyof typeof AuxiliarySetStatusEnum];

/**
 * @export
 */
export const AuxiliarySetFileSetTypeEnum = {
    CellHashing: 'cell hashing',
    CellSorting: 'cell sorting',
    CircularizedRnaBarcodeDetection: 'circularized RNA barcode detection',
    GRnaSequencing: 'gRNA sequencing',
    OligoConjugatedLipids: 'oligo-conjugated lipids',
    QuantificationDnaBarcodeSequencing: 'quantification DNA barcode sequencing',
    VariantSequencing: 'variant sequencing'
} as const;
export type AuxiliarySetFileSetTypeEnum = typeof AuxiliarySetFileSetTypeEnum[keyof typeof AuxiliarySetFileSetTypeEnum];


/**
 * Check if a given object implements the AuxiliarySet interface.
 */
export function instanceOfAuxiliarySet(value: object): value is AuxiliarySet {
    return true;
}

export function AuxiliarySetFromJSON(json: any): AuxiliarySet {
    return AuxiliarySetFromJSONTyped(json, false);
}

export function AuxiliarySetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuxiliarySet {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'url': json['url'] == null ? undefined : json['url'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'samples': json['samples'] == null ? undefined : json['samples'],
        'donors': json['donors'] == null ? undefined : json['donors'],
        'fileSetType': json['file_set_type'] == null ? undefined : json['file_set_type'],
        'libraryConstructionPlatform': json['library_construction_platform'] == null ? undefined : json['library_construction_platform'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'files': json['files'] == null ? undefined : json['files'],
        'controlFor': json['control_for'] == null ? undefined : json['control_for'],
        'submittedFilesTimestamp': json['submitted_files_timestamp'] == null ? undefined : json['submitted_files_timestamp'],
        'inputFileSetFor': json['input_file_set_for'] == null ? undefined : json['input_file_set_for'],
        'measurementSets': json['measurement_sets'] == null ? undefined : json['measurement_sets'],
    };
}

export function AuxiliarySetToJSON(value?: AuxiliarySet | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'url': value['url'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'samples': value['samples'] == null ? undefined : Array.from(value['samples'] as Set<any>),
        'donors': value['donors'] == null ? undefined : Array.from(value['donors'] as Set<any>),
        'file_set_type': value['fileSetType'],
        'library_construction_platform': value['libraryConstructionPlatform'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'files': value['files'] == null ? undefined : Array.from(value['files'] as Set<any>),
        'control_for': value['controlFor'] == null ? undefined : Array.from(value['controlFor'] as Set<any>),
        'submitted_files_timestamp': value['submittedFilesTimestamp'],
        'input_file_set_for': value['inputFileSetFor'] == null ? undefined : Array.from(value['inputFileSetFor'] as Set<any>),
        'measurement_sets': value['measurementSets'] == null ? undefined : Array.from(value['measurementSets'] as Set<any>),
    };
}

