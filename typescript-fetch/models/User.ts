/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A user of IGVF data portal who is a member or affiliate member of IGVF.
 * @export
 * @interface User
 */
export interface User {
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof User
     */
    status?: UserStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof User
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof User
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof User
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof User
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof User
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof User
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof User
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof User
     */
    description?: string;
    /**
     * The email associated with the user's account.
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * The user's first (given) name.
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * The user's last (family) name.
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * Lab user is primarily associated with.
     * @type {string}
     * @memberof User
     */
    lab?: string;
    /**
     * Labs user is authorized to submit data for.
     * @type {Set<string>}
     * @memberof User
     */
    submitsFor?: Set<string>;
    /**
     * Additional access control groups
     * @type {Set<string>}
     * @memberof User
     */
    groups?: Set<UserGroupsEnum>;
    /**
     * The group that determines which set of data the user has permission to view.
     * @type {Set<string>}
     * @memberof User
     */
    viewingGroups?: Set<UserViewingGroupsEnum>;
    /**
     * The role of the user in their lab or organization.
     * @type {string}
     * @memberof User
     */
    jobTitle?: UserJobTitleEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof User
     */
    summary?: string;
    /**
     * The full name of the user.
     * @type {string}
     * @memberof User
     */
    title?: string;
}


/**
 * @export
 */
export const UserStatusEnum = {
    Current: 'current',
    Deleted: 'deleted',
    Disabled: 'disabled'
} as const;
export type UserStatusEnum = typeof UserStatusEnum[keyof typeof UserStatusEnum];

/**
 * @export
 */
export const UserGroupsEnum = {
    Admin: 'admin',
    ReadOnlyAdmin: 'read-only-admin',
    Verified: 'verified'
} as const;
export type UserGroupsEnum = typeof UserGroupsEnum[keyof typeof UserGroupsEnum];

/**
 * @export
 */
export const UserViewingGroupsEnum = {
    Community: 'community',
    Igvf: 'IGVF'
} as const;
export type UserViewingGroupsEnum = typeof UserViewingGroupsEnum[keyof typeof UserViewingGroupsEnum];

/**
 * @export
 */
export const UserJobTitleEnum = {
    PrincipalInvestigator: 'Principal Investigator',
    CoInvestigator: 'Co-Investigator',
    ProjectManager: 'Project Manager',
    Submitter: 'Submitter',
    PostDoc: 'Post Doc',
    DataWrangler: 'Data Wrangler',
    Scientist: 'Scientist',
    ComputationalScientist: 'Computational Scientist',
    SoftwareDeveloper: 'Software Developer',
    NhgriStaffMember: 'NHGRI staff member',
    Other: 'Other'
} as const;
export type UserJobTitleEnum = typeof UserJobTitleEnum[keyof typeof UserJobTitleEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'email': json['email'] == null ? undefined : json['email'],
        'firstName': json['first_name'] == null ? undefined : json['first_name'],
        'lastName': json['last_name'] == null ? undefined : json['last_name'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'submitsFor': json['submits_for'] == null ? undefined : json['submits_for'],
        'groups': json['groups'] == null ? undefined : json['groups'],
        'viewingGroups': json['viewing_groups'] == null ? undefined : json['viewing_groups'],
        'jobTitle': json['job_title'] == null ? undefined : json['job_title'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'title': json['title'] == null ? undefined : json['title'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'email': value['email'],
        'first_name': value['firstName'],
        'last_name': value['lastName'],
        'lab': value['lab'],
        'submits_for': value['submitsFor'] == null ? undefined : Array.from(value['submitsFor'] as Set<any>),
        'groups': value['groups'] == null ? undefined : Array.from(value['groups'] as Set<any>),
        'viewing_groups': value['viewingGroups'] == null ? undefined : Array.from(value['viewingGroups'] as Set<any>),
        'job_title': value['jobTitle'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'title': value['title'],
    };
}

