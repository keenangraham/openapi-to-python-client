/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Gene location specified using 1-based, closed coordinates for a specific version of the reference genome assembly.
 * @export
 * @interface GeneLocation1
 */
export interface GeneLocation1 {
    /**
     * The genome assembly to which coordinates relate. e.g. GRCh38.
     * @type {string}
     * @memberof GeneLocation1
     */
    assembly: GeneLocation1AssemblyEnum;
    /**
     * The number (or letter) designation for the chromosome, e.g. chr1 or chrX
     * @type {string}
     * @memberof GeneLocation1
     */
    chromosome: string;
    /**
     * The starting coordinate.
     * @type {number}
     * @memberof GeneLocation1
     */
    start: number;
    /**
     * The ending coordinate.
     * @type {number}
     * @memberof GeneLocation1
     */
    end: number;
}


/**
 * @export
 */
export const GeneLocation1AssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type GeneLocation1AssemblyEnum = typeof GeneLocation1AssemblyEnum[keyof typeof GeneLocation1AssemblyEnum];


/**
 * Check if a given object implements the GeneLocation1 interface.
 */
export function instanceOfGeneLocation1(value: object): value is GeneLocation1 {
    if (!('assembly' in value) || value['assembly'] === undefined) return false;
    if (!('chromosome' in value) || value['chromosome'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    return true;
}

export function GeneLocation1FromJSON(json: any): GeneLocation1 {
    return GeneLocation1FromJSONTyped(json, false);
}

export function GeneLocation1FromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneLocation1 {
    if (json == null) {
        return json;
    }
    return {
        
        'assembly': json['assembly'],
        'chromosome': json['chromosome'],
        'start': json['start'],
        'end': json['end'],
    };
}

export function GeneLocation1ToJSON(value?: GeneLocation1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assembly': value['assembly'],
        'chromosome': value['chromosome'],
        'start': value['start'],
        'end': value['end'],
    };
}

