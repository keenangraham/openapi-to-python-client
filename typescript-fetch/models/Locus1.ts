/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Locus1
 */
export interface Locus1 {
    /**
     * The genome assembly to which coordinates relate (e.g., GRCh38).
     * @type {string}
     * @memberof Locus1
     */
    assembly: Locus1AssemblyEnum;
    /**
     * The number (or letter) designation for the chromosome, e.g. chr1 or chrX
     * @type {string}
     * @memberof Locus1
     */
    chromosome: string;
    /**
     * The 1-based, closed (inclusive) starting coordinate.
     * @type {number}
     * @memberof Locus1
     */
    start: number;
    /**
     * The 1-based, closed (inclusive) ending coordinate.
     * @type {number}
     * @memberof Locus1
     */
    end: number;
}


/**
 * @export
 */
export const Locus1AssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type Locus1AssemblyEnum = typeof Locus1AssemblyEnum[keyof typeof Locus1AssemblyEnum];


/**
 * Check if a given object implements the Locus1 interface.
 */
export function instanceOfLocus1(value: object): value is Locus1 {
    if (!('assembly' in value) || value['assembly'] === undefined) return false;
    if (!('chromosome' in value) || value['chromosome'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    return true;
}

export function Locus1FromJSON(json: any): Locus1 {
    return Locus1FromJSONTyped(json, false);
}

export function Locus1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Locus1 {
    if (json == null) {
        return json;
    }
    return {
        
        'assembly': json['assembly'],
        'chromosome': json['chromosome'],
        'start': json['start'],
        'end': json['end'],
    };
}

export function Locus1ToJSON(value?: Locus1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assembly': value['assembly'],
        'chromosome': value['chromosome'],
        'start': value['start'],
        'end': value['end'],
    };
}

