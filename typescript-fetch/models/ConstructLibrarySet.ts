/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Locus1 } from './Locus1';
import {
    Locus1FromJSON,
    Locus1FromJSONTyped,
    Locus1ToJSON,
} from './Locus1';
import type { Tile } from './Tile';
import {
    TileFromJSON,
    TileFromJSONTyped,
    TileToJSON,
} from './Tile';

/**
 * Construct library set is a file set that hosts raw data files (e.g. FASTQs) resulting from sequencing of a library prior to its delivery into the samples being investigated. For example sequencing results of guide RNAs after cloning them but prior to their delivery to the actual samples under investigation. The results thus represent the sequencing output of the guides that are then introduced into cells, but may not always correspond to what exact guides ended up being delivered or expressed. Not all construct library sets will end up having FASTQs or any other files in them. For example if the lab chooses not to sequence their guide library prior to delivery, no FASTQs will be required in that case. Construct library sets should not be associated with any samples because they are designed to capture the library prior to its delivery and hence, has no relation to the ample that will get the plasmids eventually.
 * @export
 * @interface ConstructLibrarySet
 */
export interface ConstructLibrarySet {
    /**
     * A small scale (<=100) list of specific chromosomal region(s).
     * @type {Set<Locus1>}
     * @memberof ConstructLibrarySet
     */
    smallScaleLociList?: Set<Locus1>;
    /**
     * A large scale list (>100) of specific chromosomal regions.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    largeScaleLociList?: string;
    /**
     * The specific, small scale list of (<=100) gene(s) this construct library was designed to target. This property differs from targeted_genes in Measurement Set, which describes genes targeted for binding sites or used for sorting by expression.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    smallScaleGeneList?: Set<string>;
    /**
     * The large scale list of (>100 genes) this construct library was designed to target.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    largeScaleGeneList?: string;
    /**
     * The date the object was released.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    publicationIdentifiers?: Set<string>;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    documents?: Set<string>;
    /**
     * The originating lab(s) or vendor(s).
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    sources?: Set<string>;
    /**
     * The lot identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    lotId?: string;
    /**
     * The product or catalog identifier provided following deposition to addgene.org.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    productId?: string;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    collections?: Set<ConstructLibrarySetCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    status?: ConstructLibrarySetStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    description?: string;
    /**
     * The type or category of this construct library set.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    fileSetType?: ConstructLibrarySetFileSetTypeEnum;
    /**
     * The scope or scale that this construct library is designed to target. If the scope is across gene(s) or loci, these will need to be specified in the genes or loci property. If exon is specified, an exon identifier and the associated gene will need to be listed in exon and genes properties. If tile is specified, a tile identifier, start and stop coordinates, and the associated gene will need to be listed in tile and small_scale_gene_list or large_scale_gene_list properties.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    scope?: ConstructLibrarySetScopeEnum;
    /**
     * The criteria used to select the sequence material cloned into the library.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    selectionCriteria?: Set<ConstructLibrarySetSelectionCriteriaEnum>;
    /**
     * The files containing sequence material of interest either used for insert design or directly cloned into vectors in this library.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    integratedContentFiles?: Set<string>;
    /**
     * Ontological terms for diseases or phenotypes associated with the sequence material cloned in this construct library.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    associatedPhenotypes?: Set<string>;
    /**
     * List of Open Reading Frame this construct library was designed to target.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    orfList?: Set<string>;
    /**
     * An identifier in plain text for the specific exon in an expression vector library. The associated gene must be listed in the small_scale_gene_list property.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    exon?: string;
    /**
     * 
     * @type {Tile}
     * @memberof ConstructLibrarySet
     */
    tile?: Tile;
    /**
     * The design of guides used in a CRISPR library, paired-guide (pgRNA) or single-guide (sgRNA).
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    guideType?: ConstructLibrarySetGuideTypeEnum;
    /**
     * The tiling modality of guides across elements or loci in a CRISPR library.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    tilingModality?: ConstructLibrarySetTilingModalityEnum;
    /**
     * The average number of guides targeting each element of interest in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    averageGuideCoverage?: number;
    /**
     * Lower bound of the number of guides targeting each element of interest in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    lowerBoundGuideCoverage?: number;
    /**
     * Upper bound of the number of guides targeting each element of interest in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    upperBoundGuideCoverage?: number;
    /**
     * The average size of the inserts cloned into vectors in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    averageInsertSize?: number;
    /**
     * Lower bound of the size of the inserts cloned in vectors in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    lowerBoundInsertSize?: number;
    /**
     * Upper bound of the size of the inserts cloned in vectors in the library.
     * @type {number}
     * @memberof ConstructLibrarySet
     */
    upperBoundInsertSize?: number;
    /**
     * An identifier in plain text for the specific targeton in an editing template library. The associated gene must be listed in the small_scale_gene_list property.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    targeton?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConstructLibrarySet
     */
    type?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    summary?: string;
    /**
     * The files associated with this file set.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    files?: Set<string>;
    /**
     * The file sets for which this file set is a control.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    controlFor?: Set<string>;
    /**
     * The timestamp the first file object in the file_set or associated auxiliary sets was created.
     * @type {string}
     * @memberof ConstructLibrarySet
     */
    submittedFilesTimestamp?: string;
    /**
     * The file sets that use this file set as an input.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    inputFileSetFor?: Set<string>;
    /**
     * The samples that link to this construct library set.
     * @type {Set<string>}
     * @memberof ConstructLibrarySet
     */
    appliedToSamples?: Set<string>;
}


/**
 * @export
 */
export const ConstructLibrarySetCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ConstructLibrarySetCollectionsEnum = typeof ConstructLibrarySetCollectionsEnum[keyof typeof ConstructLibrarySetCollectionsEnum];

/**
 * @export
 */
export const ConstructLibrarySetStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ConstructLibrarySetStatusEnum = typeof ConstructLibrarySetStatusEnum[keyof typeof ConstructLibrarySetStatusEnum];

/**
 * @export
 */
export const ConstructLibrarySetFileSetTypeEnum = {
    GuideLibrary: 'guide library',
    ReporterLibrary: 'reporter library',
    ExpressionVectorLibrary: 'expression vector library',
    EditingTemplateLibrary: 'editing template library'
} as const;
export type ConstructLibrarySetFileSetTypeEnum = typeof ConstructLibrarySetFileSetTypeEnum[keyof typeof ConstructLibrarySetFileSetTypeEnum];

/**
 * @export
 */
export const ConstructLibrarySetScopeEnum = {
    Tile: 'tile',
    Exon: 'exon',
    Genes: 'genes',
    Loci: 'loci',
    GenomeWide: 'genome-wide',
    Interactors: 'interactors',
    Alleles: 'alleles',
    Targeton: 'targeton'
} as const;
export type ConstructLibrarySetScopeEnum = typeof ConstructLibrarySetScopeEnum[keyof typeof ConstructLibrarySetScopeEnum];

/**
 * @export
 */
export const ConstructLibrarySetSelectionCriteriaEnum = {
    AccessibleGenomeRegions: 'accessible genome regions',
    CandidateCisRegulatoryElements: 'candidate cis-regulatory elements',
    ChromatinStates: 'chromatin states',
    PhenotypeAssociatedVariants: 'phenotype-associated variants',
    DNaseHypersensitiveSites: 'DNase hypersensitive sites',
    Genes: 'genes',
    HistoneModifications: 'histone modifications',
    ProteinInteractors: 'protein interactors',
    SequenceVariants: 'sequence variants',
    SyntheticElements: 'synthetic elements',
    TranscriptionStartSites: 'transcription start sites',
    TfBindingSites: 'TF binding sites'
} as const;
export type ConstructLibrarySetSelectionCriteriaEnum = typeof ConstructLibrarySetSelectionCriteriaEnum[keyof typeof ConstructLibrarySetSelectionCriteriaEnum];

/**
 * @export
 */
export const ConstructLibrarySetGuideTypeEnum = {
    SgRna: 'sgRNA',
    PgRna: 'pgRNA'
} as const;
export type ConstructLibrarySetGuideTypeEnum = typeof ConstructLibrarySetGuideTypeEnum[keyof typeof ConstructLibrarySetGuideTypeEnum];

/**
 * @export
 */
export const ConstructLibrarySetTilingModalityEnum = {
    PeakTiling: 'peak tiling',
    FullTiling: 'full tiling',
    SparsePeaks: 'sparse peaks'
} as const;
export type ConstructLibrarySetTilingModalityEnum = typeof ConstructLibrarySetTilingModalityEnum[keyof typeof ConstructLibrarySetTilingModalityEnum];


/**
 * Check if a given object implements the ConstructLibrarySet interface.
 */
export function instanceOfConstructLibrarySet(value: object): value is ConstructLibrarySet {
    return true;
}

export function ConstructLibrarySetFromJSON(json: any): ConstructLibrarySet {
    return ConstructLibrarySetFromJSONTyped(json, false);
}

export function ConstructLibrarySetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstructLibrarySet {
    if (json == null) {
        return json;
    }
    return {
        
        'smallScaleLociList': json['small_scale_loci_list'] == null ? undefined : (new Set((json['small_scale_loci_list'] as Array<any>).map(Locus1FromJSON))),
        'largeScaleLociList': json['large_scale_loci_list'] == null ? undefined : json['large_scale_loci_list'],
        'smallScaleGeneList': json['small_scale_gene_list'] == null ? undefined : json['small_scale_gene_list'],
        'largeScaleGeneList': json['large_scale_gene_list'] == null ? undefined : json['large_scale_gene_list'],
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'sources': json['sources'] == null ? undefined : json['sources'],
        'lotId': json['lot_id'] == null ? undefined : json['lot_id'],
        'productId': json['product_id'] == null ? undefined : json['product_id'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'fileSetType': json['file_set_type'] == null ? undefined : json['file_set_type'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'selectionCriteria': json['selection_criteria'] == null ? undefined : json['selection_criteria'],
        'integratedContentFiles': json['integrated_content_files'] == null ? undefined : json['integrated_content_files'],
        'associatedPhenotypes': json['associated_phenotypes'] == null ? undefined : json['associated_phenotypes'],
        'orfList': json['orf_list'] == null ? undefined : json['orf_list'],
        'exon': json['exon'] == null ? undefined : json['exon'],
        'tile': json['tile'] == null ? undefined : TileFromJSON(json['tile']),
        'guideType': json['guide_type'] == null ? undefined : json['guide_type'],
        'tilingModality': json['tiling_modality'] == null ? undefined : json['tiling_modality'],
        'averageGuideCoverage': json['average_guide_coverage'] == null ? undefined : json['average_guide_coverage'],
        'lowerBoundGuideCoverage': json['lower_bound_guide_coverage'] == null ? undefined : json['lower_bound_guide_coverage'],
        'upperBoundGuideCoverage': json['upper_bound_guide_coverage'] == null ? undefined : json['upper_bound_guide_coverage'],
        'averageInsertSize': json['average_insert_size'] == null ? undefined : json['average_insert_size'],
        'lowerBoundInsertSize': json['lower_bound_insert_size'] == null ? undefined : json['lower_bound_insert_size'],
        'upperBoundInsertSize': json['upper_bound_insert_size'] == null ? undefined : json['upper_bound_insert_size'],
        'targeton': json['targeton'] == null ? undefined : json['targeton'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'files': json['files'] == null ? undefined : json['files'],
        'controlFor': json['control_for'] == null ? undefined : json['control_for'],
        'submittedFilesTimestamp': json['submitted_files_timestamp'] == null ? undefined : json['submitted_files_timestamp'],
        'inputFileSetFor': json['input_file_set_for'] == null ? undefined : json['input_file_set_for'],
        'appliedToSamples': json['applied_to_samples'] == null ? undefined : json['applied_to_samples'],
    };
}

export function ConstructLibrarySetToJSON(value?: ConstructLibrarySet | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'small_scale_loci_list': value['smallScaleLociList'] == null ? undefined : (Array.from(value['smallScaleLociList'] as Set<any>).map(Locus1ToJSON)),
        'large_scale_loci_list': value['largeScaleLociList'],
        'small_scale_gene_list': value['smallScaleGeneList'] == null ? undefined : Array.from(value['smallScaleGeneList'] as Set<any>),
        'large_scale_gene_list': value['largeScaleGeneList'],
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'sources': value['sources'] == null ? undefined : Array.from(value['sources'] as Set<any>),
        'lot_id': value['lotId'],
        'product_id': value['productId'],
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'file_set_type': value['fileSetType'],
        'scope': value['scope'],
        'selection_criteria': value['selectionCriteria'] == null ? undefined : Array.from(value['selectionCriteria'] as Set<any>),
        'integrated_content_files': value['integratedContentFiles'] == null ? undefined : Array.from(value['integratedContentFiles'] as Set<any>),
        'associated_phenotypes': value['associatedPhenotypes'] == null ? undefined : Array.from(value['associatedPhenotypes'] as Set<any>),
        'orf_list': value['orfList'] == null ? undefined : Array.from(value['orfList'] as Set<any>),
        'exon': value['exon'],
        'tile': TileToJSON(value['tile']),
        'guide_type': value['guideType'],
        'tiling_modality': value['tilingModality'],
        'average_guide_coverage': value['averageGuideCoverage'],
        'lower_bound_guide_coverage': value['lowerBoundGuideCoverage'],
        'upper_bound_guide_coverage': value['upperBoundGuideCoverage'],
        'average_insert_size': value['averageInsertSize'],
        'lower_bound_insert_size': value['lowerBoundInsertSize'],
        'upper_bound_insert_size': value['upperBoundInsertSize'],
        'targeton': value['targeton'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'files': value['files'] == null ? undefined : Array.from(value['files'] as Set<any>),
        'control_for': value['controlFor'] == null ? undefined : Array.from(value['controlFor'] as Set<any>),
        'submitted_files_timestamp': value['submittedFilesTimestamp'],
        'input_file_set_for': value['inputFileSetFor'] == null ? undefined : Array.from(value['inputFileSetFor'] as Set<any>),
        'applied_to_samples': value['appliedToSamples'] == null ? undefined : Array.from(value['appliedToSamples'] as Set<any>),
    };
}

