/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A rodent donor of a biosample. Submission of any sample originating from a rodent donor requires submission of information about the relevant donor. The rodent donor can be a generic representative of an inbred strain, or a unique, individual mouse. For example, submission of a B6 mouse donor is a prerequisite for submission of any B6 mouse samples.
 * @export
 * @interface RodentDonor
 */
export interface RodentDonor {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof RodentDonor
     */
    releaseTimestamp?: string;
    /**
     * The species of the organism.
     * @type {string}
     * @memberof RodentDonor
     */
    taxa?: RodentDonorTaxaEnum;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    publicationIdentifiers?: Set<string>;
    /**
     * An external resource with additional information.
     * @type {string}
     * @memberof RodentDonor
     */
    url?: string;
    /**
     * The originating lab(s) or vendor(s).
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    sources?: Set<string>;
    /**
     * The lot identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof RodentDonor
     */
    lotId?: string;
    /**
     * The product identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof RodentDonor
     */
    productId?: string;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof RodentDonor
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof RodentDonor
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof RodentDonor
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    collections?: Set<RodentDonorCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof RodentDonor
     */
    status?: RodentDonorStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof RodentDonor
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof RodentDonor
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof RodentDonor
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof RodentDonor
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof RodentDonor
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof RodentDonor
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof RodentDonor
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof RodentDonor
     */
    description?: string;
    /**
     * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF donors.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    dbxrefs?: Set<string>;
    /**
     * Sex of the donor.
     * @type {string}
     * @memberof RodentDonor
     */
    sex?: RodentDonorSexEnum;
    /**
     * A list of associated phenotypic features of the donor.
     * @type {Set<string>}
     * @memberof RodentDonor
     */
    phenotypicFeatures?: Set<string>;
    /**
     * Virtual donors are not representing actual human or model organism donors, samples coming from which were used in experiments, but rather capturing metadata about hypothetical donors that the reported analysis results are relevant for.
     * @type {boolean}
     * @memberof RodentDonor
     */
    virtual?: boolean;
    /**
     * The specific parent strain designation of a non-human donor.
     * @type {string}
     * @memberof RodentDonor
     */
    strainBackground?: RodentDonorStrainBackgroundEnum;
    /**
     * The specific strain designation of a non-human donor.
     * @type {string}
     * @memberof RodentDonor
     */
    strain?: string;
    /**
     * The genotype of the strain according to accepted nomenclature conventions.
     * @type {string}
     * @memberof RodentDonor
     */
    genotype?: string;
    /**
     * This rodent donor represents an individual rodent.
     * @type {boolean}
     * @memberof RodentDonor
     */
    individualRodent?: boolean;
    /**
     * The identifier for this individual rodent donor.
     * @type {string}
     * @memberof RodentDonor
     */
    rodentIdentifier?: string;
    /**
     * 
     * @type {string}
     * @memberof RodentDonor
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RodentDonor
     */
    type?: Array<string>;
    /**
     * A summary of the rodent donor.
     * @type {string}
     * @memberof RodentDonor
     */
    summary?: string;
}


/**
 * @export
 */
export const RodentDonorTaxaEnum = {
    MusMusculus: 'Mus musculus'
} as const;
export type RodentDonorTaxaEnum = typeof RodentDonorTaxaEnum[keyof typeof RodentDonorTaxaEnum];

/**
 * @export
 */
export const RodentDonorCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type RodentDonorCollectionsEnum = typeof RodentDonorCollectionsEnum[keyof typeof RodentDonorCollectionsEnum];

/**
 * @export
 */
export const RodentDonorStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type RodentDonorStatusEnum = typeof RodentDonorStatusEnum[keyof typeof RodentDonorStatusEnum];

/**
 * @export
 */
export const RodentDonorSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type RodentDonorSexEnum = typeof RodentDonorSexEnum[keyof typeof RodentDonorSexEnum];

/**
 * @export
 */
export const RodentDonorStrainBackgroundEnum = {
    AJAj: 'A/J (AJ)',
    C57Bl6JB6: 'C57BL/6J (B6)',
    _129S1SvImJ129: '129S1/SvImJ (129)',
    NodShiLtJNod: 'NOD/ShiLtJ (NOD)',
    NzoH1LtJNzo: 'NZO/H1LtJ (NZO)',
    CastEiJCast: 'CAST/EiJ (CAST)',
    PwkPhJPwk: 'PWK/PhJ (PWK)',
    WsbEiJWsb: 'WSB/EiJ (WSB)',
    CastMMCastaneus: 'CAST (M. m. castaneus)',
    WsbMMDomesticus: 'WSB (M. m. domesticus)',
    PwkMMMusculus: 'PWK (M. m. musculus)'
} as const;
export type RodentDonorStrainBackgroundEnum = typeof RodentDonorStrainBackgroundEnum[keyof typeof RodentDonorStrainBackgroundEnum];


/**
 * Check if a given object implements the RodentDonor interface.
 */
export function instanceOfRodentDonor(value: object): value is RodentDonor {
    return true;
}

export function RodentDonorFromJSON(json: any): RodentDonor {
    return RodentDonorFromJSONTyped(json, false);
}

export function RodentDonorFromJSONTyped(json: any, ignoreDiscriminator: boolean): RodentDonor {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'taxa': json['taxa'] == null ? undefined : json['taxa'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'url': json['url'] == null ? undefined : json['url'],
        'sources': json['sources'] == null ? undefined : json['sources'],
        'lotId': json['lot_id'] == null ? undefined : json['lot_id'],
        'productId': json['product_id'] == null ? undefined : json['product_id'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'sex': json['sex'] == null ? undefined : json['sex'],
        'phenotypicFeatures': json['phenotypic_features'] == null ? undefined : json['phenotypic_features'],
        'virtual': json['virtual'] == null ? undefined : json['virtual'],
        'strainBackground': json['strain_background'] == null ? undefined : json['strain_background'],
        'strain': json['strain'] == null ? undefined : json['strain'],
        'genotype': json['genotype'] == null ? undefined : json['genotype'],
        'individualRodent': json['individual_rodent'] == null ? undefined : json['individual_rodent'],
        'rodentIdentifier': json['rodent_identifier'] == null ? undefined : json['rodent_identifier'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function RodentDonorToJSON(value?: RodentDonor | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'taxa': value['taxa'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'url': value['url'],
        'sources': value['sources'] == null ? undefined : Array.from(value['sources'] as Set<any>),
        'lot_id': value['lotId'],
        'product_id': value['productId'],
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'sex': value['sex'],
        'phenotypic_features': value['phenotypicFeatures'] == null ? undefined : Array.from(value['phenotypicFeatures'] as Set<any>),
        'virtual': value['virtual'],
        'strain_background': value['strainBackground'],
        'strain': value['strain'],
        'genotype': value['genotype'],
        'individual_rodent': value['individualRodent'],
        'rodent_identifier': value['rodentIdentifier'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
    };
}

