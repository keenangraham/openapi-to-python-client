/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A software used for computational  analysis. For example, Bowtie2 alignment software.
 * @export
 * @interface Software
 */
export interface Software {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof Software
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof Software
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof Software
     */
    publicationIdentifiers?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof Software
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof Software
     */
    award?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof Software
     */
    status?: SoftwareStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof Software
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof Software
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof Software
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof Software
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof Software
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof Software
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof Software
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof Software
     */
    description?: string;
    /**
     * Unique name of the software package; a lowercase version of the title.
     * @type {string}
     * @memberof Software
     */
    name?: string;
    /**
     * The preferred viewable name of the software.
     * @type {string}
     * @memberof Software
     */
    title?: string;
    /**
     * An external resource to the codebase.
     * @type {string}
     * @memberof Software
     */
    sourceUrl?: string;
    /**
     * The component(s) of the IGVF consortium that utilize this software.
     * @type {Set<string>}
     * @memberof Software
     */
    usedBy?: Set<SoftwareUsedByEnum>;
    /**
     * 
     * @type {string}
     * @memberof Software
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Software
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof Software
     */
    summary?: string;
    /**
     * A list of versions that have been released for this software.
     * @type {Set<string>}
     * @memberof Software
     */
    versions?: Set<string>;
}


/**
 * @export
 */
export const SoftwareStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type SoftwareStatusEnum = typeof SoftwareStatusEnum[keyof typeof SoftwareStatusEnum];

/**
 * @export
 */
export const SoftwareUsedByEnum = {
    ConsortiumAnalysis: 'consortium analysis',
    Dacc: 'DACC',
    ProcessingPipelines: 'processing pipelines'
} as const;
export type SoftwareUsedByEnum = typeof SoftwareUsedByEnum[keyof typeof SoftwareUsedByEnum];


/**
 * Check if a given object implements the Software interface.
 */
export function instanceOfSoftware(value: object): value is Software {
    return true;
}

export function SoftwareFromJSON(json: any): Software {
    return SoftwareFromJSONTyped(json, false);
}

export function SoftwareFromJSONTyped(json: any, ignoreDiscriminator: boolean): Software {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'name': json['name'] == null ? undefined : json['name'],
        'title': json['title'] == null ? undefined : json['title'],
        'sourceUrl': json['source_url'] == null ? undefined : json['source_url'],
        'usedBy': json['used_by'] == null ? undefined : json['used_by'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'versions': json['versions'] == null ? undefined : json['versions'],
    };
}

export function SoftwareToJSON(value?: Software | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'name': value['name'],
        'title': value['title'],
        'source_url': value['sourceUrl'],
        'used_by': value['usedBy'] == null ? undefined : Array.from(value['usedBy'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'versions': value['versions'] == null ? undefined : Array.from(value['versions'] as Set<any>),
    };
}

