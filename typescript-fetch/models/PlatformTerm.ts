/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An ontology term from Experimental Factor Ontology (EFO) for platforms and instruments used in assays.
 * @export
 * @interface PlatformTerm
 */
export interface PlatformTerm {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof PlatformTerm
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof PlatformTerm
     */
    status?: PlatformTermStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof PlatformTerm
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof PlatformTerm
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof PlatformTerm
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof PlatformTerm
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof PlatformTerm
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof PlatformTerm
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof PlatformTerm
     */
    description?: string;
    /**
     * An ontology term identifier describing a platform.
     * @type {string}
     * @memberof PlatformTerm
     */
    termId?: string;
    /**
     * Ontology term describing a biological sample, assay, trait, or disease.
     * @type {string}
     * @memberof PlatformTerm
     */
    termName?: string;
    /**
     * A list of deprecated NTR terms previously associated with this ontology term.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    deprecatedNtrTerms?: Set<string>;
    /**
     * A list of ontology terms which are the nearest ancestor to this ontology term.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    isA?: Set<string>;
    /**
     * The company that developed and sells the instrument.
     * @type {string}
     * @memberof PlatformTerm
     */
    company?: PlatformTermCompanyEnum;
    /**
     * The available sequencing kits for this platform.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    sequencingKits?: Set<PlatformTermSequencingKitsEnum>;
    /**
     * 
     * @type {string}
     * @memberof PlatformTerm
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlatformTerm
     */
    type?: Array<string>;
    /**
     * A summary of the ontology term.
     * @type {string}
     * @memberof PlatformTerm
     */
    summary?: string;
    /**
     * A unique identifier for the ontology term, reformatted from the original term ID.
     * @type {string}
     * @memberof PlatformTerm
     */
    name?: string;
    /**
     * Synonyms for the term that have been recorded in an ontology.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    synonyms?: Set<string>;
    /**
     * List of term names of ontological terms that precede the given term in the ontological tree. These ancestor terms are typically more general ontological terms under which the term is classified.
     * @type {Set<string>}
     * @memberof PlatformTerm
     */
    ancestors?: Set<string>;
    /**
     * The ontology in which the term is recorded.
     * @type {string}
     * @memberof PlatformTerm
     */
    ontology?: string;
}


/**
 * @export
 */
export const PlatformTermStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PlatformTermStatusEnum = typeof PlatformTermStatusEnum[keyof typeof PlatformTermStatusEnum];

/**
 * @export
 */
export const PlatformTermCompanyEnum = {
    _10XGenomics: '10X Genomics',
    Illumina: 'Illumina',
    LifeTechnologies: 'Life Technologies',
    OxfordNanoporeTechnologies: 'Oxford Nanopore Technologies',
    PacificBiosciences: 'Pacific Biosciences',
    ParseBiosciences: 'Parse Biosciences',
    Roche: 'Roche'
} as const;
export type PlatformTermCompanyEnum = typeof PlatformTermCompanyEnum[keyof typeof PlatformTermCompanyEnum];

/**
 * @export
 */
export const PlatformTermSequencingKitsEnum = {
    HiSeqSbsKitV4: 'HiSeq SBS Kit v4',
    HiSeqSrClusterKitV4CBotHs: 'HiSeq SR Cluster Kit v4-cBot-HS',
    HiSeqPeClusterKitV4CBotHs: 'HiSeq PE Cluster Kit v4-cBot-HS',
    HiSeqSrRapidClusterKitV2: 'HiSeq SR Rapid Cluster Kit v2',
    HiSeqPeRapidClusterKitV2: 'HiSeq PE Rapid Cluster Kit v2',
    HiSeqRapidSbsKitV2: 'HiSeq Rapid SBS Kit v2',
    HiSeq30004000SbsKit: 'HiSeq 3000/4000 SBS Kit',
    HiSeq30004000SrClusterKit: 'HiSeq 3000/4000 SR Cluster Kit',
    HiSeq30004000PeClusterKit: 'HiSeq 3000/4000 PE Cluster Kit',
    MiSeqReagentKitV2: 'MiSeq Reagent Kit v2',
    NextSeq500MidOutputKit: 'NextSeq 500 Mid Output Kit',
    NextSeq500HighOutputKit: 'NextSeq 500 High Output Kit',
    NextSeq500MidOutputV2Kit: 'NextSeq 500 Mid Output v2 Kit',
    NextSeq500HighOutputV2Kit: 'NextSeq 500 High Output v2 Kit',
    NextSeq500550MidOutputV25Kit: 'NextSeq 500/550 Mid-Output v2.5 Kit',
    NextSeq500550HighOutputV25Kit: 'NextSeq 500/550 High-Output v2.5 Kit',
    TgNextSeq500550MidOutputKitV25: 'TG NextSeq 500/550 Mid-Output Kit v2.5',
    TgNextSeq500550HighOutputKitV25: 'TG NextSeq 500/550 High-Output Kit v2.5',
    NextSeq10002000P1ReagentKit: 'NextSeq 1000/2000 P1 Reagent Kit',
    NextSeq10002000P2ReagentKit: 'NextSeq 1000/2000 P2 Reagent Kit',
    NextSeq10002000P3ReagentKit: 'NextSeq 1000/2000 P3 Reagent Kit',
    NextSeq10002000P1XleapSbsReagentKit: 'NextSeq 1000/2000 P1 XLEAP-SBS Reagent Kit',
    NextSeq10002000P2XleapSbsReagentKit: 'NextSeq 1000/2000 P2 XLEAP-SBS Reagent Kit',
    NextSeq2000P3XleapSbsReagentKit: 'NextSeq 2000 P3 XLEAP-SBS Reagent Kit',
    NextSeq2000P4XleapSbsReagentKit: 'NextSeq 2000 P4 XLEAP-SBS Reagent Kit',
    NovaSeq6000SpReagentKitV15: 'NovaSeq 6000 SP Reagent Kit v1.5',
    NovaSeq6000S1ReagentKitV15: 'NovaSeq 6000 S1 Reagent Kit v1.5',
    NovaSeq6000S2ReagentKitV15: 'NovaSeq 6000 S2 Reagent Kit v1.5',
    NovaSeq6000S4ReagentKitV15: 'NovaSeq 6000 S4 Reagent Kit v1.5',
    NovaSeqXSeries10BReagentKit: 'NovaSeq X Series 10B Reagent Kit',
    OntLigationSequencingKitV14: 'ONT Ligation Sequencing Kit V14',
    SequelSequencingKit30: 'Sequel sequencing kit 3.0',
    SequelIiSequencingKit20: 'Sequel II sequencing kit 2.0'
} as const;
export type PlatformTermSequencingKitsEnum = typeof PlatformTermSequencingKitsEnum[keyof typeof PlatformTermSequencingKitsEnum];


/**
 * Check if a given object implements the PlatformTerm interface.
 */
export function instanceOfPlatformTerm(value: object): value is PlatformTerm {
    return true;
}

export function PlatformTermFromJSON(json: any): PlatformTerm {
    return PlatformTermFromJSONTyped(json, false);
}

export function PlatformTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'termId': json['term_id'] == null ? undefined : json['term_id'],
        'termName': json['term_name'] == null ? undefined : json['term_name'],
        'deprecatedNtrTerms': json['deprecated_ntr_terms'] == null ? undefined : json['deprecated_ntr_terms'],
        'isA': json['is_a'] == null ? undefined : json['is_a'],
        'company': json['company'] == null ? undefined : json['company'],
        'sequencingKits': json['sequencing_kits'] == null ? undefined : json['sequencing_kits'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'name': json['name'] == null ? undefined : json['name'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'ancestors': json['ancestors'] == null ? undefined : json['ancestors'],
        'ontology': json['ontology'] == null ? undefined : json['ontology'],
    };
}

export function PlatformTermToJSON(value?: PlatformTerm | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'term_id': value['termId'],
        'term_name': value['termName'],
        'deprecated_ntr_terms': value['deprecatedNtrTerms'] == null ? undefined : Array.from(value['deprecatedNtrTerms'] as Set<any>),
        'is_a': value['isA'] == null ? undefined : Array.from(value['isA'] as Set<any>),
        'company': value['company'],
        'sequencing_kits': value['sequencingKits'] == null ? undefined : Array.from(value['sequencingKits'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'name': value['name'],
        'synonyms': value['synonyms'] == null ? undefined : Array.from(value['synonyms'] as Set<any>),
        'ancestors': value['ancestors'] == null ? undefined : Array.from(value['ancestors'] as Set<any>),
        'ontology': value['ontology'],
    };
}

