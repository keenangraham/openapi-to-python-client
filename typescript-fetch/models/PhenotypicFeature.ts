/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A phenotypic feature of a donor the sample is coming from. For example, the donorâ€™s height measured at the time of sample collection.
 * @export
 * @interface PhenotypicFeature
 */
export interface PhenotypicFeature {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    releaseTimestamp?: string;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    status?: PhenotypicFeatureStatusEnum;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    award?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof PhenotypicFeature
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    description?: string;
    /**
     * The phenotypic feature observed for the donor.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    feature?: string;
    /**
     * A quantity associated with the phenotypic feature, if applicable.
     * @type {number}
     * @memberof PhenotypicFeature
     */
    quantity?: number;
    /**
     * The unit of measurement for a quantity associated with the phenotypic feature.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    quantityUnits?: PhenotypicFeatureQuantityUnitsEnum;
    /**
     * The date the feature was observed or measured.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    observationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof PhenotypicFeature
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PhenotypicFeature
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof PhenotypicFeature
     */
    summary?: string;
}


/**
 * @export
 */
export const PhenotypicFeatureStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PhenotypicFeatureStatusEnum = typeof PhenotypicFeatureStatusEnum[keyof typeof PhenotypicFeatureStatusEnum];

/**
 * @export
 */
export const PhenotypicFeatureQuantityUnitsEnum = {
    Meter: 'meter',
    Micromole: 'micromole',
    Nanogram: 'nanogram',
    Microgram: 'microgram',
    Milligram: 'milligram',
    Gram: 'gram',
    Kilogram: 'kilogram',
    MilliInternationalUnitPerMilliliter: 'milli-International Unit per milliliter',
    PicogramPerMilliliter: 'picogram per milliliter',
    NanogramPerMilliliter: 'nanogram per milliliter',
    MilligramPerDeciliter: 'milligram per deciliter'
} as const;
export type PhenotypicFeatureQuantityUnitsEnum = typeof PhenotypicFeatureQuantityUnitsEnum[keyof typeof PhenotypicFeatureQuantityUnitsEnum];


/**
 * Check if a given object implements the PhenotypicFeature interface.
 */
export function instanceOfPhenotypicFeature(value: object): value is PhenotypicFeature {
    return true;
}

export function PhenotypicFeatureFromJSON(json: any): PhenotypicFeature {
    return PhenotypicFeatureFromJSONTyped(json, false);
}

export function PhenotypicFeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhenotypicFeature {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'status': json['status'] == null ? undefined : json['status'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'feature': json['feature'] == null ? undefined : json['feature'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'quantityUnits': json['quantity_units'] == null ? undefined : json['quantity_units'],
        'observationDate': json['observation_date'] == null ? undefined : json['observation_date'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
    };
}

export function PhenotypicFeatureToJSON(value?: PhenotypicFeature | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'status': value['status'],
        'lab': value['lab'],
        'award': value['award'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'feature': value['feature'],
        'quantity': value['quantity'],
        'quantity_units': value['quantityUnits'],
        'observation_date': value['observationDate'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
    };
}

