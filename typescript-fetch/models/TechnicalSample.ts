/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A sample that is used as a medium to perform biological measurement without the intent to characterize the technical sample itself. For example, the solution in which RNA oligos binding experiments are performed.
 * @export
 * @interface TechnicalSample
 */
export interface TechnicalSample {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof TechnicalSample
     */
    releaseTimestamp?: string;
    /**
     * The publications associated with this object.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    publications?: Set<string>;
    /**
     * The publication identifiers that provide more information about the object.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    publicationIdentifiers?: Set<string>;
    /**
     * An external resource with additional information.
     * @type {string}
     * @memberof TechnicalSample
     */
    url?: string;
    /**
     * The originating lab(s) or vendor(s).
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    sources?: Set<string>;
    /**
     * The lot identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof TechnicalSample
     */
    lotId?: string;
    /**
     * The product identifier provided by the originating lab or vendor.
     * @type {string}
     * @memberof TechnicalSample
     */
    productId?: string;
    /**
     * Documents that provide additional information (not data file).
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    documents?: Set<string>;
    /**
     * Lab associated with the submission.
     * @type {string}
     * @memberof TechnicalSample
     */
    lab?: string;
    /**
     * Grant associated with the submission.
     * @type {string}
     * @memberof TechnicalSample
     */
    award?: string;
    /**
     * A unique identifier to be used to reference the object prefixed with IGVF.
     * @type {string}
     * @memberof TechnicalSample
     */
    accession?: string;
    /**
     * Accessions previously assigned to objects that have been merged with this object.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    alternateAccessions?: Set<string>;
    /**
     * Some samples are part of particular data collections.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    collections?: Set<TechnicalSampleCollectionsEnum>;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof TechnicalSample
     */
    status?: TechnicalSampleStatusEnum;
    /**
     * Explanation of why an object was transitioned to the revoked status.
     * @type {string}
     * @memberof TechnicalSample
     */
    revokeDetail?: string;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof TechnicalSample
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof TechnicalSample
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof TechnicalSample
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof TechnicalSample
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof TechnicalSample
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof TechnicalSample
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof TechnicalSample
     */
    description?: string;
    /**
     * The initial quantity of samples obtained.
     * @type {number}
     * @memberof TechnicalSample
     */
    startingAmount?: number;
    /**
     * The units used to quantify the amount of samples obtained.
     * @type {string}
     * @memberof TechnicalSample
     */
    startingAmountUnits?: TechnicalSampleStartingAmountUnitsEnum;
    /**
     * Biosample identifiers from external resources, such as Biosample database or Cellosaurus.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    dbxrefs?: Set<string>;
    /**
     * The date the sample was harvested, dissected or created, depending on the type of the sample.
     * @type {string}
     * @memberof TechnicalSample
     */
    dateObtained?: string;
    /**
     * Links to a larger sample from which this sample was obtained through sorting.
     * @type {string}
     * @memberof TechnicalSample
     */
    sortedFrom?: string;
    /**
     * Detail for sample sorted into fractions capturing information about sorting.
     * @type {string}
     * @memberof TechnicalSample
     */
    sortedFromDetail?: string;
    /**
     * Virtual samples are not representing actual physical entities from experiments, but rather capturing metadata about hypothetical samples that the reported analysis results are relevant for.
     * @type {boolean}
     * @memberof TechnicalSample
     */
    virtual?: boolean;
    /**
     * The construct library sets of vectors introduced to this sample prior to performing an assay.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    constructLibrarySets?: Set<string>;
    /**
     * The actual multiplicity of infection (MOI) for vectors introduced to this sample. At least one construct library set must be specified in order to specify MOI. This property should capture the actual MOI, and not the targeted MOI.
     * @type {number}
     * @memberof TechnicalSample
     */
    moi?: number;
    /**
     * Method of introduction of nucleic acid into the cell.
     * @type {string}
     * @memberof TechnicalSample
     */
    nucleicAcidDelivery?: TechnicalSampleNucleicAcidDeliveryEnum;
    /**
     * The time that elapsed past the time-point when the construct library sets were introduced.
     * @type {number}
     * @memberof TechnicalSample
     */
    timePostLibraryDelivery?: number;
    /**
     * The units of time that elapsed past the point when the construct library sets were introduced.
     * @type {string}
     * @memberof TechnicalSample
     */
    timePostLibraryDeliveryUnits?: TechnicalSampleTimePostLibraryDeliveryUnitsEnum;
    /**
     * Links to the protocol(s) for preparing the samples on Protocols.io.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    protocols?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSample
     */
    sampleMaterial?: TechnicalSampleSampleMaterialEnum;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSample
     */
    taxa?: TechnicalSampleTaxaEnum;
    /**
     * Ontology terms identifying a technical sample.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    sampleTerms?: Set<string>;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSample
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TechnicalSample
     */
    type?: Array<string>;
    /**
     * A summary of this sample.
     * @type {string}
     * @memberof TechnicalSample
     */
    summary?: string;
    /**
     * The file sets linked to this sample.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    fileSets?: Set<string>;
    /**
     * The multiplexed samples in which this sample is included.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    multiplexedIn?: Set<string>;
    /**
     * The fractions into which this sample has been sorted.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    sortedFractions?: Set<string>;
    /**
     * The samples which originate from this sample, such as through a process of cell differentiation.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    originOf?: Set<string>;
    /**
     * The institutional certificates under which use of this sample is approved.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    institutionalCertificates?: Set<string>;
    /**
     * The general category of this type of sample.
     * @type {Set<string>}
     * @memberof TechnicalSample
     */
    classifications?: Set<string>;
}


/**
 * @export
 */
export const TechnicalSampleCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type TechnicalSampleCollectionsEnum = typeof TechnicalSampleCollectionsEnum[keyof typeof TechnicalSampleCollectionsEnum];

/**
 * @export
 */
export const TechnicalSampleStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TechnicalSampleStatusEnum = typeof TechnicalSampleStatusEnum[keyof typeof TechnicalSampleStatusEnum];

/**
 * @export
 */
export const TechnicalSampleStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type TechnicalSampleStartingAmountUnitsEnum = typeof TechnicalSampleStartingAmountUnitsEnum[keyof typeof TechnicalSampleStartingAmountUnitsEnum];

/**
 * @export
 */
export const TechnicalSampleNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type TechnicalSampleNucleicAcidDeliveryEnum = typeof TechnicalSampleNucleicAcidDeliveryEnum[keyof typeof TechnicalSampleNucleicAcidDeliveryEnum];

/**
 * @export
 */
export const TechnicalSampleTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type TechnicalSampleTimePostLibraryDeliveryUnitsEnum = typeof TechnicalSampleTimePostLibraryDeliveryUnitsEnum[keyof typeof TechnicalSampleTimePostLibraryDeliveryUnitsEnum];

/**
 * @export
 */
export const TechnicalSampleSampleMaterialEnum = {
    Undefined: 'undefined',
    Inorganic: 'inorganic',
    Synthetic: 'synthetic',
    Organic: 'organic'
} as const;
export type TechnicalSampleSampleMaterialEnum = typeof TechnicalSampleSampleMaterialEnum[keyof typeof TechnicalSampleSampleMaterialEnum];

/**
 * @export
 */
export const TechnicalSampleTaxaEnum = {
    SaccharomycesCerevisiae: 'Saccharomyces cerevisiae',
    HomoSapiens: 'Homo sapiens'
} as const;
export type TechnicalSampleTaxaEnum = typeof TechnicalSampleTaxaEnum[keyof typeof TechnicalSampleTaxaEnum];


/**
 * Check if a given object implements the TechnicalSample interface.
 */
export function instanceOfTechnicalSample(value: object): value is TechnicalSample {
    return true;
}

export function TechnicalSampleFromJSON(json: any): TechnicalSample {
    return TechnicalSampleFromJSONTyped(json, false);
}

export function TechnicalSampleFromJSONTyped(json: any, ignoreDiscriminator: boolean): TechnicalSample {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'publications': json['publications'] == null ? undefined : json['publications'],
        'publicationIdentifiers': json['publication_identifiers'] == null ? undefined : json['publication_identifiers'],
        'url': json['url'] == null ? undefined : json['url'],
        'sources': json['sources'] == null ? undefined : json['sources'],
        'lotId': json['lot_id'] == null ? undefined : json['lot_id'],
        'productId': json['product_id'] == null ? undefined : json['product_id'],
        'documents': json['documents'] == null ? undefined : json['documents'],
        'lab': json['lab'] == null ? undefined : json['lab'],
        'award': json['award'] == null ? undefined : json['award'],
        'accession': json['accession'] == null ? undefined : json['accession'],
        'alternateAccessions': json['alternate_accessions'] == null ? undefined : json['alternate_accessions'],
        'collections': json['collections'] == null ? undefined : json['collections'],
        'status': json['status'] == null ? undefined : json['status'],
        'revokeDetail': json['revoke_detail'] == null ? undefined : json['revoke_detail'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'startingAmount': json['starting_amount'] == null ? undefined : json['starting_amount'],
        'startingAmountUnits': json['starting_amount_units'] == null ? undefined : json['starting_amount_units'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'dateObtained': json['date_obtained'] == null ? undefined : json['date_obtained'],
        'sortedFrom': json['sorted_from'] == null ? undefined : json['sorted_from'],
        'sortedFromDetail': json['sorted_from_detail'] == null ? undefined : json['sorted_from_detail'],
        'virtual': json['virtual'] == null ? undefined : json['virtual'],
        'constructLibrarySets': json['construct_library_sets'] == null ? undefined : json['construct_library_sets'],
        'moi': json['moi'] == null ? undefined : json['moi'],
        'nucleicAcidDelivery': json['nucleic_acid_delivery'] == null ? undefined : json['nucleic_acid_delivery'],
        'timePostLibraryDelivery': json['time_post_library_delivery'] == null ? undefined : json['time_post_library_delivery'],
        'timePostLibraryDeliveryUnits': json['time_post_library_delivery_units'] == null ? undefined : json['time_post_library_delivery_units'],
        'protocols': json['protocols'] == null ? undefined : json['protocols'],
        'sampleMaterial': json['sample_material'] == null ? undefined : json['sample_material'],
        'taxa': json['taxa'] == null ? undefined : json['taxa'],
        'sampleTerms': json['sample_terms'] == null ? undefined : json['sample_terms'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'fileSets': json['file_sets'] == null ? undefined : json['file_sets'],
        'multiplexedIn': json['multiplexed_in'] == null ? undefined : json['multiplexed_in'],
        'sortedFractions': json['sorted_fractions'] == null ? undefined : json['sorted_fractions'],
        'originOf': json['origin_of'] == null ? undefined : json['origin_of'],
        'institutionalCertificates': json['institutional_certificates'] == null ? undefined : json['institutional_certificates'],
        'classifications': json['classifications'] == null ? undefined : json['classifications'],
    };
}

export function TechnicalSampleToJSON(value?: TechnicalSample | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'publications': value['publications'] == null ? undefined : Array.from(value['publications'] as Set<any>),
        'publication_identifiers': value['publicationIdentifiers'] == null ? undefined : Array.from(value['publicationIdentifiers'] as Set<any>),
        'url': value['url'],
        'sources': value['sources'] == null ? undefined : Array.from(value['sources'] as Set<any>),
        'lot_id': value['lotId'],
        'product_id': value['productId'],
        'documents': value['documents'] == null ? undefined : Array.from(value['documents'] as Set<any>),
        'lab': value['lab'],
        'award': value['award'],
        'accession': value['accession'],
        'alternate_accessions': value['alternateAccessions'] == null ? undefined : Array.from(value['alternateAccessions'] as Set<any>),
        'collections': value['collections'] == null ? undefined : Array.from(value['collections'] as Set<any>),
        'status': value['status'],
        'revoke_detail': value['revokeDetail'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'starting_amount': value['startingAmount'],
        'starting_amount_units': value['startingAmountUnits'],
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'date_obtained': value['dateObtained'],
        'sorted_from': value['sortedFrom'],
        'sorted_from_detail': value['sortedFromDetail'],
        'virtual': value['virtual'],
        'construct_library_sets': value['constructLibrarySets'] == null ? undefined : Array.from(value['constructLibrarySets'] as Set<any>),
        'moi': value['moi'],
        'nucleic_acid_delivery': value['nucleicAcidDelivery'],
        'time_post_library_delivery': value['timePostLibraryDelivery'],
        'time_post_library_delivery_units': value['timePostLibraryDeliveryUnits'],
        'protocols': value['protocols'] == null ? undefined : Array.from(value['protocols'] as Set<any>),
        'sample_material': value['sampleMaterial'],
        'taxa': value['taxa'],
        'sample_terms': value['sampleTerms'] == null ? undefined : Array.from(value['sampleTerms'] as Set<any>),
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'file_sets': value['fileSets'] == null ? undefined : Array.from(value['fileSets'] as Set<any>),
        'multiplexed_in': value['multiplexedIn'] == null ? undefined : Array.from(value['multiplexedIn'] as Set<any>),
        'sorted_fractions': value['sortedFractions'] == null ? undefined : Array.from(value['sortedFractions'] as Set<any>),
        'origin_of': value['originOf'] == null ? undefined : Array.from(value['originOf'] as Set<any>),
        'institutional_certificates': value['institutionalCertificates'] == null ? undefined : Array.from(value['institutionalCertificates'] as Set<any>),
        'classifications': value['classifications'] == null ? undefined : Array.from(value['classifications'] as Set<any>),
    };
}

