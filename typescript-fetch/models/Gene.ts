/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GeneLocation1 } from './GeneLocation1';
import {
    GeneLocation1FromJSON,
    GeneLocation1FromJSONTyped,
    GeneLocation1ToJSON,
} from './GeneLocation1';

/**
 * A gene in the human or mouse genomes. The genes objects in IGVF are imported from GENCODE.
 * @export
 * @interface Gene
 */
export interface Gene {
    /**
     * The date the object was released.
     * @type {string}
     * @memberof Gene
     */
    releaseTimestamp?: string;
    /**
     * The annotation and version of the reference resource.
     * @type {string}
     * @memberof Gene
     */
    transcriptomeAnnotation?: GeneTranscriptomeAnnotationEnum;
    /**
     * The species of the organism.
     * @type {string}
     * @memberof Gene
     */
    taxa?: GeneTaxaEnum;
    /**
     * The status of the metadata object.
     * @type {string}
     * @memberof Gene
     */
    status?: GeneStatusEnum;
    /**
     * The version of the JSON schema that the server uses to validate the object.
     * @type {string}
     * @memberof Gene
     */
    schemaVersion?: string;
    /**
     * The unique identifier associated with every object.
     * @type {string}
     * @memberof Gene
     */
    uuid?: string;
    /**
     * DACC internal notes.
     * @type {string}
     * @memberof Gene
     */
    notes?: string;
    /**
     * Lab specific identifiers to reference an object.
     * @type {Set<string>}
     * @memberof Gene
     */
    aliases?: Set<string>;
    /**
     * The date the object was created.
     * @type {string}
     * @memberof Gene
     */
    creationTimestamp?: string;
    /**
     * The user who submitted the object.
     * @type {string}
     * @memberof Gene
     */
    submittedBy?: string;
    /**
     * Additional information specified by the submitter to be displayed as a comment on the portal.
     * @type {string}
     * @memberof Gene
     */
    submitterComment?: string;
    /**
     * A plain text description of the object.
     * @type {string}
     * @memberof Gene
     */
    description?: string;
    /**
     * ENSEMBL GeneID of official nomenclature approved gene. The GeneID does not include the current version number suffix.
     * @type {string}
     * @memberof Gene
     */
    geneid?: string;
    /**
     * Gene symbol approved by the official nomenclature.
     * @type {string}
     * @memberof Gene
     */
    symbol?: string;
    /**
     * The full gene name preferably approved by the official nomenclature.
     * @type {string}
     * @memberof Gene
     */
    name?: string;
    /**
     * Alternative symbols that have been used to refer to the gene.
     * @type {Set<string>}
     * @memberof Gene
     */
    synonyms?: Set<string>;
    /**
     * Unique identifiers from external resources.
     * @type {Set<string>}
     * @memberof Gene
     */
    dbxrefs?: Set<string>;
    /**
     * Gene locations specified using 1-based, closed coordinates for different versions of reference genome assemblies.
     * @type {Set<GeneLocation1>}
     * @memberof Gene
     */
    locations?: Set<GeneLocation1>;
    /**
     * Current ENSEMBL GeneID version number of the gene.
     * @type {string}
     * @memberof Gene
     */
    versionNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Gene
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Gene
     */
    type?: Array<string>;
    /**
     * A summary of the object.
     * @type {string}
     * @memberof Gene
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof Gene
     */
    title?: string;
    /**
     * The ENSEMBL GeneID concatenated with its version number.
     * @type {string}
     * @memberof Gene
     */
    geneidWithVersion?: string;
}


/**
 * @export
 */
export const GeneTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type GeneTranscriptomeAnnotationEnum = typeof GeneTranscriptomeAnnotationEnum[keyof typeof GeneTranscriptomeAnnotationEnum];

/**
 * @export
 */
export const GeneTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type GeneTaxaEnum = typeof GeneTaxaEnum[keyof typeof GeneTaxaEnum];

/**
 * @export
 */
export const GeneStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type GeneStatusEnum = typeof GeneStatusEnum[keyof typeof GeneStatusEnum];


/**
 * Check if a given object implements the Gene interface.
 */
export function instanceOfGene(value: object): value is Gene {
    return true;
}

export function GeneFromJSON(json: any): Gene {
    return GeneFromJSONTyped(json, false);
}

export function GeneFromJSONTyped(json: any, ignoreDiscriminator: boolean): Gene {
    if (json == null) {
        return json;
    }
    return {
        
        'releaseTimestamp': json['release_timestamp'] == null ? undefined : json['release_timestamp'],
        'transcriptomeAnnotation': json['transcriptome_annotation'] == null ? undefined : json['transcriptome_annotation'],
        'taxa': json['taxa'] == null ? undefined : json['taxa'],
        'status': json['status'] == null ? undefined : json['status'],
        'schemaVersion': json['schema_version'] == null ? undefined : json['schema_version'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'aliases': json['aliases'] == null ? undefined : json['aliases'],
        'creationTimestamp': json['creation_timestamp'] == null ? undefined : json['creation_timestamp'],
        'submittedBy': json['submitted_by'] == null ? undefined : json['submitted_by'],
        'submitterComment': json['submitter_comment'] == null ? undefined : json['submitter_comment'],
        'description': json['description'] == null ? undefined : json['description'],
        'geneid': json['geneid'] == null ? undefined : json['geneid'],
        'symbol': json['symbol'] == null ? undefined : json['symbol'],
        'name': json['name'] == null ? undefined : json['name'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'dbxrefs': json['dbxrefs'] == null ? undefined : json['dbxrefs'],
        'locations': json['locations'] == null ? undefined : (new Set((json['locations'] as Array<any>).map(GeneLocation1FromJSON))),
        'versionNumber': json['version_number'] == null ? undefined : json['version_number'],
        'id': json['@id'] == null ? undefined : json['@id'],
        'type': json['@type'] == null ? undefined : json['@type'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'title': json['title'] == null ? undefined : json['title'],
        'geneidWithVersion': json['geneid_with_version'] == null ? undefined : json['geneid_with_version'],
    };
}

export function GeneToJSON(value?: Gene | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'release_timestamp': value['releaseTimestamp'],
        'transcriptome_annotation': value['transcriptomeAnnotation'],
        'taxa': value['taxa'],
        'status': value['status'],
        'schema_version': value['schemaVersion'],
        'uuid': value['uuid'],
        'notes': value['notes'],
        'aliases': value['aliases'] == null ? undefined : Array.from(value['aliases'] as Set<any>),
        'creation_timestamp': value['creationTimestamp'],
        'submitted_by': value['submittedBy'],
        'submitter_comment': value['submitterComment'],
        'description': value['description'],
        'geneid': value['geneid'],
        'symbol': value['symbol'],
        'name': value['name'],
        'synonyms': value['synonyms'] == null ? undefined : Array.from(value['synonyms'] as Set<any>),
        'dbxrefs': value['dbxrefs'] == null ? undefined : Array.from(value['dbxrefs'] as Set<any>),
        'locations': value['locations'] == null ? undefined : (Array.from(value['locations'] as Set<any>).map(GeneLocation1ToJSON)),
        'version_number': value['versionNumber'],
        '@id': value['id'],
        '@type': value['type'],
        'summary': value['summary'],
        'title': value['title'],
        'geneid_with_version': value['geneidWithVersion'],
    };
}

