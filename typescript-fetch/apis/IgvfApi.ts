/* tslint:disable */
/* eslint-disable */
/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessKeyResults,
  AlignmentFileResults,
  AnalysisSetResults,
  AnalysisStepResults,
  AnalysisStepVersionResults,
  AssayTermResults,
  AuxiliarySetResults,
  AwardResults,
  BiomarkerResults,
  ConfigurationFileResults,
  ConstructLibrarySetResults,
  CrisprModificationResults,
  CuratedSetResults,
  DegronModificationResults,
  DocumentResults,
  GeneLocation,
  GeneResults,
  GenomeBrowserAnnotationFileResults,
  HumanDonorResults,
  ImageFileResults,
  ImageResults,
  InVitroSystemResults,
  InstitutionalCertificateResults,
  Item,
  ItemType,
  LabResults,
  Limit,
  Locus,
  MatrixFileResults,
  MeasurementSetResults,
  ModelFileResults,
  ModelSetResults,
  MultiplexedSampleResults,
  NoResultsResponse,
  OpenReadingFrameResults,
  PageResults,
  PhenotypeTermResults,
  PhenotypicFeatureResults,
  PlatformTermResults,
  PredictionSetResults,
  PrimaryCellResults,
  PublicationResults,
  ReferenceFileResults,
  RodentDonorResults,
  SampleTermResults,
  SearchResults,
  SequenceFileResults,
  SignalFileResults,
  SoftwareResults,
  SoftwareVersionResults,
  SourceResults,
  TabularFileResults,
  TechnicalSampleResults,
  TissueResults,
  TreatmentResults,
  UserResults,
  WholeOrganismResults,
  WorkflowResults,
} from '../models/index';
import {
    AccessKeyResultsFromJSON,
    AccessKeyResultsToJSON,
    AlignmentFileResultsFromJSON,
    AlignmentFileResultsToJSON,
    AnalysisSetResultsFromJSON,
    AnalysisSetResultsToJSON,
    AnalysisStepResultsFromJSON,
    AnalysisStepResultsToJSON,
    AnalysisStepVersionResultsFromJSON,
    AnalysisStepVersionResultsToJSON,
    AssayTermResultsFromJSON,
    AssayTermResultsToJSON,
    AuxiliarySetResultsFromJSON,
    AuxiliarySetResultsToJSON,
    AwardResultsFromJSON,
    AwardResultsToJSON,
    BiomarkerResultsFromJSON,
    BiomarkerResultsToJSON,
    ConfigurationFileResultsFromJSON,
    ConfigurationFileResultsToJSON,
    ConstructLibrarySetResultsFromJSON,
    ConstructLibrarySetResultsToJSON,
    CrisprModificationResultsFromJSON,
    CrisprModificationResultsToJSON,
    CuratedSetResultsFromJSON,
    CuratedSetResultsToJSON,
    DegronModificationResultsFromJSON,
    DegronModificationResultsToJSON,
    DocumentResultsFromJSON,
    DocumentResultsToJSON,
    GeneLocationFromJSON,
    GeneLocationToJSON,
    GeneResultsFromJSON,
    GeneResultsToJSON,
    GenomeBrowserAnnotationFileResultsFromJSON,
    GenomeBrowserAnnotationFileResultsToJSON,
    HumanDonorResultsFromJSON,
    HumanDonorResultsToJSON,
    ImageFileResultsFromJSON,
    ImageFileResultsToJSON,
    ImageResultsFromJSON,
    ImageResultsToJSON,
    InVitroSystemResultsFromJSON,
    InVitroSystemResultsToJSON,
    InstitutionalCertificateResultsFromJSON,
    InstitutionalCertificateResultsToJSON,
    ItemFromJSON,
    ItemToJSON,
    ItemTypeFromJSON,
    ItemTypeToJSON,
    LabResultsFromJSON,
    LabResultsToJSON,
    LimitFromJSON,
    LimitToJSON,
    LocusFromJSON,
    LocusToJSON,
    MatrixFileResultsFromJSON,
    MatrixFileResultsToJSON,
    MeasurementSetResultsFromJSON,
    MeasurementSetResultsToJSON,
    ModelFileResultsFromJSON,
    ModelFileResultsToJSON,
    ModelSetResultsFromJSON,
    ModelSetResultsToJSON,
    MultiplexedSampleResultsFromJSON,
    MultiplexedSampleResultsToJSON,
    NoResultsResponseFromJSON,
    NoResultsResponseToJSON,
    OpenReadingFrameResultsFromJSON,
    OpenReadingFrameResultsToJSON,
    PageResultsFromJSON,
    PageResultsToJSON,
    PhenotypeTermResultsFromJSON,
    PhenotypeTermResultsToJSON,
    PhenotypicFeatureResultsFromJSON,
    PhenotypicFeatureResultsToJSON,
    PlatformTermResultsFromJSON,
    PlatformTermResultsToJSON,
    PredictionSetResultsFromJSON,
    PredictionSetResultsToJSON,
    PrimaryCellResultsFromJSON,
    PrimaryCellResultsToJSON,
    PublicationResultsFromJSON,
    PublicationResultsToJSON,
    ReferenceFileResultsFromJSON,
    ReferenceFileResultsToJSON,
    RodentDonorResultsFromJSON,
    RodentDonorResultsToJSON,
    SampleTermResultsFromJSON,
    SampleTermResultsToJSON,
    SearchResultsFromJSON,
    SearchResultsToJSON,
    SequenceFileResultsFromJSON,
    SequenceFileResultsToJSON,
    SignalFileResultsFromJSON,
    SignalFileResultsToJSON,
    SoftwareResultsFromJSON,
    SoftwareResultsToJSON,
    SoftwareVersionResultsFromJSON,
    SoftwareVersionResultsToJSON,
    SourceResultsFromJSON,
    SourceResultsToJSON,
    TabularFileResultsFromJSON,
    TabularFileResultsToJSON,
    TechnicalSampleResultsFromJSON,
    TechnicalSampleResultsToJSON,
    TissueResultsFromJSON,
    TissueResultsToJSON,
    TreatmentResultsFromJSON,
    TreatmentResultsToJSON,
    UserResultsFromJSON,
    UserResultsToJSON,
    WholeOrganismResultsFromJSON,
    WholeOrganismResultsToJSON,
    WorkflowResultsFromJSON,
    WorkflowResultsToJSON,
} from '../models/index';

export interface AccessKeysRequest {
    frame: AccessKeysFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accessKeyId?: Array<string>;
    aliases?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    notes?: Array<string>;
    secretAccessKeyHash?: Array<string>;
    status?: Array<AccessKeysStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    user?: Array<string>;
    uuid?: Array<string>;
}

export interface AlignmentFilesRequest {
    frame: AlignmentFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    anvilUrl?: Array<string>;
    assembly?: Array<AlignmentFilesAssemblyEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<AlignmentFilesAwardComponentEnum>;
    collections?: Array<AlignmentFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentSummary?: Array<string>;
    contentType?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<AlignmentFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    filtered?: Array<boolean>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    redacted?: Array<boolean>;
    referenceFiles?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<AlignmentFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    transcriptomeAnnotation?: Array<AlignmentFilesTranscriptomeAnnotationEnum>;
    uploadStatus?: Array<AlignmentFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface AnalysisSetsRequest {
    frame: AnalysisSetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    assayTitles?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<AnalysisSetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<AnalysisSetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<AnalysisSetsDonorsSexEnum>;
    donorsStatus?: Array<AnalysisSetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    fileSetType?: Array<AnalysisSetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatform?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<AnalysisSetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    inputFileSetsId?: Array<string>;
    inputFileSetsAccession?: Array<string>;
    inputFileSetsAliases?: Array<string>;
    inputFileSetsFileSetType?: Array<AnalysisSetsInputFileSetsFileSetTypeEnum>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatments?: Array<string>;
    samplesClassifications?: Array<AnalysisSetsSamplesClassificationsEnum>;
    samplesConstructLibrarySets?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModifications?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<AnalysisSetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<AnalysisSetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<AnalysisSetsSamplesTaxaEnum>;
    samplesTreatments?: Array<string>;
    status?: Array<AnalysisSetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
}

export interface AnalysisStepVersionsRequest {
    frame: AnalysisStepVersionsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    analysisStepId?: Array<string>;
    analysisStepName?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<AnalysisStepVersionsAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    softwareVersionsId?: Array<string>;
    softwareVersionsName?: Array<string>;
    status?: Array<AnalysisStepVersionsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
}

export interface AnalysisStepsRequest {
    frame: AnalysisStepsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    analysisStepTypes?: Array<AnalysisStepsAnalysisStepTypesEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<AnalysisStepsAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    inputContentTypes?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    outputContentTypes?: Array<string>;
    parentsId?: Array<string>;
    parentsTitle?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<AnalysisStepsStatusEnum>;
    stepLabel?: Array<string>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    uuid?: Array<string>;
    workflowId?: Array<string>;
    workflowAccession?: Array<string>;
}

export interface AssayTermsRequest {
    frame: AssayTermsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    ancestors?: Array<string>;
    assaySlims?: Array<string>;
    categorySlims?: Array<string>;
    creationTimestamp?: Array<string>;
    deprecatedNtrTerms?: Array<string>;
    description?: Array<string>;
    isA?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    objectiveSlims?: Array<string>;
    ontology?: Array<string>;
    preferredAssayTitles?: Array<AssayTermsPreferredAssayTitlesEnum>;
    releaseTimestamp?: Array<string>;
    status?: Array<AssayTermsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    synonyms?: Array<string>;
    termId?: Array<string>;
    termName?: Array<string>;
    uuid?: Array<string>;
}

export interface AuxiliarySetsRequest {
    frame: AuxiliarySetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<AuxiliarySetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<AuxiliarySetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<AuxiliarySetsDonorsSexEnum>;
    donorsStatus?: Array<AuxiliarySetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    fileSetType?: Array<AuxiliarySetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatform?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<AuxiliarySetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    libraryConstructionPlatform?: Array<string>;
    measurementSetsId?: Array<string>;
    measurementSetsAccession?: Array<string>;
    measurementSetsAliases?: Array<string>;
    measurementSetsPreferredAssayTitle?: Array<AuxiliarySetsMeasurementSetsPreferredAssayTitleEnum>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatments?: Array<string>;
    samplesClassifications?: Array<AuxiliarySetsSamplesClassificationsEnum>;
    samplesConstructLibrarySets?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModifications?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<AuxiliarySetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<AuxiliarySetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<AuxiliarySetsSamplesTaxaEnum>;
    samplesTreatments?: Array<string>;
    status?: Array<AuxiliarySetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface AwardsRequest {
    frame: AwardsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    component?: Array<AwardsComponentEnum>;
    contactPi?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    endDate?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    pis?: Array<string>;
    project?: Array<AwardsProjectEnum>;
    startDate?: Array<string>;
    status?: Array<AwardsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
    viewingGroup?: Array<AwardsViewingGroupEnum>;
}

export interface BatchDownloadRequest {
    type: Array<string>;
    query?: string;
    fieldFilters?: object;
}

export interface BiomarkersRequest {
    frame: BiomarkersFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<BiomarkersAwardComponentEnum>;
    awardName?: Array<string>;
    biomarkerFor?: Array<string>;
    classification?: Array<BiomarkersClassificationEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    gene?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    name?: Array<string>;
    nameQuantification?: Array<string>;
    notes?: Array<string>;
    quantification?: Array<BiomarkersQuantificationEnum>;
    releaseTimestamp?: Array<string>;
    status?: Array<BiomarkersStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    synonyms?: Array<string>;
    uuid?: Array<string>;
}

export interface ConfigurationFilesRequest {
    frame: ConfigurationFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<ConfigurationFilesAwardComponentEnum>;
    collections?: Array<ConfigurationFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<ConfigurationFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    seqspecOf?: Array<string>;
    status?: Array<ConfigurationFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uploadStatus?: Array<ConfigurationFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface ConstructLibrarySetsRequest {
    frame: ConstructLibrarySetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    appliedToSamplesId?: Array<string>;
    appliedToSamplesAccession?: Array<string>;
    appliedToSamplesAliases?: Array<string>;
    appliedToSamplesDiseaseTermsId?: Array<string>;
    appliedToSamplesDiseaseTermsTermName?: Array<string>;
    appliedToSamplesSampleTermsId?: Array<string>;
    appliedToSamplesSampleTermsTermName?: Array<string>;
    appliedToSamplesStatus?: Array<ConstructLibrarySetsAppliedToSamplesStatusEnum>;
    appliedToSamplesSummary?: Array<string>;
    associatedPhenotypesId?: Array<string>;
    associatedPhenotypesTermId?: Array<string>;
    associatedPhenotypesTermName?: Array<string>;
    averageGuideCoverage?: Array<number>;
    averageInsertSize?: Array<number>;
    awardId?: Array<string>;
    awardComponent?: Array<ConstructLibrarySetsAwardComponentEnum>;
    collections?: Array<ConstructLibrarySetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    exon?: Array<string>;
    fileSetType?: Array<ConstructLibrarySetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesFileFormat?: Array<string>;
    filesUploadStatus?: Array<ConstructLibrarySetsFilesUploadStatusEnum>;
    guideType?: Array<ConstructLibrarySetsGuideTypeEnum>;
    inputFileSetFor?: Array<string>;
    integratedContentFiles?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    largeScaleGeneListId?: Array<string>;
    largeScaleGeneListAccession?: Array<string>;
    largeScaleGeneListAliases?: Array<string>;
    largeScaleLociListId?: Array<string>;
    largeScaleLociListAccession?: Array<string>;
    largeScaleLociListAliases?: Array<string>;
    lotId?: Array<string>;
    lowerBoundGuideCoverage?: Array<number>;
    lowerBoundInsertSize?: Array<number>;
    notes?: Array<string>;
    orfListId?: Array<string>;
    orfListAliases?: Array<string>;
    orfListGene?: Array<string>;
    orfListOrfId?: Array<string>;
    productId?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    scope?: Array<ConstructLibrarySetsScopeEnum>;
    selectionCriteria?: Array<ConstructLibrarySetsSelectionCriteriaEnum>;
    smallScaleGeneListId?: Array<string>;
    smallScaleGeneListGeneid?: Array<string>;
    smallScaleGeneListName?: Array<string>;
    smallScaleGeneListSymbol?: Array<string>;
    smallScaleGeneListSynonyms?: Array<string>;
    smallScaleLociList?: Array<Locus>;
    sources?: Array<string>;
    status?: Array<ConstructLibrarySetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    targeton?: Array<string>;
    tilingModality?: Array<ConstructLibrarySetsTilingModalityEnum>;
    upperBoundGuideCoverage?: Array<number>;
    upperBoundInsertSize?: Array<number>;
    uuid?: Array<string>;
}

export interface CrisprModificationsRequest {
    frame: CrisprModificationsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    activated?: Array<boolean>;
    activatingAgentTermId?: Array<string>;
    activatingAgentTermName?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<CrisprModificationsAwardComponentEnum>;
    biosamplesModified?: Array<string>;
    cas?: Array<CrisprModificationsCasEnum>;
    casSpecies?: Array<CrisprModificationsCasSpeciesEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fusedDomain?: Array<CrisprModificationsFusedDomainEnum>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    modality?: Array<CrisprModificationsModalityEnum>;
    notes?: Array<string>;
    productId?: Array<string>;
    releaseTimestamp?: Array<string>;
    sources?: Array<string>;
    status?: Array<CrisprModificationsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taggedProtein?: Array<string>;
    uuid?: Array<string>;
}

export interface CuratedSetsRequest {
    frame: CuratedSetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    assemblies?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<CuratedSetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<CuratedSetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<CuratedSetsDonorsSexEnum>;
    donorsStatus?: Array<CuratedSetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    fileSetType?: Array<CuratedSetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatform?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<CuratedSetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatments?: Array<string>;
    samplesClassifications?: Array<CuratedSetsSamplesClassificationsEnum>;
    samplesConstructLibrarySets?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModifications?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<CuratedSetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<CuratedSetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<CuratedSetsSamplesTaxaEnum>;
    samplesTreatments?: Array<string>;
    status?: Array<CuratedSetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<CuratedSetsTaxaEnum>;
    transcriptomeAnnotations?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface DegronModificationsRequest {
    frame: DegronModificationsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    activated?: Array<boolean>;
    activatingAgentTermId?: Array<string>;
    activatingAgentTermName?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<DegronModificationsAwardComponentEnum>;
    biosamplesModified?: Array<string>;
    creationTimestamp?: Array<string>;
    degronSystem?: Array<DegronModificationsDegronSystemEnum>;
    description?: Array<string>;
    documents?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    modality?: Array<DegronModificationsModalityEnum>;
    notes?: Array<string>;
    productId?: Array<string>;
    releaseTimestamp?: Array<string>;
    sources?: Array<string>;
    status?: Array<DegronModificationsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taggedProteins?: Array<string>;
    uuid?: Array<string>;
}

export interface DocumentsRequest {
    frame: DocumentsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<DocumentsAwardComponentEnum>;
    characterizationMethod?: Array<DocumentsCharacterizationMethodEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    documentType?: Array<DocumentsDocumentTypeEnum>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<DocumentsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    urls?: Array<string>;
    uuid?: Array<string>;
}

export interface DownloadRequest {
    fileId: string;
}

export interface GenesRequest {
    frame: GenesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    geneid?: Array<string>;
    geneidWithVersion?: Array<string>;
    locations?: Array<GeneLocation>;
    name?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<GenesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    symbol?: Array<string>;
    synonyms?: Array<string>;
    taxa?: Array<GenesTaxaEnum>;
    title?: Array<string>;
    transcriptomeAnnotation?: Array<GenesTranscriptomeAnnotationEnum>;
    uuid?: Array<string>;
    versionNumber?: Array<string>;
}

export interface GenomeBrowserAnnotationFilesRequest {
    frame: GenomeBrowserAnnotationFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    assembly?: Array<GenomeBrowserAnnotationFilesAssemblyEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<GenomeBrowserAnnotationFilesAwardComponentEnum>;
    collections?: Array<GenomeBrowserAnnotationFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<GenomeBrowserAnnotationFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileFormatType?: Array<GenomeBrowserAnnotationFilesFileFormatTypeEnum>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<GenomeBrowserAnnotationFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    transcriptomeAnnotation?: Array<GenomeBrowserAnnotationFilesTranscriptomeAnnotationEnum>;
    uploadStatus?: Array<GenomeBrowserAnnotationFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface GetByIdRequest {
    resourceId: string;
    frame: GetByIdFrameEnum;
}

export interface HumanDonorsRequest {
    frame: HumanDonorsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<HumanDonorsAwardComponentEnum>;
    collections?: Array<HumanDonorsCollectionsEnum>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    ethnicities?: Array<HumanDonorsEthnicitiesEnum>;
    humanDonorIdentifiers?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    phenotypicFeaturesId?: Array<string>;
    phenotypicFeaturesFeatureId?: Array<string>;
    phenotypicFeaturesFeatureTermId?: Array<string>;
    phenotypicFeaturesFeatureTermName?: Array<string>;
    phenotypicFeaturesObservationDate?: Array<string>;
    phenotypicFeaturesQuantityUnits?: Array<HumanDonorsPhenotypicFeaturesQuantityUnitsEnum>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    relatedDonorsDonorId?: Array<string>;
    relatedDonorsDonorAccession?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sex?: Array<HumanDonorsSexEnum>;
    status?: Array<HumanDonorsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<HumanDonorsTaxaEnum>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface ImageFilesRequest {
    frame: ImageFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<ImageFilesAwardComponentEnum>;
    collections?: Array<ImageFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<ImageFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<ImageFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uploadStatus?: Array<ImageFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface ImagesRequest {
    frame: ImagesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    caption?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    downloadUrl?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<ImagesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    thumbNail?: Array<string>;
    uuid?: Array<string>;
}

export interface InVitroSystemsRequest {
    frame: InVitroSystemsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    age?: Array<string>;
    ageUnits?: Array<InVitroSystemsAgeUnitsEnum>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<InVitroSystemsAwardComponentEnum>;
    biomarkers?: Array<string>;
    cellFateChangeProtocol?: Array<string>;
    cellFateChangeTreatmentsId?: Array<string>;
    cellFateChangeTreatmentsPurpose?: Array<InVitroSystemsCellFateChangeTreatmentsPurposeEnum>;
    cellFateChangeTreatmentsStatus?: Array<InVitroSystemsCellFateChangeTreatmentsStatusEnum>;
    cellFateChangeTreatmentsSummary?: Array<string>;
    cellFateChangeTreatmentsTreatmentType?: Array<InVitroSystemsCellFateChangeTreatmentsTreatmentTypeEnum>;
    cellularSubPool?: Array<string>;
    classifications?: Array<InVitroSystemsClassificationsEnum>;
    collections?: Array<InVitroSystemsCollectionsEnum>;
    constructLibrarySets?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    demultiplexedFrom?: Array<string>;
    demultiplexedTo?: Array<string>;
    description?: Array<string>;
    diseaseTermsId?: Array<string>;
    diseaseTermsTermName?: Array<string>;
    documents?: Array<string>;
    donors?: Array<string>;
    embryonic?: Array<boolean>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<InVitroSystemsFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    growthMedium?: Array<InVitroSystemsGrowthMediumEnum>;
    institutionalCertificatesId?: Array<string>;
    institutionalCertificatesCertificateIdentifier?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    lowerBoundAge?: Array<number>;
    lowerBoundAgeInHours?: Array<number>;
    modificationsId?: Array<string>;
    modificationsStatus?: Array<InVitroSystemsModificationsStatusEnum>;
    modificationsSummary?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<InVitroSystemsNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    originatedFromId?: Array<string>;
    originatedFromAccession?: Array<string>;
    partOf?: Array<string>;
    parts?: Array<string>;
    passageNumber?: Array<number>;
    pooledFrom?: Array<string>;
    pooledIn?: Array<string>;
    productId?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sex?: Array<InVitroSystemsSexEnum>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<InVitroSystemsStartingAmountUnitsEnum>;
    status?: Array<InVitroSystemsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    targetedSampleTerm?: Array<string>;
    taxa?: Array<InVitroSystemsTaxaEnum>;
    timePostChange?: Array<number>;
    timePostChangeUnits?: Array<InVitroSystemsTimePostChangeUnitsEnum>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<InVitroSystemsTimePostLibraryDeliveryUnitsEnum>;
    treatmentsId?: Array<string>;
    treatmentsPurpose?: Array<InVitroSystemsTreatmentsPurposeEnum>;
    treatmentsStatus?: Array<InVitroSystemsTreatmentsStatusEnum>;
    treatmentsSummary?: Array<string>;
    treatmentsTreatmentType?: Array<InVitroSystemsTreatmentsTreatmentTypeEnum>;
    upperBoundAge?: Array<number>;
    upperBoundAgeInHours?: Array<number>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface InstitutionalCertificatesRequest {
    frame: InstitutionalCertificatesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<InstitutionalCertificatesAwardComponentEnum>;
    certificateIdentifier?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dataUseLimitation?: Array<InstitutionalCertificatesDataUseLimitationEnum>;
    dataUseLimitationModifiers?: Array<InstitutionalCertificatesDataUseLimitationModifiersEnum>;
    description?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    samples?: Array<string>;
    status?: Array<InstitutionalCertificatesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    urls?: Array<string>;
    uuid?: Array<string>;
}

export interface LabsRequest {
    frame: LabsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardsId?: Array<string>;
    awardsComponent?: Array<LabsAwardsComponentEnum>;
    awardsName?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    instituteLabel?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    pi?: Array<string>;
    status?: Array<LabsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface MatrixFilesRequest {
    frame: MatrixFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<MatrixFilesAwardComponentEnum>;
    collections?: Array<MatrixFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentSummary?: Array<string>;
    contentType?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    dimension1?: Array<MatrixFilesDimension1Enum>;
    dimension2?: Array<MatrixFilesDimension2Enum>;
    documents?: Array<string>;
    fileFormat?: Array<MatrixFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    referenceFiles?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<MatrixFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uploadStatus?: Array<MatrixFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface MeasurementSetsRequest {
    frame: MeasurementSetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    assayTermId?: Array<string>;
    assayTermTermName?: Array<string>;
    auxiliarySetsId?: Array<string>;
    auxiliarySetsAccession?: Array<string>;
    auxiliarySetsAliases?: Array<string>;
    auxiliarySetsFileSetType?: Array<MeasurementSetsAuxiliarySetsFileSetTypeEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<MeasurementSetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<MeasurementSetsCollectionsEnum>;
    controlFileSetsId?: Array<string>;
    controlFileSetsAccession?: Array<string>;
    controlFileSetsAliases?: Array<string>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<MeasurementSetsDonorsSexEnum>;
    donorsStatus?: Array<MeasurementSetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    externalImageUrl?: Array<string>;
    fileSetType?: Array<MeasurementSetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatformId?: Array<string>;
    filesSequencingPlatformTermName?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<MeasurementSetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    libraryConstructionPlatformId?: Array<string>;
    libraryConstructionPlatformTermName?: Array<string>;
    multiomeSize?: Array<number>;
    notes?: Array<string>;
    preferredAssayTitle?: Array<MeasurementSetsPreferredAssayTitleEnum>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    relatedMultiomeDatasetsId?: Array<string>;
    relatedMultiomeDatasetsAccession?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatmentsId?: Array<string>;
    samplesCellFateChangeTreatmentsPurpose?: Array<MeasurementSetsSamplesCellFateChangeTreatmentsPurposeEnum>;
    samplesCellFateChangeTreatmentsSummary?: Array<string>;
    samplesCellFateChangeTreatmentsTreatmentType?: Array<MeasurementSetsSamplesCellFateChangeTreatmentsTreatmentTypeEnum>;
    samplesClassifications?: Array<MeasurementSetsSamplesClassificationsEnum>;
    samplesConstructLibrarySetsId?: Array<string>;
    samplesConstructLibrarySetsAccession?: Array<string>;
    samplesConstructLibrarySetsFileSetType?: Array<MeasurementSetsSamplesConstructLibrarySetsFileSetTypeEnum>;
    samplesConstructLibrarySetsSmallScaleGeneListId?: Array<string>;
    samplesConstructLibrarySetsSmallScaleGeneListGeneid?: Array<string>;
    samplesConstructLibrarySetsSmallScaleGeneListName?: Array<string>;
    samplesConstructLibrarySetsSmallScaleGeneListSummary?: Array<string>;
    samplesConstructLibrarySetsSmallScaleGeneListSymbol?: Array<string>;
    samplesConstructLibrarySetsSummary?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModificationsId?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<MeasurementSetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<MeasurementSetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<MeasurementSetsSamplesTaxaEnum>;
    samplesTreatmentsId?: Array<string>;
    samplesTreatmentsPurpose?: Array<MeasurementSetsSamplesTreatmentsPurposeEnum>;
    samplesTreatmentsSummary?: Array<string>;
    samplesTreatmentsTreatmentType?: Array<MeasurementSetsSamplesTreatmentsTreatmentTypeEnum>;
    sequencingLibraryTypes?: Array<MeasurementSetsSequencingLibraryTypesEnum>;
    status?: Array<MeasurementSetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    targetedGenesId?: Array<string>;
    targetedGenesGeneid?: Array<string>;
    targetedGenesName?: Array<string>;
    targetedGenesSymbol?: Array<string>;
    targetedGenesSynonyms?: Array<string>;
    uuid?: Array<string>;
}

export interface ModelFilesRequest {
    frame: ModelFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    anvilUrl?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<ModelFilesAwardComponentEnum>;
    collections?: Array<ModelFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<ModelFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<ModelFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uploadStatus?: Array<ModelFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface ModelSetsRequest {
    frame: ModelSetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    assessedGenes?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<ModelSetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<ModelSetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<ModelSetsDonorsSexEnum>;
    donorsStatus?: Array<ModelSetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    fileSetType?: Array<ModelSetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatform?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<ModelSetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    inputFileSetsId?: Array<string>;
    inputFileSetsAccession?: Array<string>;
    inputFileSetsAliases?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    modelName?: Array<string>;
    modelVersion?: Array<string>;
    modelZooLocation?: Array<string>;
    notes?: Array<string>;
    predictionObjects?: Array<ModelSetsPredictionObjectsEnum>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatments?: Array<string>;
    samplesClassifications?: Array<ModelSetsSamplesClassificationsEnum>;
    samplesConstructLibrarySets?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModifications?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<ModelSetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<ModelSetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<ModelSetsSamplesTaxaEnum>;
    samplesTreatments?: Array<string>;
    softwareVersion?: Array<string>;
    status?: Array<ModelSetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface MultiplexedSamplesRequest {
    frame: MultiplexedSamplesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<MultiplexedSamplesAwardComponentEnum>;
    barcodeSampleMap?: Array<string>;
    biomarkers?: Array<string>;
    cellularSubPool?: Array<string>;
    classifications?: Array<string>;
    collections?: Array<MultiplexedSamplesCollectionsEnum>;
    constructLibrarySetsId?: Array<string>;
    constructLibrarySetsAccession?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    diseaseTermsId?: Array<string>;
    diseaseTermsTermName?: Array<string>;
    documents?: Array<string>;
    donors?: Array<string>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<MultiplexedSamplesFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    institutionalCertificates?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    modificationsId?: Array<string>;
    modificationsStatus?: Array<MultiplexedSamplesModificationsStatusEnum>;
    modificationsSummary?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    multiplexedSamplesId?: Array<string>;
    multiplexedSamplesAccession?: Array<string>;
    multiplexedSamplesConstructLibrarySets?: Array<string>;
    multiplexedSamplesDiseaseTermsId?: Array<string>;
    multiplexedSamplesDiseaseTermsTermName?: Array<string>;
    multiplexedSamplesDonorsId?: Array<string>;
    multiplexedSamplesDonorsAccession?: Array<string>;
    multiplexedSamplesSampleTermsId?: Array<string>;
    multiplexedSamplesSampleTermsTermName?: Array<string>;
    multiplexedSamplesStatus?: Array<MultiplexedSamplesMultiplexedSamplesStatusEnum>;
    multiplexedSamplesSummary?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<MultiplexedSamplesNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<MultiplexedSamplesStartingAmountUnitsEnum>;
    status?: Array<MultiplexedSamplesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<MultiplexedSamplesTimePostLibraryDeliveryUnitsEnum>;
    treatmentsId?: Array<string>;
    treatmentsPurpose?: Array<MultiplexedSamplesTreatmentsPurposeEnum>;
    treatmentsStatus?: Array<MultiplexedSamplesTreatmentsStatusEnum>;
    treatmentsSummary?: Array<string>;
    treatmentsTreatmentType?: Array<MultiplexedSamplesTreatmentsTreatmentTypeEnum>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface OpenReadingFramesRequest {
    frame: OpenReadingFramesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    award?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    geneId?: Array<string>;
    geneGeneid?: Array<string>;
    geneSymbol?: Array<string>;
    lab?: Array<string>;
    notes?: Array<string>;
    orfId?: Array<string>;
    pctCoverageOrf?: Array<number>;
    pctCoverageProtein?: Array<number>;
    pctIdenticalProtein?: Array<number>;
    proteinId?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<OpenReadingFramesStatusEnum>;
    submittedBy?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
}

export interface PagesRequest {
    frame: PagesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    award?: Array<string>;
    canonicalUri?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    lab?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    parent?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<PagesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    uuid?: Array<string>;
}

export interface PhenotypeTermsRequest {
    frame: PhenotypeTermsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    ancestors?: Array<string>;
    creationTimestamp?: Array<string>;
    deprecatedNtrTerms?: Array<string>;
    description?: Array<string>;
    isA?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    ontology?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<PhenotypeTermsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    synonyms?: Array<string>;
    termId?: Array<string>;
    termName?: Array<string>;
    uuid?: Array<string>;
}

export interface PhenotypicFeaturesRequest {
    frame: PhenotypicFeaturesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<PhenotypicFeaturesAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    featureId?: Array<string>;
    featureTermId?: Array<string>;
    featureTermName?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    observationDate?: Array<string>;
    quantity?: Array<number>;
    quantityUnits?: Array<PhenotypicFeaturesQuantityUnitsEnum>;
    releaseTimestamp?: Array<string>;
    status?: Array<PhenotypicFeaturesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
}

export interface PlatformTermsRequest {
    frame: PlatformTermsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    ancestors?: Array<string>;
    company?: Array<PlatformTermsCompanyEnum>;
    creationTimestamp?: Array<string>;
    deprecatedNtrTerms?: Array<string>;
    description?: Array<string>;
    isA?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    ontology?: Array<string>;
    releaseTimestamp?: Array<string>;
    sequencingKits?: Array<PlatformTermsSequencingKitsEnum>;
    status?: Array<PlatformTermsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    synonyms?: Array<string>;
    termId?: Array<string>;
    termName?: Array<string>;
    uuid?: Array<string>;
}

export interface PredictionSetsRequest {
    frame: PredictionSetsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<PredictionSetsAwardComponentEnum>;
    awardContactPiId?: Array<string>;
    awardContactPiTitle?: Array<string>;
    awardTitle?: Array<string>;
    collections?: Array<PredictionSetsCollectionsEnum>;
    controlForId?: Array<string>;
    controlForAccession?: Array<string>;
    controlForAliases?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    donorsId?: Array<string>;
    donorsAccession?: Array<string>;
    donorsAliases?: Array<string>;
    donorsSex?: Array<PredictionSetsDonorsSexEnum>;
    donorsStatus?: Array<PredictionSetsDonorsStatusEnum>;
    donorsTaxa?: Array<string>;
    fileSetType?: Array<PredictionSetsFileSetTypeEnum>;
    filesId?: Array<string>;
    filesAccession?: Array<string>;
    filesAliases?: Array<string>;
    filesContentType?: Array<string>;
    filesCreationTimestamp?: Array<string>;
    filesFileFormat?: Array<string>;
    filesFileSize?: Array<number>;
    filesHref?: Array<string>;
    filesS3Uri?: Array<string>;
    filesSequencingPlatform?: Array<string>;
    filesSubmittedFileName?: Array<string>;
    filesUploadStatus?: Array<PredictionSetsFilesUploadStatusEnum>;
    inputFileSetFor?: Array<string>;
    inputFileSets?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    largeScaleGeneListId?: Array<string>;
    largeScaleGeneListAccession?: Array<string>;
    largeScaleGeneListAliases?: Array<string>;
    largeScaleLociListId?: Array<string>;
    largeScaleLociListAccession?: Array<string>;
    largeScaleLociListAliases?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    samplesId?: Array<string>;
    samplesAccession?: Array<string>;
    samplesAliases?: Array<string>;
    samplesCellFateChangeTreatments?: Array<string>;
    samplesClassifications?: Array<PredictionSetsSamplesClassificationsEnum>;
    samplesConstructLibrarySetsId?: Array<string>;
    samplesConstructLibrarySetsAccession?: Array<string>;
    samplesConstructLibrarySetsSummary?: Array<string>;
    samplesDiseaseTermsId?: Array<string>;
    samplesDiseaseTermsTermName?: Array<string>;
    samplesModifications?: Array<string>;
    samplesSampleTermsId?: Array<string>;
    samplesSampleTermsAliases?: Array<string>;
    samplesSampleTermsStatus?: Array<PredictionSetsSamplesSampleTermsStatusEnum>;
    samplesSampleTermsSummary?: Array<string>;
    samplesSampleTermsTermName?: Array<string>;
    samplesStatus?: Array<PredictionSetsSamplesStatusEnum>;
    samplesSummary?: Array<string>;
    samplesTargetedSampleTermId?: Array<string>;
    samplesTargetedSampleTermTermName?: Array<string>;
    samplesTaxa?: Array<PredictionSetsSamplesTaxaEnum>;
    samplesTreatments?: Array<string>;
    scope?: Array<PredictionSetsScopeEnum>;
    smallScaleGeneListId?: Array<string>;
    smallScaleGeneListGeneid?: Array<string>;
    smallScaleGeneListName?: Array<string>;
    smallScaleGeneListSymbol?: Array<string>;
    smallScaleGeneListSynonyms?: Array<string>;
    smallScaleLociList?: Array<Locus>;
    status?: Array<PredictionSetsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFilesTimestamp?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface PrimaryCellsRequest {
    frame: PrimaryCellsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    age?: Array<string>;
    ageUnits?: Array<PrimaryCellsAgeUnitsEnum>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<PrimaryCellsAwardComponentEnum>;
    biomarkers?: Array<string>;
    cellularSubPool?: Array<string>;
    classifications?: Array<string>;
    collections?: Array<PrimaryCellsCollectionsEnum>;
    constructLibrarySets?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    diseaseTermsId?: Array<string>;
    diseaseTermsTermName?: Array<string>;
    documents?: Array<string>;
    donors?: Array<string>;
    embryonic?: Array<boolean>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<PrimaryCellsFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    institutionalCertificatesId?: Array<string>;
    institutionalCertificatesCertificateIdentifier?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    lowerBoundAge?: Array<number>;
    lowerBoundAgeInHours?: Array<number>;
    modificationsId?: Array<string>;
    modificationsStatus?: Array<PrimaryCellsModificationsStatusEnum>;
    modificationsSummary?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<PrimaryCellsNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    originatedFrom?: Array<string>;
    partOf?: Array<string>;
    parts?: Array<string>;
    passageNumber?: Array<number>;
    pooledFrom?: Array<string>;
    pooledIn?: Array<string>;
    productId?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sex?: Array<PrimaryCellsSexEnum>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<PrimaryCellsStartingAmountUnitsEnum>;
    status?: Array<PrimaryCellsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<PrimaryCellsTaxaEnum>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<PrimaryCellsTimePostLibraryDeliveryUnitsEnum>;
    treatmentsId?: Array<string>;
    treatmentsPurpose?: Array<PrimaryCellsTreatmentsPurposeEnum>;
    treatmentsStatus?: Array<PrimaryCellsTreatmentsStatusEnum>;
    treatmentsSummary?: Array<string>;
    treatmentsTreatmentType?: Array<PrimaryCellsTreatmentsTreatmentTypeEnum>;
    upperBoundAge?: Array<number>;
    upperBoundAgeInHours?: Array<number>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface PublicationsRequest {
    frame: PublicationsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    _abstract?: Array<string>;
    aliases?: Array<string>;
    authors?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<PublicationsAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    datePublished?: Array<string>;
    dateRevised?: Array<string>;
    description?: Array<string>;
    donors?: Array<string>;
    fileSets?: Array<string>;
    issue?: Array<string>;
    journal?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    notes?: Array<string>;
    page?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publicationYear?: Array<number>;
    publishedBy?: Array<PublicationsPublishedByEnum>;
    releaseTimestamp?: Array<string>;
    samples?: Array<string>;
    software?: Array<string>;
    softwareVersions?: Array<string>;
    status?: Array<PublicationsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    uuid?: Array<string>;
    volume?: Array<string>;
    workflows?: Array<string>;
}

export interface ReferenceFilesRequest {
    frame: ReferenceFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    anvilUrl?: Array<string>;
    assembly?: Array<ReferenceFilesAssemblyEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<ReferenceFilesAwardComponentEnum>;
    collections?: Array<ReferenceFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    external?: Array<boolean>;
    externalId?: Array<string>;
    fileFormat?: Array<ReferenceFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileFormatType?: Array<ReferenceFilesFileFormatTypeEnum>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    sourceUrl?: Array<string>;
    sources?: Array<string>;
    status?: Array<ReferenceFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    transcriptomeAnnotation?: Array<ReferenceFilesTranscriptomeAnnotationEnum>;
    uploadStatus?: Array<ReferenceFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface ReportRequest {
    query?: string;
    type?: Array<string>;
    limit?: Limit;
    sort?: Array<string>;
    fieldFilters?: object;
    include_fields?: Array<string>;
    frame?: ReportFrameEnum;
}

export interface RodentDonorsRequest {
    frame: RodentDonorsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<RodentDonorsAwardComponentEnum>;
    collections?: Array<RodentDonorsCollectionsEnum>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    genotype?: Array<string>;
    individualRodent?: Array<boolean>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    notes?: Array<string>;
    phenotypicFeaturesId?: Array<string>;
    phenotypicFeaturesFeatureId?: Array<string>;
    phenotypicFeaturesFeatureTermId?: Array<string>;
    phenotypicFeaturesFeatureTermName?: Array<string>;
    phenotypicFeaturesObservationDate?: Array<string>;
    phenotypicFeaturesQuantityUnits?: Array<RodentDonorsPhenotypicFeaturesQuantityUnitsEnum>;
    productId?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    rodentIdentifier?: Array<string>;
    sex?: Array<RodentDonorsSexEnum>;
    sourcesId?: Array<string>;
    status?: Array<RodentDonorsStatusEnum>;
    strain?: Array<string>;
    strainBackground?: Array<RodentDonorsStrainBackgroundEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<RodentDonorsTaxaEnum>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface SampleTermsRequest {
    frame: SampleTermsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    ancestors?: Array<string>;
    cellSlims?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    deprecatedNtrTerms?: Array<string>;
    description?: Array<string>;
    developmentalSlims?: Array<string>;
    isA?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    ontology?: Array<string>;
    organSlims?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<SampleTermsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    synonyms?: Array<string>;
    systemSlims?: Array<string>;
    termId?: Array<string>;
    termName?: Array<string>;
    uuid?: Array<string>;
}

export interface SchemaForItemTypeRequest {
    itemType: ItemType;
}

export interface SearchRequest {
    frame: SearchFrameEnum;
    query?: string;
    type?: Array<string>;
    limit?: Limit;
    sort?: Array<string>;
    fieldFilters?: object;
}

export interface SequenceFilesRequest {
    frame: SequenceFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    anvilUrl?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<SequenceFilesAwardComponentEnum>;
    collections?: Array<SequenceFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<SequenceFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    flowcellId?: Array<string>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    illuminaReadType?: Array<SequenceFilesIlluminaReadTypeEnum>;
    index?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lane?: Array<number>;
    lociListFor?: Array<string>;
    maximumReadLength?: Array<number>;
    md5sum?: Array<string>;
    meanReadLength?: Array<number>;
    minimumReadLength?: Array<number>;
    notes?: Array<string>;
    readCount?: Array<number>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    seqspecs?: Array<string>;
    sequencingKit?: Array<SequenceFilesSequencingKitEnum>;
    sequencingPlatform?: Array<string>;
    sequencingRun?: Array<number>;
    status?: Array<SequenceFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uploadStatus?: Array<SequenceFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface SignalFilesRequest {
    frame: SignalFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    assembly?: Array<SignalFilesAssemblyEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<SignalFilesAwardComponentEnum>;
    collections?: Array<SignalFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentSummary?: Array<string>;
    contentType?: Array<string>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<SignalFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    filtered?: Array<boolean>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    normalized?: Array<boolean>;
    notes?: Array<string>;
    referenceFiles?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    startViewPosition?: Array<string>;
    status?: Array<SignalFilesStatusEnum>;
    strandSpecificity?: Array<SignalFilesStrandSpecificityEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    transcriptomeAnnotation?: Array<SignalFilesTranscriptomeAnnotationEnum>;
    uploadStatus?: Array<SignalFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface SoftwareRequest {
    frame: SoftwareFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<SoftwareAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    sourceUrl?: Array<string>;
    status?: Array<SoftwareStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    usedBy?: Array<SoftwareUsedByEnum>;
    uuid?: Array<string>;
    versions?: Array<string>;
}

export interface SoftwareVersionsRequest {
    frame: SoftwareVersionsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<SoftwareVersionsAwardComponentEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    downloadId?: Array<string>;
    downloadedUrl?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    softwareId?: Array<string>;
    softwareTitle?: Array<string>;
    status?: Array<SoftwareVersionsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
    version?: Array<string>;
}

export interface SourcesRequest {
    frame: SourcesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    status?: Array<SourcesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    url?: Array<string>;
    uuid?: Array<string>;
}

export interface TabularFilesRequest {
    frame: TabularFilesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisStepVersion?: Array<string>;
    anvilUrl?: Array<string>;
    assembly?: Array<TabularFilesAssemblyEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<TabularFilesAwardComponentEnum>;
    collections?: Array<TabularFilesCollectionsEnum>;
    contentMd5sum?: Array<string>;
    contentType?: Array<string>;
    controlledAccess?: Array<boolean>;
    creationTimestamp?: Array<string>;
    dbxrefs?: Array<string>;
    derivedFrom?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileFormat?: Array<TabularFilesFileFormatEnum>;
    fileFormatSpecifications?: Array<string>;
    fileFormatType?: Array<TabularFilesFileFormatTypeEnum>;
    fileSet?: Array<string>;
    fileSize?: Array<number>;
    geneListFor?: Array<string>;
    href?: Array<string>;
    inputFileFor?: Array<string>;
    integratedIn?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lociListFor?: Array<string>;
    md5sum?: Array<string>;
    notes?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    s3Uri?: Array<string>;
    status?: Array<TabularFilesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submittedFileName?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    transcriptomeAnnotation?: Array<TabularFilesTranscriptomeAnnotationEnum>;
    uploadStatus?: Array<TabularFilesUploadStatusEnum>;
    uuid?: Array<string>;
    validationErrorDetail?: Array<string>;
}

export interface TechnicalSamplesRequest {
    frame: TechnicalSamplesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<TechnicalSamplesAwardComponentEnum>;
    classifications?: Array<string>;
    collections?: Array<TechnicalSamplesCollectionsEnum>;
    constructLibrarySets?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<TechnicalSamplesFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    institutionalCertificates?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<TechnicalSamplesNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    productId?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleMaterial?: Array<TechnicalSamplesSampleMaterialEnum>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<TechnicalSamplesStartingAmountUnitsEnum>;
    status?: Array<TechnicalSamplesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<TechnicalSamplesTaxaEnum>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<TechnicalSamplesTimePostLibraryDeliveryUnitsEnum>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface TissuesRequest {
    frame: TissuesFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    age?: Array<string>;
    ageUnits?: Array<TissuesAgeUnitsEnum>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<TissuesAwardComponentEnum>;
    biomarkers?: Array<string>;
    ccfId?: Array<string>;
    cellularSubPool?: Array<string>;
    classifications?: Array<string>;
    collections?: Array<TissuesCollectionsEnum>;
    constructLibrarySets?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    diseaseTermsId?: Array<string>;
    diseaseTermsTermName?: Array<string>;
    documents?: Array<string>;
    donors?: Array<string>;
    embryonic?: Array<boolean>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<TissuesFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    institutionalCertificatesId?: Array<string>;
    institutionalCertificatesCertificateIdentifier?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    lowerBoundAge?: Array<number>;
    lowerBoundAgeInHours?: Array<number>;
    modificationsId?: Array<string>;
    modificationsStatus?: Array<TissuesModificationsStatusEnum>;
    modificationsSummary?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<TissuesNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    originatedFrom?: Array<string>;
    partOf?: Array<string>;
    parts?: Array<string>;
    pmi?: Array<number>;
    pmiUnits?: Array<TissuesPmiUnitsEnum>;
    pooledFrom?: Array<string>;
    pooledIn?: Array<string>;
    preservationMethod?: Array<TissuesPreservationMethodEnum>;
    productId?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sex?: Array<TissuesSexEnum>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<TissuesStartingAmountUnitsEnum>;
    status?: Array<TissuesStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<TissuesTaxaEnum>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<TissuesTimePostLibraryDeliveryUnitsEnum>;
    treatmentsId?: Array<string>;
    treatmentsPurpose?: Array<TissuesTreatmentsPurposeEnum>;
    treatmentsStatus?: Array<TissuesTreatmentsStatusEnum>;
    treatmentsSummary?: Array<string>;
    treatmentsTreatmentType?: Array<TissuesTreatmentsTreatmentTypeEnum>;
    upperBoundAge?: Array<number>;
    upperBoundAgeInHours?: Array<number>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface TreatmentsRequest {
    frame: TreatmentsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    amount?: Array<number>;
    amountUnits?: Array<TreatmentsAmountUnitsEnum>;
    awardId?: Array<string>;
    awardComponent?: Array<TreatmentsAwardComponentEnum>;
    biosamplesTreated?: Array<string>;
    creationTimestamp?: Array<string>;
    depletion?: Array<boolean>;
    description?: Array<string>;
    documents?: Array<string>;
    duration?: Array<number>;
    durationUnits?: Array<TreatmentsDurationUnitsEnum>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    notes?: Array<string>;
    pH?: Array<number>;
    postTreatmentTime?: Array<number>;
    postTreatmentTimeUnits?: Array<TreatmentsPostTreatmentTimeUnitsEnum>;
    productId?: Array<string>;
    purpose?: Array<TreatmentsPurposeEnum>;
    releaseTimestamp?: Array<string>;
    sourcesId?: Array<string>;
    status?: Array<TreatmentsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    temperature?: Array<number>;
    temperatureUnits?: Array<TreatmentsTemperatureUnitsEnum>;
    treatmentTermId?: Array<string>;
    treatmentTermName?: Array<string>;
    treatmentType?: Array<TreatmentsTreatmentTypeEnum>;
    uuid?: Array<string>;
}

export interface UsersRequest {
    frame: UsersFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    aliases?: Array<string>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    email?: Array<string>;
    firstName?: Array<string>;
    groups?: Array<UsersGroupsEnum>;
    jobTitle?: Array<UsersJobTitleEnum>;
    lab?: Array<string>;
    lastName?: Array<string>;
    notes?: Array<string>;
    status?: Array<UsersStatusEnum>;
    submitsFor?: Array<string>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    title?: Array<string>;
    uuid?: Array<string>;
    viewingGroups?: Array<UsersViewingGroupsEnum>;
}

export interface WholeOrganismsRequest {
    frame: WholeOrganismsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    age?: Array<string>;
    ageUnits?: Array<WholeOrganismsAgeUnitsEnum>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<WholeOrganismsAwardComponentEnum>;
    biomarkers?: Array<string>;
    cellularSubPool?: Array<string>;
    classifications?: Array<string>;
    collections?: Array<WholeOrganismsCollectionsEnum>;
    constructLibrarySets?: Array<string>;
    creationTimestamp?: Array<string>;
    dateObtained?: Array<string>;
    dbxrefs?: Array<string>;
    description?: Array<string>;
    diseaseTermsId?: Array<string>;
    diseaseTermsTermName?: Array<string>;
    documents?: Array<string>;
    donors?: Array<string>;
    embryonic?: Array<boolean>;
    fileSetsId?: Array<string>;
    fileSetsAccession?: Array<string>;
    fileSetsAliases?: Array<string>;
    fileSetsAssayTermTermName?: Array<string>;
    fileSetsLabTitle?: Array<string>;
    fileSetsStatus?: Array<WholeOrganismsFileSetsStatusEnum>;
    fileSetsSummary?: Array<string>;
    institutionalCertificatesId?: Array<string>;
    institutionalCertificatesCertificateIdentifier?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    lotId?: Array<string>;
    lowerBoundAge?: Array<number>;
    lowerBoundAgeInHours?: Array<number>;
    modificationsId?: Array<string>;
    modificationsStatus?: Array<WholeOrganismsModificationsStatusEnum>;
    modificationsSummary?: Array<string>;
    moi?: Array<number>;
    multiplexedInId?: Array<string>;
    multiplexedInAccession?: Array<string>;
    notes?: Array<string>;
    nucleicAcidDelivery?: Array<WholeOrganismsNucleicAcidDeliveryEnum>;
    originOf?: Array<string>;
    originatedFrom?: Array<string>;
    partOf?: Array<string>;
    parts?: Array<string>;
    pooledFrom?: Array<string>;
    pooledIn?: Array<string>;
    productId?: Array<string>;
    protocols?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sampleTermsId?: Array<string>;
    sampleTermsTermName?: Array<string>;
    sex?: Array<WholeOrganismsSexEnum>;
    sortedFractions?: Array<string>;
    sortedFromId?: Array<string>;
    sortedFromAccession?: Array<string>;
    sortedFromDetail?: Array<string>;
    sourcesId?: Array<string>;
    startingAmount?: Array<number>;
    startingAmountUnits?: Array<WholeOrganismsStartingAmountUnitsEnum>;
    status?: Array<WholeOrganismsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    taxa?: Array<WholeOrganismsTaxaEnum>;
    timePostLibraryDelivery?: Array<number>;
    timePostLibraryDeliveryUnits?: Array<WholeOrganismsTimePostLibraryDeliveryUnitsEnum>;
    treatmentsId?: Array<string>;
    treatmentsPurpose?: Array<WholeOrganismsTreatmentsPurposeEnum>;
    treatmentsStatus?: Array<WholeOrganismsTreatmentsStatusEnum>;
    treatmentsSummary?: Array<string>;
    treatmentsTreatmentType?: Array<WholeOrganismsTreatmentsTreatmentTypeEnum>;
    upperBoundAge?: Array<number>;
    upperBoundAgeInHours?: Array<number>;
    url?: Array<string>;
    uuid?: Array<string>;
    virtual?: Array<boolean>;
}

export interface WorkflowsRequest {
    frame: WorkflowsFrameEnum;
    query?: string;
    limit?: Limit;
    sort?: Array<string>;
    id?: Array<string>;
    accession?: Array<string>;
    aliases?: Array<string>;
    alternateAccessions?: Array<string>;
    analysisSteps?: Array<string>;
    awardId?: Array<string>;
    awardComponent?: Array<WorkflowsAwardComponentEnum>;
    collections?: Array<WorkflowsCollectionsEnum>;
    creationTimestamp?: Array<string>;
    description?: Array<string>;
    documents?: Array<string>;
    labId?: Array<string>;
    labTitle?: Array<string>;
    name?: Array<string>;
    notes?: Array<string>;
    publicationIdentifiers?: Array<string>;
    publications?: Array<string>;
    releaseTimestamp?: Array<string>;
    revokeDetail?: Array<string>;
    sourceUrl?: Array<string>;
    standardsPageId?: Array<string>;
    standardsPageTitle?: Array<string>;
    status?: Array<WorkflowsStatusEnum>;
    submittedById?: Array<string>;
    submittedByTitle?: Array<string>;
    submitterComment?: Array<string>;
    summary?: Array<string>;
    uuid?: Array<string>;
    workflowRepositories?: Array<string>;
    workflowVersion?: Array<number>;
}

/**
 * 
 */
export class IgvfApi extends runtime.BaseAPI {

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.
     * List items in the AccessKey collection.
     */
    async accessKeysRaw(requestParameters: AccessKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessKeyResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling accessKeys().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accessKeyId'] != null) {
            queryParameters['access_key_id'] = requestParameters['accessKeyId'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['secretAccessKeyHash'] != null) {
            queryParameters['secret_access_key_hash'] = requestParameters['secretAccessKeyHash'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/access-keys/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessKeyResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.
     * List items in the AccessKey collection.
     */
    async accessKeys(requestParameters: AccessKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessKeyResults> {
        const response = await this.accessKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.
     * List items in the AlignmentFile collection.
     */
    async alignmentFilesRaw(requestParameters: AlignmentFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlignmentFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling alignmentFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['anvilUrl'] != null) {
            queryParameters['anvil_url'] = requestParameters['anvilUrl'];
        }

        if (requestParameters['assembly'] != null) {
            queryParameters['assembly'] = requestParameters['assembly'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentSummary'] != null) {
            queryParameters['content_summary'] = requestParameters['contentSummary'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['filtered'] != null) {
            queryParameters['filtered'] = requestParameters['filtered'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['redacted'] != null) {
            queryParameters['redacted'] = requestParameters['redacted'];
        }

        if (requestParameters['referenceFiles'] != null) {
            queryParameters['reference_files'] = requestParameters['referenceFiles'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/alignment-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.
     * List items in the AlignmentFile collection.
     */
    async alignmentFiles(requestParameters: AlignmentFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlignmentFileResults> {
        const response = await this.alignmentFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.
     * List items in the AnalysisSet collection.
     */
    async analysisSetsRaw(requestParameters: AnalysisSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysisSetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling analysisSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['assayTitles'] != null) {
            queryParameters['assay_titles'] = requestParameters['assayTitles'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatform'] != null) {
            queryParameters['files.sequencing_platform'] = requestParameters['filesSequencingPlatform'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['inputFileSetsId'] != null) {
            queryParameters['input_file_sets.@id'] = requestParameters['inputFileSetsId'];
        }

        if (requestParameters['inputFileSetsAccession'] != null) {
            queryParameters['input_file_sets.accession'] = requestParameters['inputFileSetsAccession'];
        }

        if (requestParameters['inputFileSetsAliases'] != null) {
            queryParameters['input_file_sets.aliases'] = requestParameters['inputFileSetsAliases'];
        }

        if (requestParameters['inputFileSetsFileSetType'] != null) {
            queryParameters['input_file_sets.file_set_type'] = requestParameters['inputFileSetsFileSetType'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatments'] != null) {
            queryParameters['samples.cell_fate_change_treatments'] = requestParameters['samplesCellFateChangeTreatments'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySets'] != null) {
            queryParameters['samples.construct_library_sets'] = requestParameters['samplesConstructLibrarySets'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModifications'] != null) {
            queryParameters['samples.modifications'] = requestParameters['samplesModifications'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatments'] != null) {
            queryParameters['samples.treatments'] = requestParameters['samplesTreatments'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/analysis-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisSetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.
     * List items in the AnalysisSet collection.
     */
    async analysisSets(requestParameters: AnalysisSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysisSetResults> {
        const response = await this.analysisSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.
     * List items in the AnalysisStepVersion collection.
     */
    async analysisStepVersionsRaw(requestParameters: AnalysisStepVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysisStepVersionResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling analysisStepVersions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['analysisStepId'] != null) {
            queryParameters['analysis_step.@id'] = requestParameters['analysisStepId'];
        }

        if (requestParameters['analysisStepName'] != null) {
            queryParameters['analysis_step.name'] = requestParameters['analysisStepName'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['softwareVersionsId'] != null) {
            queryParameters['software_versions.@id'] = requestParameters['softwareVersionsId'];
        }

        if (requestParameters['softwareVersionsName'] != null) {
            queryParameters['software_versions.name'] = requestParameters['softwareVersionsName'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/analysis-step-versions/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisStepVersionResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.
     * List items in the AnalysisStepVersion collection.
     */
    async analysisStepVersions(requestParameters: AnalysisStepVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysisStepVersionResults> {
        const response = await this.analysisStepVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.
     * List items in the AnalysisStep collection.
     */
    async analysisStepsRaw(requestParameters: AnalysisStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysisStepResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling analysisSteps().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['analysisStepTypes'] != null) {
            queryParameters['analysis_step_types'] = requestParameters['analysisStepTypes'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['inputContentTypes'] != null) {
            queryParameters['input_content_types'] = requestParameters['inputContentTypes'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['outputContentTypes'] != null) {
            queryParameters['output_content_types'] = requestParameters['outputContentTypes'];
        }

        if (requestParameters['parentsId'] != null) {
            queryParameters['parents.@id'] = requestParameters['parentsId'];
        }

        if (requestParameters['parentsTitle'] != null) {
            queryParameters['parents.title'] = requestParameters['parentsTitle'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['stepLabel'] != null) {
            queryParameters['step_label'] = requestParameters['stepLabel'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['workflowId'] != null) {
            queryParameters['workflow.@id'] = requestParameters['workflowId'];
        }

        if (requestParameters['workflowAccession'] != null) {
            queryParameters['workflow.accession'] = requestParameters['workflowAccession'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/analysis-steps/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisStepResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.
     * List items in the AnalysisStep collection.
     */
    async analysisSteps(requestParameters: AnalysisStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysisStepResults> {
        const response = await this.analysisStepsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.
     * List items in the AssayTerm collection.
     */
    async assayTermsRaw(requestParameters: AssayTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssayTermResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling assayTerms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['ancestors'] != null) {
            queryParameters['ancestors'] = requestParameters['ancestors'];
        }

        if (requestParameters['assaySlims'] != null) {
            queryParameters['assay_slims'] = requestParameters['assaySlims'];
        }

        if (requestParameters['categorySlims'] != null) {
            queryParameters['category_slims'] = requestParameters['categorySlims'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['deprecatedNtrTerms'] != null) {
            queryParameters['deprecated_ntr_terms'] = requestParameters['deprecatedNtrTerms'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['isA'] != null) {
            queryParameters['is_a'] = requestParameters['isA'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['objectiveSlims'] != null) {
            queryParameters['objective_slims'] = requestParameters['objectiveSlims'];
        }

        if (requestParameters['ontology'] != null) {
            queryParameters['ontology'] = requestParameters['ontology'];
        }

        if (requestParameters['preferredAssayTitles'] != null) {
            queryParameters['preferred_assay_titles'] = requestParameters['preferredAssayTitles'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['termId'] != null) {
            queryParameters['term_id'] = requestParameters['termId'];
        }

        if (requestParameters['termName'] != null) {
            queryParameters['term_name'] = requestParameters['termName'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/assay-terms/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssayTermResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.
     * List items in the AssayTerm collection.
     */
    async assayTerms(requestParameters: AssayTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssayTermResults> {
        const response = await this.assayTermsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.
     * List items in the AuxiliarySet collection.
     */
    async auxiliarySetsRaw(requestParameters: AuxiliarySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuxiliarySetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling auxiliarySets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatform'] != null) {
            queryParameters['files.sequencing_platform'] = requestParameters['filesSequencingPlatform'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['libraryConstructionPlatform'] != null) {
            queryParameters['library_construction_platform'] = requestParameters['libraryConstructionPlatform'];
        }

        if (requestParameters['measurementSetsId'] != null) {
            queryParameters['measurement_sets.@id'] = requestParameters['measurementSetsId'];
        }

        if (requestParameters['measurementSetsAccession'] != null) {
            queryParameters['measurement_sets.accession'] = requestParameters['measurementSetsAccession'];
        }

        if (requestParameters['measurementSetsAliases'] != null) {
            queryParameters['measurement_sets.aliases'] = requestParameters['measurementSetsAliases'];
        }

        if (requestParameters['measurementSetsPreferredAssayTitle'] != null) {
            queryParameters['measurement_sets.preferred_assay_title'] = requestParameters['measurementSetsPreferredAssayTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatments'] != null) {
            queryParameters['samples.cell_fate_change_treatments'] = requestParameters['samplesCellFateChangeTreatments'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySets'] != null) {
            queryParameters['samples.construct_library_sets'] = requestParameters['samplesConstructLibrarySets'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModifications'] != null) {
            queryParameters['samples.modifications'] = requestParameters['samplesModifications'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatments'] != null) {
            queryParameters['samples.treatments'] = requestParameters['samplesTreatments'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/auxiliary-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuxiliarySetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.
     * List items in the AuxiliarySet collection.
     */
    async auxiliarySets(requestParameters: AuxiliarySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuxiliarySetResults> {
        const response = await this.auxiliarySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.
     * List items in the Award collection.
     */
    async awardsRaw(requestParameters: AwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling awards().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['component'] != null) {
            queryParameters['component'] = requestParameters['component'];
        }

        if (requestParameters['contactPi'] != null) {
            queryParameters['contact_pi'] = requestParameters['contactPi'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['pis'] != null) {
            queryParameters['pis'] = requestParameters['pis'];
        }

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['viewingGroup'] != null) {
            queryParameters['viewing_group'] = requestParameters['viewingGroup'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/awards/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.
     * List items in the Award collection.
     */
    async awards(requestParameters: AwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardResults> {
        const response = await this.awardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generates TSV of files contained in FileSets in search results.
     * List files to download based on search query. All results are returned.
     */
    async batchDownloadRaw(requestParameters: BatchDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling batchDownload().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['fieldFilters'] != null) {
            queryParameters['field_filters'] = requestParameters['fieldFilters'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/batch-download`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generates TSV of files contained in FileSets in search results.
     * List files to download based on search query. All results are returned.
     */
    async batchDownload(requestParameters: BatchDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.batchDownloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.
     * List items in the Biomarker collection.
     */
    async biomarkersRaw(requestParameters: BiomarkersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BiomarkerResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling biomarkers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardName'] != null) {
            queryParameters['award.name'] = requestParameters['awardName'];
        }

        if (requestParameters['biomarkerFor'] != null) {
            queryParameters['biomarker_for'] = requestParameters['biomarkerFor'];
        }

        if (requestParameters['classification'] != null) {
            queryParameters['classification'] = requestParameters['classification'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['gene'] != null) {
            queryParameters['gene'] = requestParameters['gene'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['nameQuantification'] != null) {
            queryParameters['name_quantification'] = requestParameters['nameQuantification'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['quantification'] != null) {
            queryParameters['quantification'] = requestParameters['quantification'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/biomarkers/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BiomarkerResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.
     * List items in the Biomarker collection.
     */
    async biomarkers(requestParameters: BiomarkersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BiomarkerResults> {
        const response = await this.biomarkersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.
     * List items in the ConfigurationFile collection.
     */
    async configurationFilesRaw(requestParameters: ConfigurationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigurationFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling configurationFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['seqspecOf'] != null) {
            queryParameters['seqspec_of'] = requestParameters['seqspecOf'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/configuration-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigurationFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.
     * List items in the ConfigurationFile collection.
     */
    async configurationFiles(requestParameters: ConfigurationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigurationFileResults> {
        const response = await this.configurationFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.
     * List items in the ConstructLibrarySet collection.
     */
    async constructLibrarySetsRaw(requestParameters: ConstructLibrarySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConstructLibrarySetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling constructLibrarySets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['appliedToSamplesId'] != null) {
            queryParameters['applied_to_samples.@id'] = requestParameters['appliedToSamplesId'];
        }

        if (requestParameters['appliedToSamplesAccession'] != null) {
            queryParameters['applied_to_samples.accession'] = requestParameters['appliedToSamplesAccession'];
        }

        if (requestParameters['appliedToSamplesAliases'] != null) {
            queryParameters['applied_to_samples.aliases'] = requestParameters['appliedToSamplesAliases'];
        }

        if (requestParameters['appliedToSamplesDiseaseTermsId'] != null) {
            queryParameters['applied_to_samples.disease_terms.@id'] = requestParameters['appliedToSamplesDiseaseTermsId'];
        }

        if (requestParameters['appliedToSamplesDiseaseTermsTermName'] != null) {
            queryParameters['applied_to_samples.disease_terms.term_name'] = requestParameters['appliedToSamplesDiseaseTermsTermName'];
        }

        if (requestParameters['appliedToSamplesSampleTermsId'] != null) {
            queryParameters['applied_to_samples.sample_terms.@id'] = requestParameters['appliedToSamplesSampleTermsId'];
        }

        if (requestParameters['appliedToSamplesSampleTermsTermName'] != null) {
            queryParameters['applied_to_samples.sample_terms.term_name'] = requestParameters['appliedToSamplesSampleTermsTermName'];
        }

        if (requestParameters['appliedToSamplesStatus'] != null) {
            queryParameters['applied_to_samples.status'] = requestParameters['appliedToSamplesStatus'];
        }

        if (requestParameters['appliedToSamplesSummary'] != null) {
            queryParameters['applied_to_samples.summary'] = requestParameters['appliedToSamplesSummary'];
        }

        if (requestParameters['associatedPhenotypesId'] != null) {
            queryParameters['associated_phenotypes.@id'] = requestParameters['associatedPhenotypesId'];
        }

        if (requestParameters['associatedPhenotypesTermId'] != null) {
            queryParameters['associated_phenotypes.term_id'] = requestParameters['associatedPhenotypesTermId'];
        }

        if (requestParameters['associatedPhenotypesTermName'] != null) {
            queryParameters['associated_phenotypes.term_name'] = requestParameters['associatedPhenotypesTermName'];
        }

        if (requestParameters['averageGuideCoverage'] != null) {
            queryParameters['average_guide_coverage'] = requestParameters['averageGuideCoverage'];
        }

        if (requestParameters['averageInsertSize'] != null) {
            queryParameters['average_insert_size'] = requestParameters['averageInsertSize'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['exon'] != null) {
            queryParameters['exon'] = requestParameters['exon'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['guideType'] != null) {
            queryParameters['guide_type'] = requestParameters['guideType'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['integratedContentFiles'] != null) {
            queryParameters['integrated_content_files'] = requestParameters['integratedContentFiles'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['largeScaleGeneListId'] != null) {
            queryParameters['large_scale_gene_list.@id'] = requestParameters['largeScaleGeneListId'];
        }

        if (requestParameters['largeScaleGeneListAccession'] != null) {
            queryParameters['large_scale_gene_list.accession'] = requestParameters['largeScaleGeneListAccession'];
        }

        if (requestParameters['largeScaleGeneListAliases'] != null) {
            queryParameters['large_scale_gene_list.aliases'] = requestParameters['largeScaleGeneListAliases'];
        }

        if (requestParameters['largeScaleLociListId'] != null) {
            queryParameters['large_scale_loci_list.@id'] = requestParameters['largeScaleLociListId'];
        }

        if (requestParameters['largeScaleLociListAccession'] != null) {
            queryParameters['large_scale_loci_list.accession'] = requestParameters['largeScaleLociListAccession'];
        }

        if (requestParameters['largeScaleLociListAliases'] != null) {
            queryParameters['large_scale_loci_list.aliases'] = requestParameters['largeScaleLociListAliases'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['lowerBoundGuideCoverage'] != null) {
            queryParameters['lower_bound_guide_coverage'] = requestParameters['lowerBoundGuideCoverage'];
        }

        if (requestParameters['lowerBoundInsertSize'] != null) {
            queryParameters['lower_bound_insert_size'] = requestParameters['lowerBoundInsertSize'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['orfListId'] != null) {
            queryParameters['orf_list.@id'] = requestParameters['orfListId'];
        }

        if (requestParameters['orfListAliases'] != null) {
            queryParameters['orf_list.aliases'] = requestParameters['orfListAliases'];
        }

        if (requestParameters['orfListGene'] != null) {
            queryParameters['orf_list.gene'] = requestParameters['orfListGene'];
        }

        if (requestParameters['orfListOrfId'] != null) {
            queryParameters['orf_list.orf_id'] = requestParameters['orfListOrfId'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['selectionCriteria'] != null) {
            queryParameters['selection_criteria'] = requestParameters['selectionCriteria'];
        }

        if (requestParameters['smallScaleGeneListId'] != null) {
            queryParameters['small_scale_gene_list.@id'] = requestParameters['smallScaleGeneListId'];
        }

        if (requestParameters['smallScaleGeneListGeneid'] != null) {
            queryParameters['small_scale_gene_list.geneid'] = requestParameters['smallScaleGeneListGeneid'];
        }

        if (requestParameters['smallScaleGeneListName'] != null) {
            queryParameters['small_scale_gene_list.name'] = requestParameters['smallScaleGeneListName'];
        }

        if (requestParameters['smallScaleGeneListSymbol'] != null) {
            queryParameters['small_scale_gene_list.symbol'] = requestParameters['smallScaleGeneListSymbol'];
        }

        if (requestParameters['smallScaleGeneListSynonyms'] != null) {
            queryParameters['small_scale_gene_list.synonyms'] = requestParameters['smallScaleGeneListSynonyms'];
        }

        if (requestParameters['smallScaleLociList'] != null) {
            queryParameters['small_scale_loci_list'] = requestParameters['smallScaleLociList'];
        }

        if (requestParameters['sources'] != null) {
            queryParameters['sources'] = requestParameters['sources'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['targeton'] != null) {
            queryParameters['targeton'] = requestParameters['targeton'];
        }

        if (requestParameters['tilingModality'] != null) {
            queryParameters['tiling_modality'] = requestParameters['tilingModality'];
        }

        if (requestParameters['upperBoundGuideCoverage'] != null) {
            queryParameters['upper_bound_guide_coverage'] = requestParameters['upperBoundGuideCoverage'];
        }

        if (requestParameters['upperBoundInsertSize'] != null) {
            queryParameters['upper_bound_insert_size'] = requestParameters['upperBoundInsertSize'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/construct-library-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstructLibrarySetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.
     * List items in the ConstructLibrarySet collection.
     */
    async constructLibrarySets(requestParameters: ConstructLibrarySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConstructLibrarySetResults> {
        const response = await this.constructLibrarySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.
     * List items in the CrisprModification collection.
     */
    async crisprModificationsRaw(requestParameters: CrisprModificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CrisprModificationResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling crisprModifications().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['activated'] != null) {
            queryParameters['activated'] = requestParameters['activated'];
        }

        if (requestParameters['activatingAgentTermId'] != null) {
            queryParameters['activating_agent_term_id'] = requestParameters['activatingAgentTermId'];
        }

        if (requestParameters['activatingAgentTermName'] != null) {
            queryParameters['activating_agent_term_name'] = requestParameters['activatingAgentTermName'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biosamplesModified'] != null) {
            queryParameters['biosamples_modified'] = requestParameters['biosamplesModified'];
        }

        if (requestParameters['cas'] != null) {
            queryParameters['cas'] = requestParameters['cas'];
        }

        if (requestParameters['casSpecies'] != null) {
            queryParameters['cas_species'] = requestParameters['casSpecies'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fusedDomain'] != null) {
            queryParameters['fused_domain'] = requestParameters['fusedDomain'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['modality'] != null) {
            queryParameters['modality'] = requestParameters['modality'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['sources'] != null) {
            queryParameters['sources'] = requestParameters['sources'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taggedProtein'] != null) {
            queryParameters['tagged_protein'] = requestParameters['taggedProtein'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/crispr-modifications/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CrisprModificationResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.
     * List items in the CrisprModification collection.
     */
    async crisprModifications(requestParameters: CrisprModificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CrisprModificationResults> {
        const response = await this.crisprModificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.
     * List items in the CuratedSet collection.
     */
    async curatedSetsRaw(requestParameters: CuratedSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CuratedSetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling curatedSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['assemblies'] != null) {
            queryParameters['assemblies'] = requestParameters['assemblies'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatform'] != null) {
            queryParameters['files.sequencing_platform'] = requestParameters['filesSequencingPlatform'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatments'] != null) {
            queryParameters['samples.cell_fate_change_treatments'] = requestParameters['samplesCellFateChangeTreatments'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySets'] != null) {
            queryParameters['samples.construct_library_sets'] = requestParameters['samplesConstructLibrarySets'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModifications'] != null) {
            queryParameters['samples.modifications'] = requestParameters['samplesModifications'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatments'] != null) {
            queryParameters['samples.treatments'] = requestParameters['samplesTreatments'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['transcriptomeAnnotations'] != null) {
            queryParameters['transcriptome_annotations'] = requestParameters['transcriptomeAnnotations'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/curated-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CuratedSetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.
     * List items in the CuratedSet collection.
     */
    async curatedSets(requestParameters: CuratedSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CuratedSetResults> {
        const response = await this.curatedSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.
     * List items in the DegronModification collection.
     */
    async degronModificationsRaw(requestParameters: DegronModificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DegronModificationResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling degronModifications().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['activated'] != null) {
            queryParameters['activated'] = requestParameters['activated'];
        }

        if (requestParameters['activatingAgentTermId'] != null) {
            queryParameters['activating_agent_term_id'] = requestParameters['activatingAgentTermId'];
        }

        if (requestParameters['activatingAgentTermName'] != null) {
            queryParameters['activating_agent_term_name'] = requestParameters['activatingAgentTermName'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biosamplesModified'] != null) {
            queryParameters['biosamples_modified'] = requestParameters['biosamplesModified'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['degronSystem'] != null) {
            queryParameters['degron_system'] = requestParameters['degronSystem'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['modality'] != null) {
            queryParameters['modality'] = requestParameters['modality'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['sources'] != null) {
            queryParameters['sources'] = requestParameters['sources'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taggedProteins'] != null) {
            queryParameters['tagged_proteins'] = requestParameters['taggedProteins'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/degron-modifications/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DegronModificationResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.
     * List items in the DegronModification collection.
     */
    async degronModifications(requestParameters: DegronModificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DegronModificationResults> {
        const response = await this.degronModificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.
     * List items in the Document collection.
     */
    async documentsRaw(requestParameters: DocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling documents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['characterizationMethod'] != null) {
            queryParameters['characterization_method'] = requestParameters['characterizationMethod'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documentType'] != null) {
            queryParameters['document_type'] = requestParameters['documentType'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['urls'] != null) {
            queryParameters['urls'] = requestParameters['urls'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/documents/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.
     * List items in the Document collection.
     */
    async documents(requestParameters: DocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentResults> {
        const response = await this.documentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns underlying file associated with file metadata
     * Download file.
     */
    async downloadRaw(requestParameters: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling download().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{file_id}/@@download`.replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns underlying file associated with file metadata
     * Download file.
     */
    async download(requestParameters: DownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.
     * List items in the Gene collection.
     */
    async genesRaw(requestParameters: GenesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling genes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['geneid'] != null) {
            queryParameters['geneid'] = requestParameters['geneid'];
        }

        if (requestParameters['geneidWithVersion'] != null) {
            queryParameters['geneid_with_version'] = requestParameters['geneidWithVersion'];
        }

        if (requestParameters['locations'] != null) {
            queryParameters['locations'] = requestParameters['locations'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['versionNumber'] != null) {
            queryParameters['version_number'] = requestParameters['versionNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/genes/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.
     * List items in the Gene collection.
     */
    async genes(requestParameters: GenesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneResults> {
        const response = await this.genesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.
     * List items in the GenomeBrowserAnnotationFile collection.
     */
    async genomeBrowserAnnotationFilesRaw(requestParameters: GenomeBrowserAnnotationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenomeBrowserAnnotationFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling genomeBrowserAnnotationFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['assembly'] != null) {
            queryParameters['assembly'] = requestParameters['assembly'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileFormatType'] != null) {
            queryParameters['file_format_type'] = requestParameters['fileFormatType'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/genome-browser-annotation-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenomeBrowserAnnotationFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.
     * List items in the GenomeBrowserAnnotationFile collection.
     */
    async genomeBrowserAnnotationFiles(requestParameters: GenomeBrowserAnnotationFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenomeBrowserAnnotationFileResults> {
        const response = await this.genomeBrowserAnnotationFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve detailed information about a specific item using its @id or uuid.
     * Get item information
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling getById().'
            );
        }

        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/{resource_id}`.replace(`{${"resource_id"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed information about a specific item using its @id or uuid.
     * Get item information
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.
     * List items in the HumanDonor collection.
     */
    async humanDonorsRaw(requestParameters: HumanDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HumanDonorResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling humanDonors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['ethnicities'] != null) {
            queryParameters['ethnicities'] = requestParameters['ethnicities'];
        }

        if (requestParameters['humanDonorIdentifiers'] != null) {
            queryParameters['human_donor_identifiers'] = requestParameters['humanDonorIdentifiers'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['phenotypicFeaturesId'] != null) {
            queryParameters['phenotypic_features.@id'] = requestParameters['phenotypicFeaturesId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureId'] != null) {
            queryParameters['phenotypic_features.feature.@id'] = requestParameters['phenotypicFeaturesFeatureId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureTermId'] != null) {
            queryParameters['phenotypic_features.feature.term_id'] = requestParameters['phenotypicFeaturesFeatureTermId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureTermName'] != null) {
            queryParameters['phenotypic_features.feature.term_name'] = requestParameters['phenotypicFeaturesFeatureTermName'];
        }

        if (requestParameters['phenotypicFeaturesObservationDate'] != null) {
            queryParameters['phenotypic_features.observation_date'] = requestParameters['phenotypicFeaturesObservationDate'];
        }

        if (requestParameters['phenotypicFeaturesQuantityUnits'] != null) {
            queryParameters['phenotypic_features.quantity_units'] = requestParameters['phenotypicFeaturesQuantityUnits'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['relatedDonorsDonorId'] != null) {
            queryParameters['related_donors.donor.@id'] = requestParameters['relatedDonorsDonorId'];
        }

        if (requestParameters['relatedDonorsDonorAccession'] != null) {
            queryParameters['related_donors.donor.accession'] = requestParameters['relatedDonorsDonorAccession'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/human-donors/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HumanDonorResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.
     * List items in the HumanDonor collection.
     */
    async humanDonors(requestParameters: HumanDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HumanDonorResults> {
        const response = await this.humanDonorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.
     * List items in the ImageFile collection.
     */
    async imageFilesRaw(requestParameters: ImageFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling imageFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/image-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.
     * List items in the ImageFile collection.
     */
    async imageFiles(requestParameters: ImageFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageFileResults> {
        const response = await this.imageFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.
     * List items in the Image collection.
     */
    async imagesRaw(requestParameters: ImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling images().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['caption'] != null) {
            queryParameters['caption'] = requestParameters['caption'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['downloadUrl'] != null) {
            queryParameters['download_url'] = requestParameters['downloadUrl'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['thumbNail'] != null) {
            queryParameters['thumb_nail'] = requestParameters['thumbNail'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/images/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.
     * List items in the Image collection.
     */
    async images(requestParameters: ImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageResults> {
        const response = await this.imagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.
     * List items in the InVitroSystem collection.
     */
    async inVitroSystemsRaw(requestParameters: InVitroSystemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InVitroSystemResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling inVitroSystems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['age'] != null) {
            queryParameters['age'] = requestParameters['age'];
        }

        if (requestParameters['ageUnits'] != null) {
            queryParameters['age_units'] = requestParameters['ageUnits'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biomarkers'] != null) {
            queryParameters['biomarkers'] = requestParameters['biomarkers'];
        }

        if (requestParameters['cellFateChangeProtocol'] != null) {
            queryParameters['cell_fate_change_protocol'] = requestParameters['cellFateChangeProtocol'];
        }

        if (requestParameters['cellFateChangeTreatmentsId'] != null) {
            queryParameters['cell_fate_change_treatments.@id'] = requestParameters['cellFateChangeTreatmentsId'];
        }

        if (requestParameters['cellFateChangeTreatmentsPurpose'] != null) {
            queryParameters['cell_fate_change_treatments.purpose'] = requestParameters['cellFateChangeTreatmentsPurpose'];
        }

        if (requestParameters['cellFateChangeTreatmentsStatus'] != null) {
            queryParameters['cell_fate_change_treatments.status'] = requestParameters['cellFateChangeTreatmentsStatus'];
        }

        if (requestParameters['cellFateChangeTreatmentsSummary'] != null) {
            queryParameters['cell_fate_change_treatments.summary'] = requestParameters['cellFateChangeTreatmentsSummary'];
        }

        if (requestParameters['cellFateChangeTreatmentsTreatmentType'] != null) {
            queryParameters['cell_fate_change_treatments.treatment_type'] = requestParameters['cellFateChangeTreatmentsTreatmentType'];
        }

        if (requestParameters['cellularSubPool'] != null) {
            queryParameters['cellular_sub_pool'] = requestParameters['cellularSubPool'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySets'] != null) {
            queryParameters['construct_library_sets'] = requestParameters['constructLibrarySets'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['demultiplexedFrom'] != null) {
            queryParameters['demultiplexed_from'] = requestParameters['demultiplexedFrom'];
        }

        if (requestParameters['demultiplexedTo'] != null) {
            queryParameters['demultiplexed_to'] = requestParameters['demultiplexedTo'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['diseaseTermsId'] != null) {
            queryParameters['disease_terms.@id'] = requestParameters['diseaseTermsId'];
        }

        if (requestParameters['diseaseTermsTermName'] != null) {
            queryParameters['disease_terms.term_name'] = requestParameters['diseaseTermsTermName'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['embryonic'] != null) {
            queryParameters['embryonic'] = requestParameters['embryonic'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['growthMedium'] != null) {
            queryParameters['growth_medium'] = requestParameters['growthMedium'];
        }

        if (requestParameters['institutionalCertificatesId'] != null) {
            queryParameters['institutional_certificates.@id'] = requestParameters['institutionalCertificatesId'];
        }

        if (requestParameters['institutionalCertificatesCertificateIdentifier'] != null) {
            queryParameters['institutional_certificates.certificate_identifier'] = requestParameters['institutionalCertificatesCertificateIdentifier'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['lowerBoundAge'] != null) {
            queryParameters['lower_bound_age'] = requestParameters['lowerBoundAge'];
        }

        if (requestParameters['lowerBoundAgeInHours'] != null) {
            queryParameters['lower_bound_age_in_hours'] = requestParameters['lowerBoundAgeInHours'];
        }

        if (requestParameters['modificationsId'] != null) {
            queryParameters['modifications.@id'] = requestParameters['modificationsId'];
        }

        if (requestParameters['modificationsStatus'] != null) {
            queryParameters['modifications.status'] = requestParameters['modificationsStatus'];
        }

        if (requestParameters['modificationsSummary'] != null) {
            queryParameters['modifications.summary'] = requestParameters['modificationsSummary'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['originatedFromId'] != null) {
            queryParameters['originated_from.@id'] = requestParameters['originatedFromId'];
        }

        if (requestParameters['originatedFromAccession'] != null) {
            queryParameters['originated_from.accession'] = requestParameters['originatedFromAccession'];
        }

        if (requestParameters['partOf'] != null) {
            queryParameters['part_of'] = requestParameters['partOf'];
        }

        if (requestParameters['parts'] != null) {
            queryParameters['parts'] = requestParameters['parts'];
        }

        if (requestParameters['passageNumber'] != null) {
            queryParameters['passage_number'] = requestParameters['passageNumber'];
        }

        if (requestParameters['pooledFrom'] != null) {
            queryParameters['pooled_from'] = requestParameters['pooledFrom'];
        }

        if (requestParameters['pooledIn'] != null) {
            queryParameters['pooled_in'] = requestParameters['pooledIn'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['targetedSampleTerm'] != null) {
            queryParameters['targeted_sample_term'] = requestParameters['targetedSampleTerm'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['timePostChange'] != null) {
            queryParameters['time_post_change'] = requestParameters['timePostChange'];
        }

        if (requestParameters['timePostChangeUnits'] != null) {
            queryParameters['time_post_change_units'] = requestParameters['timePostChangeUnits'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['treatmentsId'] != null) {
            queryParameters['treatments.@id'] = requestParameters['treatmentsId'];
        }

        if (requestParameters['treatmentsPurpose'] != null) {
            queryParameters['treatments.purpose'] = requestParameters['treatmentsPurpose'];
        }

        if (requestParameters['treatmentsStatus'] != null) {
            queryParameters['treatments.status'] = requestParameters['treatmentsStatus'];
        }

        if (requestParameters['treatmentsSummary'] != null) {
            queryParameters['treatments.summary'] = requestParameters['treatmentsSummary'];
        }

        if (requestParameters['treatmentsTreatmentType'] != null) {
            queryParameters['treatments.treatment_type'] = requestParameters['treatmentsTreatmentType'];
        }

        if (requestParameters['upperBoundAge'] != null) {
            queryParameters['upper_bound_age'] = requestParameters['upperBoundAge'];
        }

        if (requestParameters['upperBoundAgeInHours'] != null) {
            queryParameters['upper_bound_age_in_hours'] = requestParameters['upperBoundAgeInHours'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/in-vitro-systems/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InVitroSystemResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.
     * List items in the InVitroSystem collection.
     */
    async inVitroSystems(requestParameters: InVitroSystemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InVitroSystemResults> {
        const response = await this.inVitroSystemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.
     * List items in the InstitutionalCertificate collection.
     */
    async institutionalCertificatesRaw(requestParameters: InstitutionalCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionalCertificateResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling institutionalCertificates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['certificateIdentifier'] != null) {
            queryParameters['certificate_identifier'] = requestParameters['certificateIdentifier'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dataUseLimitation'] != null) {
            queryParameters['data_use_limitation'] = requestParameters['dataUseLimitation'];
        }

        if (requestParameters['dataUseLimitationModifiers'] != null) {
            queryParameters['data_use_limitation_modifiers'] = requestParameters['dataUseLimitationModifiers'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['samples'] != null) {
            queryParameters['samples'] = requestParameters['samples'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['urls'] != null) {
            queryParameters['urls'] = requestParameters['urls'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/institutional-certificates/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionalCertificateResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.
     * List items in the InstitutionalCertificate collection.
     */
    async institutionalCertificates(requestParameters: InstitutionalCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionalCertificateResults> {
        const response = await this.institutionalCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.
     * List items in the Lab collection.
     */
    async labsRaw(requestParameters: LabsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling labs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardsId'] != null) {
            queryParameters['awards.@id'] = requestParameters['awardsId'];
        }

        if (requestParameters['awardsComponent'] != null) {
            queryParameters['awards.component'] = requestParameters['awardsComponent'];
        }

        if (requestParameters['awardsName'] != null) {
            queryParameters['awards.name'] = requestParameters['awardsName'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['instituteLabel'] != null) {
            queryParameters['institute_label'] = requestParameters['instituteLabel'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['pi'] != null) {
            queryParameters['pi'] = requestParameters['pi'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/labs/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.
     * List items in the Lab collection.
     */
    async labs(requestParameters: LabsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabResults> {
        const response = await this.labsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.
     * List items in the MatrixFile collection.
     */
    async matrixFilesRaw(requestParameters: MatrixFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatrixFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling matrixFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentSummary'] != null) {
            queryParameters['content_summary'] = requestParameters['contentSummary'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['dimension1'] != null) {
            queryParameters['dimension1'] = requestParameters['dimension1'];
        }

        if (requestParameters['dimension2'] != null) {
            queryParameters['dimension2'] = requestParameters['dimension2'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['referenceFiles'] != null) {
            queryParameters['reference_files'] = requestParameters['referenceFiles'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/matrix-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatrixFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.
     * List items in the MatrixFile collection.
     */
    async matrixFiles(requestParameters: MatrixFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatrixFileResults> {
        const response = await this.matrixFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.
     * List items in the MeasurementSet collection.
     */
    async measurementSetsRaw(requestParameters: MeasurementSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeasurementSetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling measurementSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['assayTermId'] != null) {
            queryParameters['assay_term.@id'] = requestParameters['assayTermId'];
        }

        if (requestParameters['assayTermTermName'] != null) {
            queryParameters['assay_term.term_name'] = requestParameters['assayTermTermName'];
        }

        if (requestParameters['auxiliarySetsId'] != null) {
            queryParameters['auxiliary_sets.@id'] = requestParameters['auxiliarySetsId'];
        }

        if (requestParameters['auxiliarySetsAccession'] != null) {
            queryParameters['auxiliary_sets.accession'] = requestParameters['auxiliarySetsAccession'];
        }

        if (requestParameters['auxiliarySetsAliases'] != null) {
            queryParameters['auxiliary_sets.aliases'] = requestParameters['auxiliarySetsAliases'];
        }

        if (requestParameters['auxiliarySetsFileSetType'] != null) {
            queryParameters['auxiliary_sets.file_set_type'] = requestParameters['auxiliarySetsFileSetType'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlFileSetsId'] != null) {
            queryParameters['control_file_sets.@id'] = requestParameters['controlFileSetsId'];
        }

        if (requestParameters['controlFileSetsAccession'] != null) {
            queryParameters['control_file_sets.accession'] = requestParameters['controlFileSetsAccession'];
        }

        if (requestParameters['controlFileSetsAliases'] != null) {
            queryParameters['control_file_sets.aliases'] = requestParameters['controlFileSetsAliases'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['externalImageUrl'] != null) {
            queryParameters['external_image_url'] = requestParameters['externalImageUrl'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatformId'] != null) {
            queryParameters['files.sequencing_platform.@id'] = requestParameters['filesSequencingPlatformId'];
        }

        if (requestParameters['filesSequencingPlatformTermName'] != null) {
            queryParameters['files.sequencing_platform.term_name'] = requestParameters['filesSequencingPlatformTermName'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['libraryConstructionPlatformId'] != null) {
            queryParameters['library_construction_platform.@id'] = requestParameters['libraryConstructionPlatformId'];
        }

        if (requestParameters['libraryConstructionPlatformTermName'] != null) {
            queryParameters['library_construction_platform.term_name'] = requestParameters['libraryConstructionPlatformTermName'];
        }

        if (requestParameters['multiomeSize'] != null) {
            queryParameters['multiome_size'] = requestParameters['multiomeSize'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['preferredAssayTitle'] != null) {
            queryParameters['preferred_assay_title'] = requestParameters['preferredAssayTitle'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['relatedMultiomeDatasetsId'] != null) {
            queryParameters['related_multiome_datasets.@id'] = requestParameters['relatedMultiomeDatasetsId'];
        }

        if (requestParameters['relatedMultiomeDatasetsAccession'] != null) {
            queryParameters['related_multiome_datasets.accession'] = requestParameters['relatedMultiomeDatasetsAccession'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatmentsId'] != null) {
            queryParameters['samples.cell_fate_change_treatments.@id'] = requestParameters['samplesCellFateChangeTreatmentsId'];
        }

        if (requestParameters['samplesCellFateChangeTreatmentsPurpose'] != null) {
            queryParameters['samples.cell_fate_change_treatments.purpose'] = requestParameters['samplesCellFateChangeTreatmentsPurpose'];
        }

        if (requestParameters['samplesCellFateChangeTreatmentsSummary'] != null) {
            queryParameters['samples.cell_fate_change_treatments.summary'] = requestParameters['samplesCellFateChangeTreatmentsSummary'];
        }

        if (requestParameters['samplesCellFateChangeTreatmentsTreatmentType'] != null) {
            queryParameters['samples.cell_fate_change_treatments.treatment_type'] = requestParameters['samplesCellFateChangeTreatmentsTreatmentType'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySetsId'] != null) {
            queryParameters['samples.construct_library_sets.@id'] = requestParameters['samplesConstructLibrarySetsId'];
        }

        if (requestParameters['samplesConstructLibrarySetsAccession'] != null) {
            queryParameters['samples.construct_library_sets.accession'] = requestParameters['samplesConstructLibrarySetsAccession'];
        }

        if (requestParameters['samplesConstructLibrarySetsFileSetType'] != null) {
            queryParameters['samples.construct_library_sets.file_set_type'] = requestParameters['samplesConstructLibrarySetsFileSetType'];
        }

        if (requestParameters['samplesConstructLibrarySetsSmallScaleGeneListId'] != null) {
            queryParameters['samples.construct_library_sets.small_scale_gene_list.@id'] = requestParameters['samplesConstructLibrarySetsSmallScaleGeneListId'];
        }

        if (requestParameters['samplesConstructLibrarySetsSmallScaleGeneListGeneid'] != null) {
            queryParameters['samples.construct_library_sets.small_scale_gene_list.geneid'] = requestParameters['samplesConstructLibrarySetsSmallScaleGeneListGeneid'];
        }

        if (requestParameters['samplesConstructLibrarySetsSmallScaleGeneListName'] != null) {
            queryParameters['samples.construct_library_sets.small_scale_gene_list.name'] = requestParameters['samplesConstructLibrarySetsSmallScaleGeneListName'];
        }

        if (requestParameters['samplesConstructLibrarySetsSmallScaleGeneListSummary'] != null) {
            queryParameters['samples.construct_library_sets.small_scale_gene_list.summary'] = requestParameters['samplesConstructLibrarySetsSmallScaleGeneListSummary'];
        }

        if (requestParameters['samplesConstructLibrarySetsSmallScaleGeneListSymbol'] != null) {
            queryParameters['samples.construct_library_sets.small_scale_gene_list.symbol'] = requestParameters['samplesConstructLibrarySetsSmallScaleGeneListSymbol'];
        }

        if (requestParameters['samplesConstructLibrarySetsSummary'] != null) {
            queryParameters['samples.construct_library_sets.summary'] = requestParameters['samplesConstructLibrarySetsSummary'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModificationsId'] != null) {
            queryParameters['samples.modifications.@id'] = requestParameters['samplesModificationsId'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatmentsId'] != null) {
            queryParameters['samples.treatments.@id'] = requestParameters['samplesTreatmentsId'];
        }

        if (requestParameters['samplesTreatmentsPurpose'] != null) {
            queryParameters['samples.treatments.purpose'] = requestParameters['samplesTreatmentsPurpose'];
        }

        if (requestParameters['samplesTreatmentsSummary'] != null) {
            queryParameters['samples.treatments.summary'] = requestParameters['samplesTreatmentsSummary'];
        }

        if (requestParameters['samplesTreatmentsTreatmentType'] != null) {
            queryParameters['samples.treatments.treatment_type'] = requestParameters['samplesTreatmentsTreatmentType'];
        }

        if (requestParameters['sequencingLibraryTypes'] != null) {
            queryParameters['sequencing_library_types'] = requestParameters['sequencingLibraryTypes'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['targetedGenesId'] != null) {
            queryParameters['targeted_genes.@id'] = requestParameters['targetedGenesId'];
        }

        if (requestParameters['targetedGenesGeneid'] != null) {
            queryParameters['targeted_genes.geneid'] = requestParameters['targetedGenesGeneid'];
        }

        if (requestParameters['targetedGenesName'] != null) {
            queryParameters['targeted_genes.name'] = requestParameters['targetedGenesName'];
        }

        if (requestParameters['targetedGenesSymbol'] != null) {
            queryParameters['targeted_genes.symbol'] = requestParameters['targetedGenesSymbol'];
        }

        if (requestParameters['targetedGenesSynonyms'] != null) {
            queryParameters['targeted_genes.synonyms'] = requestParameters['targetedGenesSynonyms'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/measurement-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeasurementSetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.
     * List items in the MeasurementSet collection.
     */
    async measurementSets(requestParameters: MeasurementSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeasurementSetResults> {
        const response = await this.measurementSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.
     * List items in the ModelFile collection.
     */
    async modelFilesRaw(requestParameters: ModelFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling modelFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['anvilUrl'] != null) {
            queryParameters['anvil_url'] = requestParameters['anvilUrl'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/model-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.
     * List items in the ModelFile collection.
     */
    async modelFiles(requestParameters: ModelFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelFileResults> {
        const response = await this.modelFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.
     * List items in the ModelSet collection.
     */
    async modelSetsRaw(requestParameters: ModelSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelSetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling modelSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['assessedGenes'] != null) {
            queryParameters['assessed_genes'] = requestParameters['assessedGenes'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatform'] != null) {
            queryParameters['files.sequencing_platform'] = requestParameters['filesSequencingPlatform'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['inputFileSetsId'] != null) {
            queryParameters['input_file_sets.@id'] = requestParameters['inputFileSetsId'];
        }

        if (requestParameters['inputFileSetsAccession'] != null) {
            queryParameters['input_file_sets.accession'] = requestParameters['inputFileSetsAccession'];
        }

        if (requestParameters['inputFileSetsAliases'] != null) {
            queryParameters['input_file_sets.aliases'] = requestParameters['inputFileSetsAliases'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['modelName'] != null) {
            queryParameters['model_name'] = requestParameters['modelName'];
        }

        if (requestParameters['modelVersion'] != null) {
            queryParameters['model_version'] = requestParameters['modelVersion'];
        }

        if (requestParameters['modelZooLocation'] != null) {
            queryParameters['model_zoo_location'] = requestParameters['modelZooLocation'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['predictionObjects'] != null) {
            queryParameters['prediction_objects'] = requestParameters['predictionObjects'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatments'] != null) {
            queryParameters['samples.cell_fate_change_treatments'] = requestParameters['samplesCellFateChangeTreatments'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySets'] != null) {
            queryParameters['samples.construct_library_sets'] = requestParameters['samplesConstructLibrarySets'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModifications'] != null) {
            queryParameters['samples.modifications'] = requestParameters['samplesModifications'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatments'] != null) {
            queryParameters['samples.treatments'] = requestParameters['samplesTreatments'];
        }

        if (requestParameters['softwareVersion'] != null) {
            queryParameters['software_version'] = requestParameters['softwareVersion'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/model-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelSetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.
     * List items in the ModelSet collection.
     */
    async modelSets(requestParameters: ModelSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelSetResults> {
        const response = await this.modelSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.
     * List items in the MultiplexedSample collection.
     */
    async multiplexedSamplesRaw(requestParameters: MultiplexedSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiplexedSampleResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling multiplexedSamples().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['barcodeSampleMap'] != null) {
            queryParameters['barcode_sample_map'] = requestParameters['barcodeSampleMap'];
        }

        if (requestParameters['biomarkers'] != null) {
            queryParameters['biomarkers'] = requestParameters['biomarkers'];
        }

        if (requestParameters['cellularSubPool'] != null) {
            queryParameters['cellular_sub_pool'] = requestParameters['cellularSubPool'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySetsId'] != null) {
            queryParameters['construct_library_sets.@id'] = requestParameters['constructLibrarySetsId'];
        }

        if (requestParameters['constructLibrarySetsAccession'] != null) {
            queryParameters['construct_library_sets.accession'] = requestParameters['constructLibrarySetsAccession'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['diseaseTermsId'] != null) {
            queryParameters['disease_terms.@id'] = requestParameters['diseaseTermsId'];
        }

        if (requestParameters['diseaseTermsTermName'] != null) {
            queryParameters['disease_terms.term_name'] = requestParameters['diseaseTermsTermName'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['institutionalCertificates'] != null) {
            queryParameters['institutional_certificates'] = requestParameters['institutionalCertificates'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['modificationsId'] != null) {
            queryParameters['modifications.@id'] = requestParameters['modificationsId'];
        }

        if (requestParameters['modificationsStatus'] != null) {
            queryParameters['modifications.status'] = requestParameters['modificationsStatus'];
        }

        if (requestParameters['modificationsSummary'] != null) {
            queryParameters['modifications.summary'] = requestParameters['modificationsSummary'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['multiplexedSamplesId'] != null) {
            queryParameters['multiplexed_samples.@id'] = requestParameters['multiplexedSamplesId'];
        }

        if (requestParameters['multiplexedSamplesAccession'] != null) {
            queryParameters['multiplexed_samples.accession'] = requestParameters['multiplexedSamplesAccession'];
        }

        if (requestParameters['multiplexedSamplesConstructLibrarySets'] != null) {
            queryParameters['multiplexed_samples.construct_library_sets'] = requestParameters['multiplexedSamplesConstructLibrarySets'];
        }

        if (requestParameters['multiplexedSamplesDiseaseTermsId'] != null) {
            queryParameters['multiplexed_samples.disease_terms.@id'] = requestParameters['multiplexedSamplesDiseaseTermsId'];
        }

        if (requestParameters['multiplexedSamplesDiseaseTermsTermName'] != null) {
            queryParameters['multiplexed_samples.disease_terms.term_name'] = requestParameters['multiplexedSamplesDiseaseTermsTermName'];
        }

        if (requestParameters['multiplexedSamplesDonorsId'] != null) {
            queryParameters['multiplexed_samples.donors.@id'] = requestParameters['multiplexedSamplesDonorsId'];
        }

        if (requestParameters['multiplexedSamplesDonorsAccession'] != null) {
            queryParameters['multiplexed_samples.donors.accession'] = requestParameters['multiplexedSamplesDonorsAccession'];
        }

        if (requestParameters['multiplexedSamplesSampleTermsId'] != null) {
            queryParameters['multiplexed_samples.sample_terms.@id'] = requestParameters['multiplexedSamplesSampleTermsId'];
        }

        if (requestParameters['multiplexedSamplesSampleTermsTermName'] != null) {
            queryParameters['multiplexed_samples.sample_terms.term_name'] = requestParameters['multiplexedSamplesSampleTermsTermName'];
        }

        if (requestParameters['multiplexedSamplesStatus'] != null) {
            queryParameters['multiplexed_samples.status'] = requestParameters['multiplexedSamplesStatus'];
        }

        if (requestParameters['multiplexedSamplesSummary'] != null) {
            queryParameters['multiplexed_samples.summary'] = requestParameters['multiplexedSamplesSummary'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['treatmentsId'] != null) {
            queryParameters['treatments.@id'] = requestParameters['treatmentsId'];
        }

        if (requestParameters['treatmentsPurpose'] != null) {
            queryParameters['treatments.purpose'] = requestParameters['treatmentsPurpose'];
        }

        if (requestParameters['treatmentsStatus'] != null) {
            queryParameters['treatments.status'] = requestParameters['treatmentsStatus'];
        }

        if (requestParameters['treatmentsSummary'] != null) {
            queryParameters['treatments.summary'] = requestParameters['treatmentsSummary'];
        }

        if (requestParameters['treatmentsTreatmentType'] != null) {
            queryParameters['treatments.treatment_type'] = requestParameters['treatmentsTreatmentType'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/multiplexed-samples/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultiplexedSampleResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.
     * List items in the MultiplexedSample collection.
     */
    async multiplexedSamples(requestParameters: MultiplexedSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiplexedSampleResults> {
        const response = await this.multiplexedSamplesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.
     * List items in the OpenReadingFrame collection.
     */
    async openReadingFramesRaw(requestParameters: OpenReadingFramesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReadingFrameResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling openReadingFrames().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['award'] != null) {
            queryParameters['award'] = requestParameters['award'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['geneId'] != null) {
            queryParameters['gene.@id'] = requestParameters['geneId'];
        }

        if (requestParameters['geneGeneid'] != null) {
            queryParameters['gene.geneid'] = requestParameters['geneGeneid'];
        }

        if (requestParameters['geneSymbol'] != null) {
            queryParameters['gene.symbol'] = requestParameters['geneSymbol'];
        }

        if (requestParameters['lab'] != null) {
            queryParameters['lab'] = requestParameters['lab'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['orfId'] != null) {
            queryParameters['orf_id'] = requestParameters['orfId'];
        }

        if (requestParameters['pctCoverageOrf'] != null) {
            queryParameters['pct_coverage_orf'] = requestParameters['pctCoverageOrf'];
        }

        if (requestParameters['pctCoverageProtein'] != null) {
            queryParameters['pct_coverage_protein'] = requestParameters['pctCoverageProtein'];
        }

        if (requestParameters['pctIdenticalProtein'] != null) {
            queryParameters['pct_identical_protein'] = requestParameters['pctIdenticalProtein'];
        }

        if (requestParameters['proteinId'] != null) {
            queryParameters['protein_id'] = requestParameters['proteinId'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedBy'] != null) {
            queryParameters['submitted_by'] = requestParameters['submittedBy'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/open-reading-frames/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReadingFrameResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.
     * List items in the OpenReadingFrame collection.
     */
    async openReadingFrames(requestParameters: OpenReadingFramesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReadingFrameResults> {
        const response = await this.openReadingFramesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.
     * List items in the Page collection.
     */
    async pagesRaw(requestParameters: PagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling pages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['award'] != null) {
            queryParameters['award'] = requestParameters['award'];
        }

        if (requestParameters['canonicalUri'] != null) {
            queryParameters['canonical_uri'] = requestParameters['canonicalUri'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['lab'] != null) {
            queryParameters['lab'] = requestParameters['lab'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/pages/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.
     * List items in the Page collection.
     */
    async pages(requestParameters: PagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResults> {
        const response = await this.pagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.
     * List items in the PhenotypeTerm collection.
     */
    async phenotypeTermsRaw(requestParameters: PhenotypeTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhenotypeTermResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling phenotypeTerms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['ancestors'] != null) {
            queryParameters['ancestors'] = requestParameters['ancestors'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['deprecatedNtrTerms'] != null) {
            queryParameters['deprecated_ntr_terms'] = requestParameters['deprecatedNtrTerms'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['isA'] != null) {
            queryParameters['is_a'] = requestParameters['isA'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['ontology'] != null) {
            queryParameters['ontology'] = requestParameters['ontology'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['termId'] != null) {
            queryParameters['term_id'] = requestParameters['termId'];
        }

        if (requestParameters['termName'] != null) {
            queryParameters['term_name'] = requestParameters['termName'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/phenotype-terms/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhenotypeTermResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.
     * List items in the PhenotypeTerm collection.
     */
    async phenotypeTerms(requestParameters: PhenotypeTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhenotypeTermResults> {
        const response = await this.phenotypeTermsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.
     * List items in the PhenotypicFeature collection.
     */
    async phenotypicFeaturesRaw(requestParameters: PhenotypicFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PhenotypicFeatureResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling phenotypicFeatures().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['featureId'] != null) {
            queryParameters['feature.@id'] = requestParameters['featureId'];
        }

        if (requestParameters['featureTermId'] != null) {
            queryParameters['feature.term_id'] = requestParameters['featureTermId'];
        }

        if (requestParameters['featureTermName'] != null) {
            queryParameters['feature.term_name'] = requestParameters['featureTermName'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['observationDate'] != null) {
            queryParameters['observation_date'] = requestParameters['observationDate'];
        }

        if (requestParameters['quantity'] != null) {
            queryParameters['quantity'] = requestParameters['quantity'];
        }

        if (requestParameters['quantityUnits'] != null) {
            queryParameters['quantity_units'] = requestParameters['quantityUnits'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/phenotypic-features/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhenotypicFeatureResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.
     * List items in the PhenotypicFeature collection.
     */
    async phenotypicFeatures(requestParameters: PhenotypicFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PhenotypicFeatureResults> {
        const response = await this.phenotypicFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.
     * List items in the PlatformTerm collection.
     */
    async platformTermsRaw(requestParameters: PlatformTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlatformTermResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling platformTerms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['ancestors'] != null) {
            queryParameters['ancestors'] = requestParameters['ancestors'];
        }

        if (requestParameters['company'] != null) {
            queryParameters['company'] = requestParameters['company'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['deprecatedNtrTerms'] != null) {
            queryParameters['deprecated_ntr_terms'] = requestParameters['deprecatedNtrTerms'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['isA'] != null) {
            queryParameters['is_a'] = requestParameters['isA'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['ontology'] != null) {
            queryParameters['ontology'] = requestParameters['ontology'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['sequencingKits'] != null) {
            queryParameters['sequencing_kits'] = requestParameters['sequencingKits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['termId'] != null) {
            queryParameters['term_id'] = requestParameters['termId'];
        }

        if (requestParameters['termName'] != null) {
            queryParameters['term_name'] = requestParameters['termName'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/platform-terms/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlatformTermResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.
     * List items in the PlatformTerm collection.
     */
    async platformTerms(requestParameters: PlatformTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlatformTermResults> {
        const response = await this.platformTermsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.
     * List items in the PredictionSet collection.
     */
    async predictionSetsRaw(requestParameters: PredictionSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictionSetResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling predictionSets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['awardContactPiId'] != null) {
            queryParameters['award.contact_pi.@id'] = requestParameters['awardContactPiId'];
        }

        if (requestParameters['awardContactPiTitle'] != null) {
            queryParameters['award.contact_pi.title'] = requestParameters['awardContactPiTitle'];
        }

        if (requestParameters['awardTitle'] != null) {
            queryParameters['award.title'] = requestParameters['awardTitle'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['controlForId'] != null) {
            queryParameters['control_for.@id'] = requestParameters['controlForId'];
        }

        if (requestParameters['controlForAccession'] != null) {
            queryParameters['control_for.accession'] = requestParameters['controlForAccession'];
        }

        if (requestParameters['controlForAliases'] != null) {
            queryParameters['control_for.aliases'] = requestParameters['controlForAliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donorsId'] != null) {
            queryParameters['donors.@id'] = requestParameters['donorsId'];
        }

        if (requestParameters['donorsAccession'] != null) {
            queryParameters['donors.accession'] = requestParameters['donorsAccession'];
        }

        if (requestParameters['donorsAliases'] != null) {
            queryParameters['donors.aliases'] = requestParameters['donorsAliases'];
        }

        if (requestParameters['donorsSex'] != null) {
            queryParameters['donors.sex'] = requestParameters['donorsSex'];
        }

        if (requestParameters['donorsStatus'] != null) {
            queryParameters['donors.status'] = requestParameters['donorsStatus'];
        }

        if (requestParameters['donorsTaxa'] != null) {
            queryParameters['donors.taxa'] = requestParameters['donorsTaxa'];
        }

        if (requestParameters['fileSetType'] != null) {
            queryParameters['file_set_type'] = requestParameters['fileSetType'];
        }

        if (requestParameters['filesId'] != null) {
            queryParameters['files.@id'] = requestParameters['filesId'];
        }

        if (requestParameters['filesAccession'] != null) {
            queryParameters['files.accession'] = requestParameters['filesAccession'];
        }

        if (requestParameters['filesAliases'] != null) {
            queryParameters['files.aliases'] = requestParameters['filesAliases'];
        }

        if (requestParameters['filesContentType'] != null) {
            queryParameters['files.content_type'] = requestParameters['filesContentType'];
        }

        if (requestParameters['filesCreationTimestamp'] != null) {
            queryParameters['files.creation_timestamp'] = requestParameters['filesCreationTimestamp'];
        }

        if (requestParameters['filesFileFormat'] != null) {
            queryParameters['files.file_format'] = requestParameters['filesFileFormat'];
        }

        if (requestParameters['filesFileSize'] != null) {
            queryParameters['files.file_size'] = requestParameters['filesFileSize'];
        }

        if (requestParameters['filesHref'] != null) {
            queryParameters['files.href'] = requestParameters['filesHref'];
        }

        if (requestParameters['filesS3Uri'] != null) {
            queryParameters['files.s3_uri'] = requestParameters['filesS3Uri'];
        }

        if (requestParameters['filesSequencingPlatform'] != null) {
            queryParameters['files.sequencing_platform'] = requestParameters['filesSequencingPlatform'];
        }

        if (requestParameters['filesSubmittedFileName'] != null) {
            queryParameters['files.submitted_file_name'] = requestParameters['filesSubmittedFileName'];
        }

        if (requestParameters['filesUploadStatus'] != null) {
            queryParameters['files.upload_status'] = requestParameters['filesUploadStatus'];
        }

        if (requestParameters['inputFileSetFor'] != null) {
            queryParameters['input_file_set_for'] = requestParameters['inputFileSetFor'];
        }

        if (requestParameters['inputFileSets'] != null) {
            queryParameters['input_file_sets'] = requestParameters['inputFileSets'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['largeScaleGeneListId'] != null) {
            queryParameters['large_scale_gene_list.@id'] = requestParameters['largeScaleGeneListId'];
        }

        if (requestParameters['largeScaleGeneListAccession'] != null) {
            queryParameters['large_scale_gene_list.accession'] = requestParameters['largeScaleGeneListAccession'];
        }

        if (requestParameters['largeScaleGeneListAliases'] != null) {
            queryParameters['large_scale_gene_list.aliases'] = requestParameters['largeScaleGeneListAliases'];
        }

        if (requestParameters['largeScaleLociListId'] != null) {
            queryParameters['large_scale_loci_list.@id'] = requestParameters['largeScaleLociListId'];
        }

        if (requestParameters['largeScaleLociListAccession'] != null) {
            queryParameters['large_scale_loci_list.accession'] = requestParameters['largeScaleLociListAccession'];
        }

        if (requestParameters['largeScaleLociListAliases'] != null) {
            queryParameters['large_scale_loci_list.aliases'] = requestParameters['largeScaleLociListAliases'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['samplesId'] != null) {
            queryParameters['samples.@id'] = requestParameters['samplesId'];
        }

        if (requestParameters['samplesAccession'] != null) {
            queryParameters['samples.accession'] = requestParameters['samplesAccession'];
        }

        if (requestParameters['samplesAliases'] != null) {
            queryParameters['samples.aliases'] = requestParameters['samplesAliases'];
        }

        if (requestParameters['samplesCellFateChangeTreatments'] != null) {
            queryParameters['samples.cell_fate_change_treatments'] = requestParameters['samplesCellFateChangeTreatments'];
        }

        if (requestParameters['samplesClassifications'] != null) {
            queryParameters['samples.classifications'] = requestParameters['samplesClassifications'];
        }

        if (requestParameters['samplesConstructLibrarySetsId'] != null) {
            queryParameters['samples.construct_library_sets.@id'] = requestParameters['samplesConstructLibrarySetsId'];
        }

        if (requestParameters['samplesConstructLibrarySetsAccession'] != null) {
            queryParameters['samples.construct_library_sets.accession'] = requestParameters['samplesConstructLibrarySetsAccession'];
        }

        if (requestParameters['samplesConstructLibrarySetsSummary'] != null) {
            queryParameters['samples.construct_library_sets.summary'] = requestParameters['samplesConstructLibrarySetsSummary'];
        }

        if (requestParameters['samplesDiseaseTermsId'] != null) {
            queryParameters['samples.disease_terms.@id'] = requestParameters['samplesDiseaseTermsId'];
        }

        if (requestParameters['samplesDiseaseTermsTermName'] != null) {
            queryParameters['samples.disease_terms.term_name'] = requestParameters['samplesDiseaseTermsTermName'];
        }

        if (requestParameters['samplesModifications'] != null) {
            queryParameters['samples.modifications'] = requestParameters['samplesModifications'];
        }

        if (requestParameters['samplesSampleTermsId'] != null) {
            queryParameters['samples.sample_terms.@id'] = requestParameters['samplesSampleTermsId'];
        }

        if (requestParameters['samplesSampleTermsAliases'] != null) {
            queryParameters['samples.sample_terms.aliases'] = requestParameters['samplesSampleTermsAliases'];
        }

        if (requestParameters['samplesSampleTermsStatus'] != null) {
            queryParameters['samples.sample_terms.status'] = requestParameters['samplesSampleTermsStatus'];
        }

        if (requestParameters['samplesSampleTermsSummary'] != null) {
            queryParameters['samples.sample_terms.summary'] = requestParameters['samplesSampleTermsSummary'];
        }

        if (requestParameters['samplesSampleTermsTermName'] != null) {
            queryParameters['samples.sample_terms.term_name'] = requestParameters['samplesSampleTermsTermName'];
        }

        if (requestParameters['samplesStatus'] != null) {
            queryParameters['samples.status'] = requestParameters['samplesStatus'];
        }

        if (requestParameters['samplesSummary'] != null) {
            queryParameters['samples.summary'] = requestParameters['samplesSummary'];
        }

        if (requestParameters['samplesTargetedSampleTermId'] != null) {
            queryParameters['samples.targeted_sample_term.@id'] = requestParameters['samplesTargetedSampleTermId'];
        }

        if (requestParameters['samplesTargetedSampleTermTermName'] != null) {
            queryParameters['samples.targeted_sample_term.term_name'] = requestParameters['samplesTargetedSampleTermTermName'];
        }

        if (requestParameters['samplesTaxa'] != null) {
            queryParameters['samples.taxa'] = requestParameters['samplesTaxa'];
        }

        if (requestParameters['samplesTreatments'] != null) {
            queryParameters['samples.treatments'] = requestParameters['samplesTreatments'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['smallScaleGeneListId'] != null) {
            queryParameters['small_scale_gene_list.@id'] = requestParameters['smallScaleGeneListId'];
        }

        if (requestParameters['smallScaleGeneListGeneid'] != null) {
            queryParameters['small_scale_gene_list.geneid'] = requestParameters['smallScaleGeneListGeneid'];
        }

        if (requestParameters['smallScaleGeneListName'] != null) {
            queryParameters['small_scale_gene_list.name'] = requestParameters['smallScaleGeneListName'];
        }

        if (requestParameters['smallScaleGeneListSymbol'] != null) {
            queryParameters['small_scale_gene_list.symbol'] = requestParameters['smallScaleGeneListSymbol'];
        }

        if (requestParameters['smallScaleGeneListSynonyms'] != null) {
            queryParameters['small_scale_gene_list.synonyms'] = requestParameters['smallScaleGeneListSynonyms'];
        }

        if (requestParameters['smallScaleLociList'] != null) {
            queryParameters['small_scale_loci_list'] = requestParameters['smallScaleLociList'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFilesTimestamp'] != null) {
            queryParameters['submitted_files_timestamp'] = requestParameters['submittedFilesTimestamp'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/prediction-sets/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictionSetResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.
     * List items in the PredictionSet collection.
     */
    async predictionSets(requestParameters: PredictionSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictionSetResults> {
        const response = await this.predictionSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.
     * List items in the PrimaryCell collection.
     */
    async primaryCellsRaw(requestParameters: PrimaryCellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrimaryCellResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling primaryCells().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['age'] != null) {
            queryParameters['age'] = requestParameters['age'];
        }

        if (requestParameters['ageUnits'] != null) {
            queryParameters['age_units'] = requestParameters['ageUnits'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biomarkers'] != null) {
            queryParameters['biomarkers'] = requestParameters['biomarkers'];
        }

        if (requestParameters['cellularSubPool'] != null) {
            queryParameters['cellular_sub_pool'] = requestParameters['cellularSubPool'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySets'] != null) {
            queryParameters['construct_library_sets'] = requestParameters['constructLibrarySets'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['diseaseTermsId'] != null) {
            queryParameters['disease_terms.@id'] = requestParameters['diseaseTermsId'];
        }

        if (requestParameters['diseaseTermsTermName'] != null) {
            queryParameters['disease_terms.term_name'] = requestParameters['diseaseTermsTermName'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['embryonic'] != null) {
            queryParameters['embryonic'] = requestParameters['embryonic'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['institutionalCertificatesId'] != null) {
            queryParameters['institutional_certificates.@id'] = requestParameters['institutionalCertificatesId'];
        }

        if (requestParameters['institutionalCertificatesCertificateIdentifier'] != null) {
            queryParameters['institutional_certificates.certificate_identifier'] = requestParameters['institutionalCertificatesCertificateIdentifier'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['lowerBoundAge'] != null) {
            queryParameters['lower_bound_age'] = requestParameters['lowerBoundAge'];
        }

        if (requestParameters['lowerBoundAgeInHours'] != null) {
            queryParameters['lower_bound_age_in_hours'] = requestParameters['lowerBoundAgeInHours'];
        }

        if (requestParameters['modificationsId'] != null) {
            queryParameters['modifications.@id'] = requestParameters['modificationsId'];
        }

        if (requestParameters['modificationsStatus'] != null) {
            queryParameters['modifications.status'] = requestParameters['modificationsStatus'];
        }

        if (requestParameters['modificationsSummary'] != null) {
            queryParameters['modifications.summary'] = requestParameters['modificationsSummary'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['originatedFrom'] != null) {
            queryParameters['originated_from'] = requestParameters['originatedFrom'];
        }

        if (requestParameters['partOf'] != null) {
            queryParameters['part_of'] = requestParameters['partOf'];
        }

        if (requestParameters['parts'] != null) {
            queryParameters['parts'] = requestParameters['parts'];
        }

        if (requestParameters['passageNumber'] != null) {
            queryParameters['passage_number'] = requestParameters['passageNumber'];
        }

        if (requestParameters['pooledFrom'] != null) {
            queryParameters['pooled_from'] = requestParameters['pooledFrom'];
        }

        if (requestParameters['pooledIn'] != null) {
            queryParameters['pooled_in'] = requestParameters['pooledIn'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['treatmentsId'] != null) {
            queryParameters['treatments.@id'] = requestParameters['treatmentsId'];
        }

        if (requestParameters['treatmentsPurpose'] != null) {
            queryParameters['treatments.purpose'] = requestParameters['treatmentsPurpose'];
        }

        if (requestParameters['treatmentsStatus'] != null) {
            queryParameters['treatments.status'] = requestParameters['treatmentsStatus'];
        }

        if (requestParameters['treatmentsSummary'] != null) {
            queryParameters['treatments.summary'] = requestParameters['treatmentsSummary'];
        }

        if (requestParameters['treatmentsTreatmentType'] != null) {
            queryParameters['treatments.treatment_type'] = requestParameters['treatmentsTreatmentType'];
        }

        if (requestParameters['upperBoundAge'] != null) {
            queryParameters['upper_bound_age'] = requestParameters['upperBoundAge'];
        }

        if (requestParameters['upperBoundAgeInHours'] != null) {
            queryParameters['upper_bound_age_in_hours'] = requestParameters['upperBoundAgeInHours'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/primary-cells/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrimaryCellResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.
     * List items in the PrimaryCell collection.
     */
    async primaryCells(requestParameters: PrimaryCellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrimaryCellResults> {
        const response = await this.primaryCellsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.
     * List items in the Publication collection.
     */
    async publicationsRaw(requestParameters: PublicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicationResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling publications().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['_abstract'] != null) {
            queryParameters['abstract'] = requestParameters['_abstract'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['authors'] != null) {
            queryParameters['authors'] = requestParameters['authors'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['datePublished'] != null) {
            queryParameters['date_published'] = requestParameters['datePublished'];
        }

        if (requestParameters['dateRevised'] != null) {
            queryParameters['date_revised'] = requestParameters['dateRevised'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['fileSets'] != null) {
            queryParameters['file_sets'] = requestParameters['fileSets'];
        }

        if (requestParameters['issue'] != null) {
            queryParameters['issue'] = requestParameters['issue'];
        }

        if (requestParameters['journal'] != null) {
            queryParameters['journal'] = requestParameters['journal'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publicationYear'] != null) {
            queryParameters['publication_year'] = requestParameters['publicationYear'];
        }

        if (requestParameters['publishedBy'] != null) {
            queryParameters['published_by'] = requestParameters['publishedBy'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['samples'] != null) {
            queryParameters['samples'] = requestParameters['samples'];
        }

        if (requestParameters['software'] != null) {
            queryParameters['software'] = requestParameters['software'];
        }

        if (requestParameters['softwareVersions'] != null) {
            queryParameters['software_versions'] = requestParameters['softwareVersions'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['volume'] != null) {
            queryParameters['volume'] = requestParameters['volume'];
        }

        if (requestParameters['workflows'] != null) {
            queryParameters['workflows'] = requestParameters['workflows'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/publications/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicationResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.
     * List items in the Publication collection.
     */
    async publications(requestParameters: PublicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicationResults> {
        const response = await this.publicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.
     * List items in the ReferenceFile collection.
     */
    async referenceFilesRaw(requestParameters: ReferenceFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReferenceFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling referenceFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['anvilUrl'] != null) {
            queryParameters['anvil_url'] = requestParameters['anvilUrl'];
        }

        if (requestParameters['assembly'] != null) {
            queryParameters['assembly'] = requestParameters['assembly'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['external'] != null) {
            queryParameters['external'] = requestParameters['external'];
        }

        if (requestParameters['externalId'] != null) {
            queryParameters['external_id'] = requestParameters['externalId'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileFormatType'] != null) {
            queryParameters['file_format_type'] = requestParameters['fileFormatType'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['sourceUrl'] != null) {
            queryParameters['source_url'] = requestParameters['sourceUrl'];
        }

        if (requestParameters['sources'] != null) {
            queryParameters['sources'] = requestParameters['sources'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/reference-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.
     * List items in the ReferenceFile collection.
     */
    async referenceFiles(requestParameters: ReferenceFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReferenceFileResults> {
        const response = await this.referenceFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).
     * Generate a report based on search query. All results are returned.
     */
    async reportRaw(requestParameters: ReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['fieldFilters'] != null) {
            queryParameters['field_filters'] = requestParameters['fieldFilters'];
        }

        if (requestParameters['include_fields'] != null) {
            queryParameters['field'] = requestParameters['include_fields'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/multireport.tsv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).
     * Generate a report based on search query. All results are returned.
     */
    async report(requestParameters: ReportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.reportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.
     * List items in the RodentDonor collection.
     */
    async rodentDonorsRaw(requestParameters: RodentDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RodentDonorResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling rodentDonors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['genotype'] != null) {
            queryParameters['genotype'] = requestParameters['genotype'];
        }

        if (requestParameters['individualRodent'] != null) {
            queryParameters['individual_rodent'] = requestParameters['individualRodent'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['phenotypicFeaturesId'] != null) {
            queryParameters['phenotypic_features.@id'] = requestParameters['phenotypicFeaturesId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureId'] != null) {
            queryParameters['phenotypic_features.feature.@id'] = requestParameters['phenotypicFeaturesFeatureId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureTermId'] != null) {
            queryParameters['phenotypic_features.feature.term_id'] = requestParameters['phenotypicFeaturesFeatureTermId'];
        }

        if (requestParameters['phenotypicFeaturesFeatureTermName'] != null) {
            queryParameters['phenotypic_features.feature.term_name'] = requestParameters['phenotypicFeaturesFeatureTermName'];
        }

        if (requestParameters['phenotypicFeaturesObservationDate'] != null) {
            queryParameters['phenotypic_features.observation_date'] = requestParameters['phenotypicFeaturesObservationDate'];
        }

        if (requestParameters['phenotypicFeaturesQuantityUnits'] != null) {
            queryParameters['phenotypic_features.quantity_units'] = requestParameters['phenotypicFeaturesQuantityUnits'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['rodentIdentifier'] != null) {
            queryParameters['rodent_identifier'] = requestParameters['rodentIdentifier'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['strain'] != null) {
            queryParameters['strain'] = requestParameters['strain'];
        }

        if (requestParameters['strainBackground'] != null) {
            queryParameters['strain_background'] = requestParameters['strainBackground'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rodent-donors/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RodentDonorResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.
     * List items in the RodentDonor collection.
     */
    async rodentDonors(requestParameters: RodentDonorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RodentDonorResults> {
        const response = await this.rodentDonorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.
     * List items in the SampleTerm collection.
     */
    async sampleTermsRaw(requestParameters: SampleTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SampleTermResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling sampleTerms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['ancestors'] != null) {
            queryParameters['ancestors'] = requestParameters['ancestors'];
        }

        if (requestParameters['cellSlims'] != null) {
            queryParameters['cell_slims'] = requestParameters['cellSlims'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['deprecatedNtrTerms'] != null) {
            queryParameters['deprecated_ntr_terms'] = requestParameters['deprecatedNtrTerms'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['developmentalSlims'] != null) {
            queryParameters['developmental_slims'] = requestParameters['developmentalSlims'];
        }

        if (requestParameters['isA'] != null) {
            queryParameters['is_a'] = requestParameters['isA'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['ontology'] != null) {
            queryParameters['ontology'] = requestParameters['ontology'];
        }

        if (requestParameters['organSlims'] != null) {
            queryParameters['organ_slims'] = requestParameters['organSlims'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['systemSlims'] != null) {
            queryParameters['system_slims'] = requestParameters['systemSlims'];
        }

        if (requestParameters['termId'] != null) {
            queryParameters['term_id'] = requestParameters['termId'];
        }

        if (requestParameters['termName'] != null) {
            queryParameters['term_name'] = requestParameters['termName'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/sample-terms/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SampleTermResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.
     * List items in the SampleTerm collection.
     */
    async sampleTerms(requestParameters: SampleTermsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SampleTermResults> {
        const response = await this.sampleTermsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns JSON schemas of all the item types defined in IGVF
     * Retrieve JSON schema for item type
     */
    async schemaForItemTypeRaw(requestParameters: SchemaForItemTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['itemType'] == null) {
            throw new runtime.RequiredError(
                'itemType',
                'Required parameter "itemType" was null or undefined when calling schemaForItemType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/profiles/{item_type}`.replace(`{${"item_type"}}`, encodeURIComponent(String(requestParameters['itemType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns JSON schemas of all the item types defined in IGVF
     * Retrieve JSON schema for item type
     */
    async schemaForItemType(requestParameters: SchemaForItemTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.schemaForItemTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns JSON schemas of all the item types defined in IGVF
     * Retrieve JSON schemas for all item types
     */
    async schemasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns JSON schemas of all the item types defined in IGVF
     * Retrieve JSON schemas for all item types
     */
    async schemas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.schemasRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.
     * Search for items in the IGVF Project.
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling search().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['fieldFilters'] != null) {
            queryParameters['field_filters'] = requestParameters['fieldFilters'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultsFromJSON(jsonValue));
    }

    /**
     * Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.
     * Search for items in the IGVF Project.
     */
    async search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.
     * List items in the SequenceFile collection.
     */
    async sequenceFilesRaw(requestParameters: SequenceFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SequenceFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling sequenceFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['anvilUrl'] != null) {
            queryParameters['anvil_url'] = requestParameters['anvilUrl'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['flowcellId'] != null) {
            queryParameters['flowcell_id'] = requestParameters['flowcellId'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['illuminaReadType'] != null) {
            queryParameters['illumina_read_type'] = requestParameters['illuminaReadType'];
        }

        if (requestParameters['index'] != null) {
            queryParameters['index'] = requestParameters['index'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lane'] != null) {
            queryParameters['lane'] = requestParameters['lane'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['maximumReadLength'] != null) {
            queryParameters['maximum_read_length'] = requestParameters['maximumReadLength'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['meanReadLength'] != null) {
            queryParameters['mean_read_length'] = requestParameters['meanReadLength'];
        }

        if (requestParameters['minimumReadLength'] != null) {
            queryParameters['minimum_read_length'] = requestParameters['minimumReadLength'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['readCount'] != null) {
            queryParameters['read_count'] = requestParameters['readCount'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['seqspecs'] != null) {
            queryParameters['seqspecs'] = requestParameters['seqspecs'];
        }

        if (requestParameters['sequencingKit'] != null) {
            queryParameters['sequencing_kit'] = requestParameters['sequencingKit'];
        }

        if (requestParameters['sequencingPlatform'] != null) {
            queryParameters['sequencing_platform'] = requestParameters['sequencingPlatform'];
        }

        if (requestParameters['sequencingRun'] != null) {
            queryParameters['sequencing_run'] = requestParameters['sequencingRun'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/sequence-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SequenceFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.
     * List items in the SequenceFile collection.
     */
    async sequenceFiles(requestParameters: SequenceFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SequenceFileResults> {
        const response = await this.sequenceFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.
     * List items in the SignalFile collection.
     */
    async signalFilesRaw(requestParameters: SignalFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SignalFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling signalFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['assembly'] != null) {
            queryParameters['assembly'] = requestParameters['assembly'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentSummary'] != null) {
            queryParameters['content_summary'] = requestParameters['contentSummary'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['filtered'] != null) {
            queryParameters['filtered'] = requestParameters['filtered'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['normalized'] != null) {
            queryParameters['normalized'] = requestParameters['normalized'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['referenceFiles'] != null) {
            queryParameters['reference_files'] = requestParameters['referenceFiles'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['startViewPosition'] != null) {
            queryParameters['start_view_position'] = requestParameters['startViewPosition'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['strandSpecificity'] != null) {
            queryParameters['strand_specificity'] = requestParameters['strandSpecificity'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/signal-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignalFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.
     * List items in the SignalFile collection.
     */
    async signalFiles(requestParameters: SignalFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SignalFileResults> {
        const response = await this.signalFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.
     * List items in the Software collection.
     */
    async softwareRaw(requestParameters: SoftwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftwareResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling software().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['sourceUrl'] != null) {
            queryParameters['source_url'] = requestParameters['sourceUrl'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['usedBy'] != null) {
            queryParameters['used_by'] = requestParameters['usedBy'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['versions'] != null) {
            queryParameters['versions'] = requestParameters['versions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/software/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftwareResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.
     * List items in the Software collection.
     */
    async software(requestParameters: SoftwareRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftwareResults> {
        const response = await this.softwareRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.
     * List items in the SoftwareVersion collection.
     */
    async softwareVersionsRaw(requestParameters: SoftwareVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SoftwareVersionResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling softwareVersions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['downloadId'] != null) {
            queryParameters['download_id'] = requestParameters['downloadId'];
        }

        if (requestParameters['downloadedUrl'] != null) {
            queryParameters['downloaded_url'] = requestParameters['downloadedUrl'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['softwareId'] != null) {
            queryParameters['software.@id'] = requestParameters['softwareId'];
        }

        if (requestParameters['softwareTitle'] != null) {
            queryParameters['software.title'] = requestParameters['softwareTitle'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/software-versions/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SoftwareVersionResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.
     * List items in the SoftwareVersion collection.
     */
    async softwareVersions(requestParameters: SoftwareVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SoftwareVersionResults> {
        const response = await this.softwareVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.
     * List items in the Source collection.
     */
    async sourcesRaw(requestParameters: SourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling sources().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/sources/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.
     * List items in the Source collection.
     */
    async sources(requestParameters: SourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceResults> {
        const response = await this.sourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.
     * List items in the TabularFile collection.
     */
    async tabularFilesRaw(requestParameters: TabularFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TabularFileResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling tabularFiles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisStepVersion'] != null) {
            queryParameters['analysis_step_version'] = requestParameters['analysisStepVersion'];
        }

        if (requestParameters['anvilUrl'] != null) {
            queryParameters['anvil_url'] = requestParameters['anvilUrl'];
        }

        if (requestParameters['assembly'] != null) {
            queryParameters['assembly'] = requestParameters['assembly'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['contentMd5sum'] != null) {
            queryParameters['content_md5sum'] = requestParameters['contentMd5sum'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['controlledAccess'] != null) {
            queryParameters['controlled_access'] = requestParameters['controlledAccess'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['derivedFrom'] != null) {
            queryParameters['derived_from'] = requestParameters['derivedFrom'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileFormat'] != null) {
            queryParameters['file_format'] = requestParameters['fileFormat'];
        }

        if (requestParameters['fileFormatSpecifications'] != null) {
            queryParameters['file_format_specifications'] = requestParameters['fileFormatSpecifications'];
        }

        if (requestParameters['fileFormatType'] != null) {
            queryParameters['file_format_type'] = requestParameters['fileFormatType'];
        }

        if (requestParameters['fileSet'] != null) {
            queryParameters['file_set'] = requestParameters['fileSet'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['geneListFor'] != null) {
            queryParameters['gene_list_for'] = requestParameters['geneListFor'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['inputFileFor'] != null) {
            queryParameters['input_file_for'] = requestParameters['inputFileFor'];
        }

        if (requestParameters['integratedIn'] != null) {
            queryParameters['integrated_in'] = requestParameters['integratedIn'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lociListFor'] != null) {
            queryParameters['loci_list_for'] = requestParameters['lociListFor'];
        }

        if (requestParameters['md5sum'] != null) {
            queryParameters['md5sum'] = requestParameters['md5sum'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['s3Uri'] != null) {
            queryParameters['s3_uri'] = requestParameters['s3Uri'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submittedFileName'] != null) {
            queryParameters['submitted_file_name'] = requestParameters['submittedFileName'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['transcriptomeAnnotation'] != null) {
            queryParameters['transcriptome_annotation'] = requestParameters['transcriptomeAnnotation'];
        }

        if (requestParameters['uploadStatus'] != null) {
            queryParameters['upload_status'] = requestParameters['uploadStatus'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['validationErrorDetail'] != null) {
            queryParameters['validation_error_detail'] = requestParameters['validationErrorDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tabular-files/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TabularFileResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.
     * List items in the TabularFile collection.
     */
    async tabularFiles(requestParameters: TabularFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TabularFileResults> {
        const response = await this.tabularFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.
     * List items in the TechnicalSample collection.
     */
    async technicalSamplesRaw(requestParameters: TechnicalSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TechnicalSampleResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling technicalSamples().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySets'] != null) {
            queryParameters['construct_library_sets'] = requestParameters['constructLibrarySets'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['institutionalCertificates'] != null) {
            queryParameters['institutional_certificates'] = requestParameters['institutionalCertificates'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleMaterial'] != null) {
            queryParameters['sample_material'] = requestParameters['sampleMaterial'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/technical-samples/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TechnicalSampleResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.
     * List items in the TechnicalSample collection.
     */
    async technicalSamples(requestParameters: TechnicalSamplesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TechnicalSampleResults> {
        const response = await this.technicalSamplesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.
     * List items in the Tissue collection.
     */
    async tissuesRaw(requestParameters: TissuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TissueResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling tissues().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['age'] != null) {
            queryParameters['age'] = requestParameters['age'];
        }

        if (requestParameters['ageUnits'] != null) {
            queryParameters['age_units'] = requestParameters['ageUnits'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biomarkers'] != null) {
            queryParameters['biomarkers'] = requestParameters['biomarkers'];
        }

        if (requestParameters['ccfId'] != null) {
            queryParameters['ccf_id'] = requestParameters['ccfId'];
        }

        if (requestParameters['cellularSubPool'] != null) {
            queryParameters['cellular_sub_pool'] = requestParameters['cellularSubPool'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySets'] != null) {
            queryParameters['construct_library_sets'] = requestParameters['constructLibrarySets'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['diseaseTermsId'] != null) {
            queryParameters['disease_terms.@id'] = requestParameters['diseaseTermsId'];
        }

        if (requestParameters['diseaseTermsTermName'] != null) {
            queryParameters['disease_terms.term_name'] = requestParameters['diseaseTermsTermName'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['embryonic'] != null) {
            queryParameters['embryonic'] = requestParameters['embryonic'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['institutionalCertificatesId'] != null) {
            queryParameters['institutional_certificates.@id'] = requestParameters['institutionalCertificatesId'];
        }

        if (requestParameters['institutionalCertificatesCertificateIdentifier'] != null) {
            queryParameters['institutional_certificates.certificate_identifier'] = requestParameters['institutionalCertificatesCertificateIdentifier'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['lowerBoundAge'] != null) {
            queryParameters['lower_bound_age'] = requestParameters['lowerBoundAge'];
        }

        if (requestParameters['lowerBoundAgeInHours'] != null) {
            queryParameters['lower_bound_age_in_hours'] = requestParameters['lowerBoundAgeInHours'];
        }

        if (requestParameters['modificationsId'] != null) {
            queryParameters['modifications.@id'] = requestParameters['modificationsId'];
        }

        if (requestParameters['modificationsStatus'] != null) {
            queryParameters['modifications.status'] = requestParameters['modificationsStatus'];
        }

        if (requestParameters['modificationsSummary'] != null) {
            queryParameters['modifications.summary'] = requestParameters['modificationsSummary'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['originatedFrom'] != null) {
            queryParameters['originated_from'] = requestParameters['originatedFrom'];
        }

        if (requestParameters['partOf'] != null) {
            queryParameters['part_of'] = requestParameters['partOf'];
        }

        if (requestParameters['parts'] != null) {
            queryParameters['parts'] = requestParameters['parts'];
        }

        if (requestParameters['pmi'] != null) {
            queryParameters['pmi'] = requestParameters['pmi'];
        }

        if (requestParameters['pmiUnits'] != null) {
            queryParameters['pmi_units'] = requestParameters['pmiUnits'];
        }

        if (requestParameters['pooledFrom'] != null) {
            queryParameters['pooled_from'] = requestParameters['pooledFrom'];
        }

        if (requestParameters['pooledIn'] != null) {
            queryParameters['pooled_in'] = requestParameters['pooledIn'];
        }

        if (requestParameters['preservationMethod'] != null) {
            queryParameters['preservation_method'] = requestParameters['preservationMethod'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['treatmentsId'] != null) {
            queryParameters['treatments.@id'] = requestParameters['treatmentsId'];
        }

        if (requestParameters['treatmentsPurpose'] != null) {
            queryParameters['treatments.purpose'] = requestParameters['treatmentsPurpose'];
        }

        if (requestParameters['treatmentsStatus'] != null) {
            queryParameters['treatments.status'] = requestParameters['treatmentsStatus'];
        }

        if (requestParameters['treatmentsSummary'] != null) {
            queryParameters['treatments.summary'] = requestParameters['treatmentsSummary'];
        }

        if (requestParameters['treatmentsTreatmentType'] != null) {
            queryParameters['treatments.treatment_type'] = requestParameters['treatmentsTreatmentType'];
        }

        if (requestParameters['upperBoundAge'] != null) {
            queryParameters['upper_bound_age'] = requestParameters['upperBoundAge'];
        }

        if (requestParameters['upperBoundAgeInHours'] != null) {
            queryParameters['upper_bound_age_in_hours'] = requestParameters['upperBoundAgeInHours'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/tissues/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TissueResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.
     * List items in the Tissue collection.
     */
    async tissues(requestParameters: TissuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TissueResults> {
        const response = await this.tissuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.
     * List items in the Treatment collection.
     */
    async treatmentsRaw(requestParameters: TreatmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TreatmentResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling treatments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['amountUnits'] != null) {
            queryParameters['amount_units'] = requestParameters['amountUnits'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biosamplesTreated'] != null) {
            queryParameters['biosamples_treated'] = requestParameters['biosamplesTreated'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['depletion'] != null) {
            queryParameters['depletion'] = requestParameters['depletion'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        if (requestParameters['durationUnits'] != null) {
            queryParameters['duration_units'] = requestParameters['durationUnits'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['pH'] != null) {
            queryParameters['pH'] = requestParameters['pH'];
        }

        if (requestParameters['postTreatmentTime'] != null) {
            queryParameters['post_treatment_time'] = requestParameters['postTreatmentTime'];
        }

        if (requestParameters['postTreatmentTimeUnits'] != null) {
            queryParameters['post_treatment_time_units'] = requestParameters['postTreatmentTimeUnits'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['purpose'] != null) {
            queryParameters['purpose'] = requestParameters['purpose'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['temperature'] != null) {
            queryParameters['temperature'] = requestParameters['temperature'];
        }

        if (requestParameters['temperatureUnits'] != null) {
            queryParameters['temperature_units'] = requestParameters['temperatureUnits'];
        }

        if (requestParameters['treatmentTermId'] != null) {
            queryParameters['treatment_term_id'] = requestParameters['treatmentTermId'];
        }

        if (requestParameters['treatmentTermName'] != null) {
            queryParameters['treatment_term_name'] = requestParameters['treatmentTermName'];
        }

        if (requestParameters['treatmentType'] != null) {
            queryParameters['treatment_type'] = requestParameters['treatmentType'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/treatments/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TreatmentResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.
     * List items in the Treatment collection.
     */
    async treatments(requestParameters: TreatmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TreatmentResults> {
        const response = await this.treatmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.
     * List items in the User collection.
     */
    async usersRaw(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling users().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['groups'] != null) {
            queryParameters['groups'] = requestParameters['groups'];
        }

        if (requestParameters['jobTitle'] != null) {
            queryParameters['job_title'] = requestParameters['jobTitle'];
        }

        if (requestParameters['lab'] != null) {
            queryParameters['lab'] = requestParameters['lab'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submitsFor'] != null) {
            queryParameters['submits_for'] = requestParameters['submitsFor'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['viewingGroups'] != null) {
            queryParameters['viewing_groups'] = requestParameters['viewingGroups'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/users/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.
     * List items in the User collection.
     */
    async users(requestParameters: UsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResults> {
        const response = await this.usersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.
     * List items in the WholeOrganism collection.
     */
    async wholeOrganismsRaw(requestParameters: WholeOrganismsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WholeOrganismResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling wholeOrganisms().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['age'] != null) {
            queryParameters['age'] = requestParameters['age'];
        }

        if (requestParameters['ageUnits'] != null) {
            queryParameters['age_units'] = requestParameters['ageUnits'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['biomarkers'] != null) {
            queryParameters['biomarkers'] = requestParameters['biomarkers'];
        }

        if (requestParameters['cellularSubPool'] != null) {
            queryParameters['cellular_sub_pool'] = requestParameters['cellularSubPool'];
        }

        if (requestParameters['classifications'] != null) {
            queryParameters['classifications'] = requestParameters['classifications'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['constructLibrarySets'] != null) {
            queryParameters['construct_library_sets'] = requestParameters['constructLibrarySets'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['dateObtained'] != null) {
            queryParameters['date_obtained'] = requestParameters['dateObtained'];
        }

        if (requestParameters['dbxrefs'] != null) {
            queryParameters['dbxrefs'] = requestParameters['dbxrefs'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['diseaseTermsId'] != null) {
            queryParameters['disease_terms.@id'] = requestParameters['diseaseTermsId'];
        }

        if (requestParameters['diseaseTermsTermName'] != null) {
            queryParameters['disease_terms.term_name'] = requestParameters['diseaseTermsTermName'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['donors'] != null) {
            queryParameters['donors'] = requestParameters['donors'];
        }

        if (requestParameters['embryonic'] != null) {
            queryParameters['embryonic'] = requestParameters['embryonic'];
        }

        if (requestParameters['fileSetsId'] != null) {
            queryParameters['file_sets.@id'] = requestParameters['fileSetsId'];
        }

        if (requestParameters['fileSetsAccession'] != null) {
            queryParameters['file_sets.accession'] = requestParameters['fileSetsAccession'];
        }

        if (requestParameters['fileSetsAliases'] != null) {
            queryParameters['file_sets.aliases'] = requestParameters['fileSetsAliases'];
        }

        if (requestParameters['fileSetsAssayTermTermName'] != null) {
            queryParameters['file_sets.assay_term.term_name'] = requestParameters['fileSetsAssayTermTermName'];
        }

        if (requestParameters['fileSetsLabTitle'] != null) {
            queryParameters['file_sets.lab.title'] = requestParameters['fileSetsLabTitle'];
        }

        if (requestParameters['fileSetsStatus'] != null) {
            queryParameters['file_sets.status'] = requestParameters['fileSetsStatus'];
        }

        if (requestParameters['fileSetsSummary'] != null) {
            queryParameters['file_sets.summary'] = requestParameters['fileSetsSummary'];
        }

        if (requestParameters['institutionalCertificatesId'] != null) {
            queryParameters['institutional_certificates.@id'] = requestParameters['institutionalCertificatesId'];
        }

        if (requestParameters['institutionalCertificatesCertificateIdentifier'] != null) {
            queryParameters['institutional_certificates.certificate_identifier'] = requestParameters['institutionalCertificatesCertificateIdentifier'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['lotId'] != null) {
            queryParameters['lot_id'] = requestParameters['lotId'];
        }

        if (requestParameters['lowerBoundAge'] != null) {
            queryParameters['lower_bound_age'] = requestParameters['lowerBoundAge'];
        }

        if (requestParameters['lowerBoundAgeInHours'] != null) {
            queryParameters['lower_bound_age_in_hours'] = requestParameters['lowerBoundAgeInHours'];
        }

        if (requestParameters['modificationsId'] != null) {
            queryParameters['modifications.@id'] = requestParameters['modificationsId'];
        }

        if (requestParameters['modificationsStatus'] != null) {
            queryParameters['modifications.status'] = requestParameters['modificationsStatus'];
        }

        if (requestParameters['modificationsSummary'] != null) {
            queryParameters['modifications.summary'] = requestParameters['modificationsSummary'];
        }

        if (requestParameters['moi'] != null) {
            queryParameters['moi'] = requestParameters['moi'];
        }

        if (requestParameters['multiplexedInId'] != null) {
            queryParameters['multiplexed_in.@id'] = requestParameters['multiplexedInId'];
        }

        if (requestParameters['multiplexedInAccession'] != null) {
            queryParameters['multiplexed_in.accession'] = requestParameters['multiplexedInAccession'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['nucleicAcidDelivery'] != null) {
            queryParameters['nucleic_acid_delivery'] = requestParameters['nucleicAcidDelivery'];
        }

        if (requestParameters['originOf'] != null) {
            queryParameters['origin_of'] = requestParameters['originOf'];
        }

        if (requestParameters['originatedFrom'] != null) {
            queryParameters['originated_from'] = requestParameters['originatedFrom'];
        }

        if (requestParameters['partOf'] != null) {
            queryParameters['part_of'] = requestParameters['partOf'];
        }

        if (requestParameters['parts'] != null) {
            queryParameters['parts'] = requestParameters['parts'];
        }

        if (requestParameters['pooledFrom'] != null) {
            queryParameters['pooled_from'] = requestParameters['pooledFrom'];
        }

        if (requestParameters['pooledIn'] != null) {
            queryParameters['pooled_in'] = requestParameters['pooledIn'];
        }

        if (requestParameters['productId'] != null) {
            queryParameters['product_id'] = requestParameters['productId'];
        }

        if (requestParameters['protocols'] != null) {
            queryParameters['protocols'] = requestParameters['protocols'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sampleTermsId'] != null) {
            queryParameters['sample_terms.@id'] = requestParameters['sampleTermsId'];
        }

        if (requestParameters['sampleTermsTermName'] != null) {
            queryParameters['sample_terms.term_name'] = requestParameters['sampleTermsTermName'];
        }

        if (requestParameters['sex'] != null) {
            queryParameters['sex'] = requestParameters['sex'];
        }

        if (requestParameters['sortedFractions'] != null) {
            queryParameters['sorted_fractions'] = requestParameters['sortedFractions'];
        }

        if (requestParameters['sortedFromId'] != null) {
            queryParameters['sorted_from.@id'] = requestParameters['sortedFromId'];
        }

        if (requestParameters['sortedFromAccession'] != null) {
            queryParameters['sorted_from.accession'] = requestParameters['sortedFromAccession'];
        }

        if (requestParameters['sortedFromDetail'] != null) {
            queryParameters['sorted_from_detail'] = requestParameters['sortedFromDetail'];
        }

        if (requestParameters['sourcesId'] != null) {
            queryParameters['sources.@id'] = requestParameters['sourcesId'];
        }

        if (requestParameters['startingAmount'] != null) {
            queryParameters['starting_amount'] = requestParameters['startingAmount'];
        }

        if (requestParameters['startingAmountUnits'] != null) {
            queryParameters['starting_amount_units'] = requestParameters['startingAmountUnits'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['taxa'] != null) {
            queryParameters['taxa'] = requestParameters['taxa'];
        }

        if (requestParameters['timePostLibraryDelivery'] != null) {
            queryParameters['time_post_library_delivery'] = requestParameters['timePostLibraryDelivery'];
        }

        if (requestParameters['timePostLibraryDeliveryUnits'] != null) {
            queryParameters['time_post_library_delivery_units'] = requestParameters['timePostLibraryDeliveryUnits'];
        }

        if (requestParameters['treatmentsId'] != null) {
            queryParameters['treatments.@id'] = requestParameters['treatmentsId'];
        }

        if (requestParameters['treatmentsPurpose'] != null) {
            queryParameters['treatments.purpose'] = requestParameters['treatmentsPurpose'];
        }

        if (requestParameters['treatmentsStatus'] != null) {
            queryParameters['treatments.status'] = requestParameters['treatmentsStatus'];
        }

        if (requestParameters['treatmentsSummary'] != null) {
            queryParameters['treatments.summary'] = requestParameters['treatmentsSummary'];
        }

        if (requestParameters['treatmentsTreatmentType'] != null) {
            queryParameters['treatments.treatment_type'] = requestParameters['treatmentsTreatmentType'];
        }

        if (requestParameters['upperBoundAge'] != null) {
            queryParameters['upper_bound_age'] = requestParameters['upperBoundAge'];
        }

        if (requestParameters['upperBoundAgeInHours'] != null) {
            queryParameters['upper_bound_age_in_hours'] = requestParameters['upperBoundAgeInHours'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['virtual'] != null) {
            queryParameters['virtual'] = requestParameters['virtual'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/whole-organisms/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WholeOrganismResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.
     * List items in the WholeOrganism collection.
     */
    async wholeOrganisms(requestParameters: WholeOrganismsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WholeOrganismResults> {
        const response = await this.wholeOrganismsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.
     * List items in the Workflow collection.
     */
    async workflowsRaw(requestParameters: WorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowResults>> {
        if (requestParameters['frame'] == null) {
            throw new runtime.RequiredError(
                'frame',
                'Required parameter "frame" was null or undefined when calling workflows().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['frame'] != null) {
            queryParameters['frame'] = requestParameters['frame'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['@id'] = requestParameters['id'];
        }

        if (requestParameters['accession'] != null) {
            queryParameters['accession'] = requestParameters['accession'];
        }

        if (requestParameters['aliases'] != null) {
            queryParameters['aliases'] = requestParameters['aliases'];
        }

        if (requestParameters['alternateAccessions'] != null) {
            queryParameters['alternate_accessions'] = requestParameters['alternateAccessions'];
        }

        if (requestParameters['analysisSteps'] != null) {
            queryParameters['analysis_steps'] = requestParameters['analysisSteps'];
        }

        if (requestParameters['awardId'] != null) {
            queryParameters['award.@id'] = requestParameters['awardId'];
        }

        if (requestParameters['awardComponent'] != null) {
            queryParameters['award.component'] = requestParameters['awardComponent'];
        }

        if (requestParameters['collections'] != null) {
            queryParameters['collections'] = requestParameters['collections'];
        }

        if (requestParameters['creationTimestamp'] != null) {
            queryParameters['creation_timestamp'] = requestParameters['creationTimestamp'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['documents'] != null) {
            queryParameters['documents'] = requestParameters['documents'];
        }

        if (requestParameters['labId'] != null) {
            queryParameters['lab.@id'] = requestParameters['labId'];
        }

        if (requestParameters['labTitle'] != null) {
            queryParameters['lab.title'] = requestParameters['labTitle'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['notes'] != null) {
            queryParameters['notes'] = requestParameters['notes'];
        }

        if (requestParameters['publicationIdentifiers'] != null) {
            queryParameters['publication_identifiers'] = requestParameters['publicationIdentifiers'];
        }

        if (requestParameters['publications'] != null) {
            queryParameters['publications'] = requestParameters['publications'];
        }

        if (requestParameters['releaseTimestamp'] != null) {
            queryParameters['release_timestamp'] = requestParameters['releaseTimestamp'];
        }

        if (requestParameters['revokeDetail'] != null) {
            queryParameters['revoke_detail'] = requestParameters['revokeDetail'];
        }

        if (requestParameters['sourceUrl'] != null) {
            queryParameters['source_url'] = requestParameters['sourceUrl'];
        }

        if (requestParameters['standardsPageId'] != null) {
            queryParameters['standards_page.@id'] = requestParameters['standardsPageId'];
        }

        if (requestParameters['standardsPageTitle'] != null) {
            queryParameters['standards_page.title'] = requestParameters['standardsPageTitle'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['submittedById'] != null) {
            queryParameters['submitted_by.@id'] = requestParameters['submittedById'];
        }

        if (requestParameters['submittedByTitle'] != null) {
            queryParameters['submitted_by.title'] = requestParameters['submittedByTitle'];
        }

        if (requestParameters['submitterComment'] != null) {
            queryParameters['submitter_comment'] = requestParameters['submitterComment'];
        }

        if (requestParameters['summary'] != null) {
            queryParameters['summary'] = requestParameters['summary'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['workflowRepositories'] != null) {
            queryParameters['workflow_repositories'] = requestParameters['workflowRepositories'];
        }

        if (requestParameters['workflowVersion'] != null) {
            queryParameters['workflow_version'] = requestParameters['workflowVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/workflows/@@listing`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowResultsFromJSON(jsonValue));
    }

    /**
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.
     * List items in the Workflow collection.
     */
    async workflows(requestParameters: WorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowResults> {
        const response = await this.workflowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AccessKeysFrameEnum = {
    Object: 'object'
} as const;
export type AccessKeysFrameEnum = typeof AccessKeysFrameEnum[keyof typeof AccessKeysFrameEnum];
/**
 * @export
 */
export const AccessKeysStatusEnum = {
    Current: 'current',
    Deleted: 'deleted'
} as const;
export type AccessKeysStatusEnum = typeof AccessKeysStatusEnum[keyof typeof AccessKeysStatusEnum];
/**
 * @export
 */
export const AlignmentFilesFrameEnum = {
    Object: 'object'
} as const;
export type AlignmentFilesFrameEnum = typeof AlignmentFilesFrameEnum[keyof typeof AlignmentFilesFrameEnum];
/**
 * @export
 */
export const AlignmentFilesAssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type AlignmentFilesAssemblyEnum = typeof AlignmentFilesAssemblyEnum[keyof typeof AlignmentFilesAssemblyEnum];
/**
 * @export
 */
export const AlignmentFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AlignmentFilesAwardComponentEnum = typeof AlignmentFilesAwardComponentEnum[keyof typeof AlignmentFilesAwardComponentEnum];
/**
 * @export
 */
export const AlignmentFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type AlignmentFilesCollectionsEnum = typeof AlignmentFilesCollectionsEnum[keyof typeof AlignmentFilesCollectionsEnum];
/**
 * @export
 */
export const AlignmentFilesFileFormatEnum = {
    Bam: 'bam'
} as const;
export type AlignmentFilesFileFormatEnum = typeof AlignmentFilesFileFormatEnum[keyof typeof AlignmentFilesFileFormatEnum];
/**
 * @export
 */
export const AlignmentFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AlignmentFilesStatusEnum = typeof AlignmentFilesStatusEnum[keyof typeof AlignmentFilesStatusEnum];
/**
 * @export
 */
export const AlignmentFilesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type AlignmentFilesTranscriptomeAnnotationEnum = typeof AlignmentFilesTranscriptomeAnnotationEnum[keyof typeof AlignmentFilesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const AlignmentFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type AlignmentFilesUploadStatusEnum = typeof AlignmentFilesUploadStatusEnum[keyof typeof AlignmentFilesUploadStatusEnum];
/**
 * @export
 */
export const AnalysisSetsFrameEnum = {
    Object: 'object'
} as const;
export type AnalysisSetsFrameEnum = typeof AnalysisSetsFrameEnum[keyof typeof AnalysisSetsFrameEnum];
/**
 * @export
 */
export const AnalysisSetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AnalysisSetsAwardComponentEnum = typeof AnalysisSetsAwardComponentEnum[keyof typeof AnalysisSetsAwardComponentEnum];
/**
 * @export
 */
export const AnalysisSetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type AnalysisSetsCollectionsEnum = typeof AnalysisSetsCollectionsEnum[keyof typeof AnalysisSetsCollectionsEnum];
/**
 * @export
 */
export const AnalysisSetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type AnalysisSetsDonorsSexEnum = typeof AnalysisSetsDonorsSexEnum[keyof typeof AnalysisSetsDonorsSexEnum];
/**
 * @export
 */
export const AnalysisSetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AnalysisSetsDonorsStatusEnum = typeof AnalysisSetsDonorsStatusEnum[keyof typeof AnalysisSetsDonorsStatusEnum];
/**
 * @export
 */
export const AnalysisSetsFileSetTypeEnum = {
    IntermediateAnalysis: 'intermediate analysis',
    PrincipalAnalysis: 'principal analysis'
} as const;
export type AnalysisSetsFileSetTypeEnum = typeof AnalysisSetsFileSetTypeEnum[keyof typeof AnalysisSetsFileSetTypeEnum];
/**
 * @export
 */
export const AnalysisSetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type AnalysisSetsFilesUploadStatusEnum = typeof AnalysisSetsFilesUploadStatusEnum[keyof typeof AnalysisSetsFilesUploadStatusEnum];
/**
 * @export
 */
export const AnalysisSetsInputFileSetsFileSetTypeEnum = {
    Pathogenicity: 'pathogenicity',
    FunctionalEffect: 'functional effect',
    ProteinStability: 'protein stability',
    ActivityLevel: 'activity level',
    BindingEffect: 'binding effect'
} as const;
export type AnalysisSetsInputFileSetsFileSetTypeEnum = typeof AnalysisSetsInputFileSetsFileSetTypeEnum[keyof typeof AnalysisSetsInputFileSetsFileSetTypeEnum];
/**
 * @export
 */
export const AnalysisSetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type AnalysisSetsSamplesClassificationsEnum = typeof AnalysisSetsSamplesClassificationsEnum[keyof typeof AnalysisSetsSamplesClassificationsEnum];
/**
 * @export
 */
export const AnalysisSetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AnalysisSetsSamplesSampleTermsStatusEnum = typeof AnalysisSetsSamplesSampleTermsStatusEnum[keyof typeof AnalysisSetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const AnalysisSetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AnalysisSetsSamplesStatusEnum = typeof AnalysisSetsSamplesStatusEnum[keyof typeof AnalysisSetsSamplesStatusEnum];
/**
 * @export
 */
export const AnalysisSetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type AnalysisSetsSamplesTaxaEnum = typeof AnalysisSetsSamplesTaxaEnum[keyof typeof AnalysisSetsSamplesTaxaEnum];
/**
 * @export
 */
export const AnalysisSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AnalysisSetsStatusEnum = typeof AnalysisSetsStatusEnum[keyof typeof AnalysisSetsStatusEnum];
/**
 * @export
 */
export const AnalysisStepVersionsFrameEnum = {
    Object: 'object'
} as const;
export type AnalysisStepVersionsFrameEnum = typeof AnalysisStepVersionsFrameEnum[keyof typeof AnalysisStepVersionsFrameEnum];
/**
 * @export
 */
export const AnalysisStepVersionsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AnalysisStepVersionsAwardComponentEnum = typeof AnalysisStepVersionsAwardComponentEnum[keyof typeof AnalysisStepVersionsAwardComponentEnum];
/**
 * @export
 */
export const AnalysisStepVersionsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AnalysisStepVersionsStatusEnum = typeof AnalysisStepVersionsStatusEnum[keyof typeof AnalysisStepVersionsStatusEnum];
/**
 * @export
 */
export const AnalysisStepsFrameEnum = {
    Object: 'object'
} as const;
export type AnalysisStepsFrameEnum = typeof AnalysisStepsFrameEnum[keyof typeof AnalysisStepsFrameEnum];
/**
 * @export
 */
export const AnalysisStepsAnalysisStepTypesEnum = {
    Alignment: 'alignment',
    FileFormatConversion: 'file format conversion',
    SignalGeneration: 'signal generation'
} as const;
export type AnalysisStepsAnalysisStepTypesEnum = typeof AnalysisStepsAnalysisStepTypesEnum[keyof typeof AnalysisStepsAnalysisStepTypesEnum];
/**
 * @export
 */
export const AnalysisStepsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AnalysisStepsAwardComponentEnum = typeof AnalysisStepsAwardComponentEnum[keyof typeof AnalysisStepsAwardComponentEnum];
/**
 * @export
 */
export const AnalysisStepsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AnalysisStepsStatusEnum = typeof AnalysisStepsStatusEnum[keyof typeof AnalysisStepsStatusEnum];
/**
 * @export
 */
export const AssayTermsFrameEnum = {
    Object: 'object'
} as const;
export type AssayTermsFrameEnum = typeof AssayTermsFrameEnum[keyof typeof AssayTermsFrameEnum];
/**
 * @export
 */
export const AssayTermsPreferredAssayTitlesEnum = {
    _10xMultiome: '10x multiome',
    _10xMultiomeWithMultiSeq: '10x multiome with MULTI-seq',
    AavMpra: 'AAV-MPRA',
    AtacSeq: 'ATAC-seq',
    CeresSeq: 'CERES-seq',
    CellPainting: 'Cell painting',
    CrisprFlowFish: 'CRISPR FlowFISH',
    DogmaSeq: 'DOGMA-seq',
    HistoneChIpSeq: 'Histone ChIP-seq',
    HiC: 'Hi-C',
    LentiMpra: 'lentiMPRA',
    Merfish: 'MERFISH',
    Miaa: 'MIAA',
    MN2H: 'mN2H',
    Mpra: 'MPRA',
    MpraScQer: 'MPRA (scQer)',
    MultiSeq: 'MULTI-seq',
    ParseSpliTSeq: 'Parse SPLiT-seq',
    PerturbSeq: 'Perturb-seq',
    RnaSeq: 'RNA-seq',
    Sge: 'SGE',
    ScAtacSeq: 'scATAC-seq',
    ScNtSeq: 'scNT-seq',
    ScNtSeq2: 'scNT-seq2',
    ScRnaSeq: 'scRNA-seq',
    SemiQY2H: 'semi-qY2H',
    ShareSeq: 'SHARE-seq',
    SmFish: 'smFISH',
    SnAtacSeq: 'snATAC-seq',
    SnmCSeq2: 'snmC-Seq2',
    SnMctSeq: 'snMCT-seq',
    SnM3CSeq: 'snM3C-seq',
    SnRnaSeq: 'snRNA-seq',
    Superstarr: 'SUPERSTARR',
    TapSeq: 'TAP-seq',
    TfChIpSeq: 'TF ChIP-seq',
    VampSeq: 'VAMP-seq',
    VariantFlowFish: 'Variant FlowFISH',
    VariantPainting: 'Variant painting',
    Y2H: 'Y2H',
    YN2H: 'yN2H'
} as const;
export type AssayTermsPreferredAssayTitlesEnum = typeof AssayTermsPreferredAssayTitlesEnum[keyof typeof AssayTermsPreferredAssayTitlesEnum];
/**
 * @export
 */
export const AssayTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AssayTermsStatusEnum = typeof AssayTermsStatusEnum[keyof typeof AssayTermsStatusEnum];
/**
 * @export
 */
export const AuxiliarySetsFrameEnum = {
    Object: 'object'
} as const;
export type AuxiliarySetsFrameEnum = typeof AuxiliarySetsFrameEnum[keyof typeof AuxiliarySetsFrameEnum];
/**
 * @export
 */
export const AuxiliarySetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AuxiliarySetsAwardComponentEnum = typeof AuxiliarySetsAwardComponentEnum[keyof typeof AuxiliarySetsAwardComponentEnum];
/**
 * @export
 */
export const AuxiliarySetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type AuxiliarySetsCollectionsEnum = typeof AuxiliarySetsCollectionsEnum[keyof typeof AuxiliarySetsCollectionsEnum];
/**
 * @export
 */
export const AuxiliarySetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type AuxiliarySetsDonorsSexEnum = typeof AuxiliarySetsDonorsSexEnum[keyof typeof AuxiliarySetsDonorsSexEnum];
/**
 * @export
 */
export const AuxiliarySetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AuxiliarySetsDonorsStatusEnum = typeof AuxiliarySetsDonorsStatusEnum[keyof typeof AuxiliarySetsDonorsStatusEnum];
/**
 * @export
 */
export const AuxiliarySetsFileSetTypeEnum = {
    CellHashing: 'cell hashing',
    CellSorting: 'cell sorting',
    CircularizedRnaBarcodeDetection: 'circularized RNA barcode detection',
    GRnaSequencing: 'gRNA sequencing',
    OligoConjugatedLipids: 'oligo-conjugated lipids',
    QuantificationDnaBarcodeSequencing: 'quantification DNA barcode sequencing',
    VariantSequencing: 'variant sequencing'
} as const;
export type AuxiliarySetsFileSetTypeEnum = typeof AuxiliarySetsFileSetTypeEnum[keyof typeof AuxiliarySetsFileSetTypeEnum];
/**
 * @export
 */
export const AuxiliarySetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type AuxiliarySetsFilesUploadStatusEnum = typeof AuxiliarySetsFilesUploadStatusEnum[keyof typeof AuxiliarySetsFilesUploadStatusEnum];
/**
 * @export
 */
export const AuxiliarySetsMeasurementSetsPreferredAssayTitleEnum = {
    _10xMultiome: '10x multiome',
    _10xMultiomeWithMultiSeq: '10x multiome with MULTI-seq',
    AavMpra: 'AAV-MPRA',
    AtacSeq: 'ATAC-seq',
    CeresSeq: 'CERES-seq',
    CellPainting: 'Cell painting',
    CrisprFlowFish: 'CRISPR FlowFISH',
    DogmaSeq: 'DOGMA-seq',
    HistoneChIpSeq: 'Histone ChIP-seq',
    HiC: 'Hi-C',
    LentiMpra: 'lentiMPRA',
    Merfish: 'MERFISH',
    Miaa: 'MIAA',
    MN2H: 'mN2H',
    Mpra: 'MPRA',
    MpraScQer: 'MPRA (scQer)',
    MultiSeq: 'MULTI-seq',
    ParseSpliTSeq: 'Parse SPLiT-seq',
    PerturbSeq: 'Perturb-seq',
    RnaSeq: 'RNA-seq',
    Sge: 'SGE',
    ScAtacSeq: 'scATAC-seq',
    ScNtSeq: 'scNT-seq',
    ScNtSeq2: 'scNT-seq2',
    ScRnaSeq: 'scRNA-seq',
    SemiQY2H: 'semi-qY2H',
    ShareSeq: 'SHARE-seq',
    SmFish: 'smFISH',
    SnAtacSeq: 'snATAC-seq',
    SnmCSeq2: 'snmC-Seq2',
    SnMctSeq: 'snMCT-seq',
    SnM3CSeq: 'snM3C-seq',
    SnRnaSeq: 'snRNA-seq',
    Superstarr: 'SUPERSTARR',
    TapSeq: 'TAP-seq',
    TfChIpSeq: 'TF ChIP-seq',
    VampSeq: 'VAMP-seq',
    VariantFlowFish: 'Variant FlowFISH',
    VariantPainting: 'Variant painting',
    Y2H: 'Y2H',
    YN2H: 'yN2H'
} as const;
export type AuxiliarySetsMeasurementSetsPreferredAssayTitleEnum = typeof AuxiliarySetsMeasurementSetsPreferredAssayTitleEnum[keyof typeof AuxiliarySetsMeasurementSetsPreferredAssayTitleEnum];
/**
 * @export
 */
export const AuxiliarySetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type AuxiliarySetsSamplesClassificationsEnum = typeof AuxiliarySetsSamplesClassificationsEnum[keyof typeof AuxiliarySetsSamplesClassificationsEnum];
/**
 * @export
 */
export const AuxiliarySetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type AuxiliarySetsSamplesSampleTermsStatusEnum = typeof AuxiliarySetsSamplesSampleTermsStatusEnum[keyof typeof AuxiliarySetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const AuxiliarySetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AuxiliarySetsSamplesStatusEnum = typeof AuxiliarySetsSamplesStatusEnum[keyof typeof AuxiliarySetsSamplesStatusEnum];
/**
 * @export
 */
export const AuxiliarySetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type AuxiliarySetsSamplesTaxaEnum = typeof AuxiliarySetsSamplesTaxaEnum[keyof typeof AuxiliarySetsSamplesTaxaEnum];
/**
 * @export
 */
export const AuxiliarySetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type AuxiliarySetsStatusEnum = typeof AuxiliarySetsStatusEnum[keyof typeof AuxiliarySetsStatusEnum];
/**
 * @export
 */
export const AwardsFrameEnum = {
    Object: 'object'
} as const;
export type AwardsFrameEnum = typeof AwardsFrameEnum[keyof typeof AwardsFrameEnum];
/**
 * @export
 */
export const AwardsComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type AwardsComponentEnum = typeof AwardsComponentEnum[keyof typeof AwardsComponentEnum];
/**
 * @export
 */
export const AwardsProjectEnum = {
    Community: 'community',
    Encode: 'ENCODE',
    Igvf: 'IGVF'
} as const;
export type AwardsProjectEnum = typeof AwardsProjectEnum[keyof typeof AwardsProjectEnum];
/**
 * @export
 */
export const AwardsStatusEnum = {
    Current: 'current',
    Deleted: 'deleted',
    Disabled: 'disabled'
} as const;
export type AwardsStatusEnum = typeof AwardsStatusEnum[keyof typeof AwardsStatusEnum];
/**
 * @export
 */
export const AwardsViewingGroupEnum = {
    Community: 'community',
    Igvf: 'IGVF'
} as const;
export type AwardsViewingGroupEnum = typeof AwardsViewingGroupEnum[keyof typeof AwardsViewingGroupEnum];
/**
 * @export
 */
export const BiomarkersFrameEnum = {
    Object: 'object'
} as const;
export type BiomarkersFrameEnum = typeof BiomarkersFrameEnum[keyof typeof BiomarkersFrameEnum];
/**
 * @export
 */
export const BiomarkersAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type BiomarkersAwardComponentEnum = typeof BiomarkersAwardComponentEnum[keyof typeof BiomarkersAwardComponentEnum];
/**
 * @export
 */
export const BiomarkersClassificationEnum = {
    CellSurfaceProtein: 'cell surface protein',
    MarkerGene: 'marker gene'
} as const;
export type BiomarkersClassificationEnum = typeof BiomarkersClassificationEnum[keyof typeof BiomarkersClassificationEnum];
/**
 * @export
 */
export const BiomarkersQuantificationEnum = {
    Negative: 'negative',
    Positive: 'positive',
    Low: 'low',
    Intermediate: 'intermediate',
    High: 'high'
} as const;
export type BiomarkersQuantificationEnum = typeof BiomarkersQuantificationEnum[keyof typeof BiomarkersQuantificationEnum];
/**
 * @export
 */
export const BiomarkersStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type BiomarkersStatusEnum = typeof BiomarkersStatusEnum[keyof typeof BiomarkersStatusEnum];
/**
 * @export
 */
export const ConfigurationFilesFrameEnum = {
    Object: 'object'
} as const;
export type ConfigurationFilesFrameEnum = typeof ConfigurationFilesFrameEnum[keyof typeof ConfigurationFilesFrameEnum];
/**
 * @export
 */
export const ConfigurationFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ConfigurationFilesAwardComponentEnum = typeof ConfigurationFilesAwardComponentEnum[keyof typeof ConfigurationFilesAwardComponentEnum];
/**
 * @export
 */
export const ConfigurationFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ConfigurationFilesCollectionsEnum = typeof ConfigurationFilesCollectionsEnum[keyof typeof ConfigurationFilesCollectionsEnum];
/**
 * @export
 */
export const ConfigurationFilesFileFormatEnum = {
    Yaml: 'yaml'
} as const;
export type ConfigurationFilesFileFormatEnum = typeof ConfigurationFilesFileFormatEnum[keyof typeof ConfigurationFilesFileFormatEnum];
/**
 * @export
 */
export const ConfigurationFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ConfigurationFilesStatusEnum = typeof ConfigurationFilesStatusEnum[keyof typeof ConfigurationFilesStatusEnum];
/**
 * @export
 */
export const ConfigurationFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ConfigurationFilesUploadStatusEnum = typeof ConfigurationFilesUploadStatusEnum[keyof typeof ConfigurationFilesUploadStatusEnum];
/**
 * @export
 */
export const ConstructLibrarySetsFrameEnum = {
    Object: 'object'
} as const;
export type ConstructLibrarySetsFrameEnum = typeof ConstructLibrarySetsFrameEnum[keyof typeof ConstructLibrarySetsFrameEnum];
/**
 * @export
 */
export const ConstructLibrarySetsAppliedToSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ConstructLibrarySetsAppliedToSamplesStatusEnum = typeof ConstructLibrarySetsAppliedToSamplesStatusEnum[keyof typeof ConstructLibrarySetsAppliedToSamplesStatusEnum];
/**
 * @export
 */
export const ConstructLibrarySetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ConstructLibrarySetsAwardComponentEnum = typeof ConstructLibrarySetsAwardComponentEnum[keyof typeof ConstructLibrarySetsAwardComponentEnum];
/**
 * @export
 */
export const ConstructLibrarySetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ConstructLibrarySetsCollectionsEnum = typeof ConstructLibrarySetsCollectionsEnum[keyof typeof ConstructLibrarySetsCollectionsEnum];
/**
 * @export
 */
export const ConstructLibrarySetsFileSetTypeEnum = {
    GuideLibrary: 'guide library',
    ReporterLibrary: 'reporter library',
    ExpressionVectorLibrary: 'expression vector library',
    EditingTemplateLibrary: 'editing template library'
} as const;
export type ConstructLibrarySetsFileSetTypeEnum = typeof ConstructLibrarySetsFileSetTypeEnum[keyof typeof ConstructLibrarySetsFileSetTypeEnum];
/**
 * @export
 */
export const ConstructLibrarySetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ConstructLibrarySetsFilesUploadStatusEnum = typeof ConstructLibrarySetsFilesUploadStatusEnum[keyof typeof ConstructLibrarySetsFilesUploadStatusEnum];
/**
 * @export
 */
export const ConstructLibrarySetsGuideTypeEnum = {
    SgRna: 'sgRNA',
    PgRna: 'pgRNA'
} as const;
export type ConstructLibrarySetsGuideTypeEnum = typeof ConstructLibrarySetsGuideTypeEnum[keyof typeof ConstructLibrarySetsGuideTypeEnum];
/**
 * @export
 */
export const ConstructLibrarySetsScopeEnum = {
    Tile: 'tile',
    Exon: 'exon',
    Genes: 'genes',
    Loci: 'loci',
    GenomeWide: 'genome-wide',
    Interactors: 'interactors',
    Alleles: 'alleles',
    Targeton: 'targeton'
} as const;
export type ConstructLibrarySetsScopeEnum = typeof ConstructLibrarySetsScopeEnum[keyof typeof ConstructLibrarySetsScopeEnum];
/**
 * @export
 */
export const ConstructLibrarySetsSelectionCriteriaEnum = {
    AccessibleGenomeRegions: 'accessible genome regions',
    CandidateCisRegulatoryElements: 'candidate cis-regulatory elements',
    ChromatinStates: 'chromatin states',
    PhenotypeAssociatedVariants: 'phenotype-associated variants',
    DNaseHypersensitiveSites: 'DNase hypersensitive sites',
    Genes: 'genes',
    HistoneModifications: 'histone modifications',
    ProteinInteractors: 'protein interactors',
    SequenceVariants: 'sequence variants',
    SyntheticElements: 'synthetic elements',
    TranscriptionStartSites: 'transcription start sites',
    TfBindingSites: 'TF binding sites'
} as const;
export type ConstructLibrarySetsSelectionCriteriaEnum = typeof ConstructLibrarySetsSelectionCriteriaEnum[keyof typeof ConstructLibrarySetsSelectionCriteriaEnum];
/**
 * @export
 */
export const ConstructLibrarySetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ConstructLibrarySetsStatusEnum = typeof ConstructLibrarySetsStatusEnum[keyof typeof ConstructLibrarySetsStatusEnum];
/**
 * @export
 */
export const ConstructLibrarySetsTilingModalityEnum = {
    PeakTiling: 'peak tiling',
    FullTiling: 'full tiling',
    SparsePeaks: 'sparse peaks'
} as const;
export type ConstructLibrarySetsTilingModalityEnum = typeof ConstructLibrarySetsTilingModalityEnum[keyof typeof ConstructLibrarySetsTilingModalityEnum];
/**
 * @export
 */
export const CrisprModificationsFrameEnum = {
    Object: 'object'
} as const;
export type CrisprModificationsFrameEnum = typeof CrisprModificationsFrameEnum[keyof typeof CrisprModificationsFrameEnum];
/**
 * @export
 */
export const CrisprModificationsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type CrisprModificationsAwardComponentEnum = typeof CrisprModificationsAwardComponentEnum[keyof typeof CrisprModificationsAwardComponentEnum];
/**
 * @export
 */
export const CrisprModificationsCasEnum = {
    Cas9: 'Cas9',
    Cas12a: 'Cas12a',
    Cas13: 'Cas13',
    DCas9: 'dCas9',
    NCas9: 'nCas9',
    SpG: 'SpG',
    SpRy: 'SpRY'
} as const;
export type CrisprModificationsCasEnum = typeof CrisprModificationsCasEnum[keyof typeof CrisprModificationsCasEnum];
/**
 * @export
 */
export const CrisprModificationsCasSpeciesEnum = {
    StreptococcusPyogenesSp: 'Streptococcus pyogenes (Sp)',
    StaphylococcusAureusSa: 'Staphylococcus aureus (Sa)',
    CampylobacterJejuniCj: 'Campylobacter jejuni (Cj)',
    NeisseriaMeningitidisNm: 'Neisseria meningitidis (Nm)'
} as const;
export type CrisprModificationsCasSpeciesEnum = typeof CrisprModificationsCasSpeciesEnum[keyof typeof CrisprModificationsCasSpeciesEnum];
/**
 * @export
 */
export const CrisprModificationsFusedDomainEnum = {
    _2xVp64: '2xVP64',
    _3xVp64: '3xVP64',
    Abe8e: 'ABE8e',
    Abe820: 'ABE8.20',
    AntiFlag: 'ANTI-FLAG',
    Be4: 'BE4',
    Be4max: 'BE4max',
    EA3A: 'eA3A',
    EA3AT31A: 'eA3A-T31A',
    EA3AT44DS45A: 'eA3A-T44D-S45A',
    Kox1Krab: 'KOX1-KRAB',
    MMlvRtPe2: 'M-MLV RT (PE2)',
    P300: 'p300',
    TdCbe: 'TdCBE',
    TdCgbe: 'TdCGBE',
    TdDe: 'TdDE',
    Vph: 'VPH',
    Vp64: 'VP64',
    Vp64P65RtaVpr: 'VP64-p65-Rta (VPR)',
    Zim3Krab: 'ZIM3-KRAB'
} as const;
export type CrisprModificationsFusedDomainEnum = typeof CrisprModificationsFusedDomainEnum[keyof typeof CrisprModificationsFusedDomainEnum];
/**
 * @export
 */
export const CrisprModificationsModalityEnum = {
    Activation: 'activation',
    BaseEditing: 'base editing',
    Cutting: 'cutting',
    Interference: 'interference',
    Knockout: 'knockout',
    Localizing: 'localizing',
    PrimeEditing: 'prime editing'
} as const;
export type CrisprModificationsModalityEnum = typeof CrisprModificationsModalityEnum[keyof typeof CrisprModificationsModalityEnum];
/**
 * @export
 */
export const CrisprModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type CrisprModificationsStatusEnum = typeof CrisprModificationsStatusEnum[keyof typeof CrisprModificationsStatusEnum];
/**
 * @export
 */
export const CuratedSetsFrameEnum = {
    Object: 'object'
} as const;
export type CuratedSetsFrameEnum = typeof CuratedSetsFrameEnum[keyof typeof CuratedSetsFrameEnum];
/**
 * @export
 */
export const CuratedSetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type CuratedSetsAwardComponentEnum = typeof CuratedSetsAwardComponentEnum[keyof typeof CuratedSetsAwardComponentEnum];
/**
 * @export
 */
export const CuratedSetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type CuratedSetsCollectionsEnum = typeof CuratedSetsCollectionsEnum[keyof typeof CuratedSetsCollectionsEnum];
/**
 * @export
 */
export const CuratedSetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type CuratedSetsDonorsSexEnum = typeof CuratedSetsDonorsSexEnum[keyof typeof CuratedSetsDonorsSexEnum];
/**
 * @export
 */
export const CuratedSetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type CuratedSetsDonorsStatusEnum = typeof CuratedSetsDonorsStatusEnum[keyof typeof CuratedSetsDonorsStatusEnum];
/**
 * @export
 */
export const CuratedSetsFileSetTypeEnum = {
    Barcodes: 'barcodes',
    EditingTemplates: 'editing templates',
    Elements: 'elements',
    ExternalDataForCatalog: 'external data for catalog',
    Genome: 'genome',
    Genes: 'genes',
    GuideRnas: 'guide RNAs',
    Transcriptome: 'transcriptome',
    Variants: 'variants'
} as const;
export type CuratedSetsFileSetTypeEnum = typeof CuratedSetsFileSetTypeEnum[keyof typeof CuratedSetsFileSetTypeEnum];
/**
 * @export
 */
export const CuratedSetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type CuratedSetsFilesUploadStatusEnum = typeof CuratedSetsFilesUploadStatusEnum[keyof typeof CuratedSetsFilesUploadStatusEnum];
/**
 * @export
 */
export const CuratedSetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type CuratedSetsSamplesClassificationsEnum = typeof CuratedSetsSamplesClassificationsEnum[keyof typeof CuratedSetsSamplesClassificationsEnum];
/**
 * @export
 */
export const CuratedSetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type CuratedSetsSamplesSampleTermsStatusEnum = typeof CuratedSetsSamplesSampleTermsStatusEnum[keyof typeof CuratedSetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const CuratedSetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type CuratedSetsSamplesStatusEnum = typeof CuratedSetsSamplesStatusEnum[keyof typeof CuratedSetsSamplesStatusEnum];
/**
 * @export
 */
export const CuratedSetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type CuratedSetsSamplesTaxaEnum = typeof CuratedSetsSamplesTaxaEnum[keyof typeof CuratedSetsSamplesTaxaEnum];
/**
 * @export
 */
export const CuratedSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type CuratedSetsStatusEnum = typeof CuratedSetsStatusEnum[keyof typeof CuratedSetsStatusEnum];
/**
 * @export
 */
export const CuratedSetsTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type CuratedSetsTaxaEnum = typeof CuratedSetsTaxaEnum[keyof typeof CuratedSetsTaxaEnum];
/**
 * @export
 */
export const DegronModificationsFrameEnum = {
    Object: 'object'
} as const;
export type DegronModificationsFrameEnum = typeof DegronModificationsFrameEnum[keyof typeof DegronModificationsFrameEnum];
/**
 * @export
 */
export const DegronModificationsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type DegronModificationsAwardComponentEnum = typeof DegronModificationsAwardComponentEnum[keyof typeof DegronModificationsAwardComponentEnum];
/**
 * @export
 */
export const DegronModificationsDegronSystemEnum = {
    Aid: 'AID',
    AlissAid: 'AlissAid',
    SsAid: 'ssAID'
} as const;
export type DegronModificationsDegronSystemEnum = typeof DegronModificationsDegronSystemEnum[keyof typeof DegronModificationsDegronSystemEnum];
/**
 * @export
 */
export const DegronModificationsModalityEnum = {
    Degradation: 'degradation'
} as const;
export type DegronModificationsModalityEnum = typeof DegronModificationsModalityEnum[keyof typeof DegronModificationsModalityEnum];
/**
 * @export
 */
export const DegronModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type DegronModificationsStatusEnum = typeof DegronModificationsStatusEnum[keyof typeof DegronModificationsStatusEnum];
/**
 * @export
 */
export const DocumentsFrameEnum = {
    Object: 'object'
} as const;
export type DocumentsFrameEnum = typeof DocumentsFrameEnum[keyof typeof DocumentsFrameEnum];
/**
 * @export
 */
export const DocumentsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type DocumentsAwardComponentEnum = typeof DocumentsAwardComponentEnum[keyof typeof DocumentsAwardComponentEnum];
/**
 * @export
 */
export const DocumentsCharacterizationMethodEnum = {
    Facs: 'FACS',
    Immunoblot: 'immunoblot',
    Immunofluorescence: 'immunofluorescence',
    Immunoprecipitation: 'immunoprecipitation',
    MassSpectrometry: 'mass spectrometry',
    Pcr: 'PCR',
    RestrictionDigest: 'restriction digest',
    RtQPcr: 'RT-qPCR',
    Sequencing: 'sequencing'
} as const;
export type DocumentsCharacterizationMethodEnum = typeof DocumentsCharacterizationMethodEnum[keyof typeof DocumentsCharacterizationMethodEnum];
/**
 * @export
 */
export const DocumentsDocumentTypeEnum = {
    CellFateChangeProtocol: 'cell fate change protocol',
    Characterization: 'characterization',
    ComputationalProtocol: 'computational protocol',
    ExperimentalProtocol: 'experimental protocol',
    FileFormatSpecification: 'file format specification',
    Image: 'image',
    ModelSourceData: 'model source data',
    PlateMap: 'plate map',
    PlasmidMap: 'plasmid map',
    PlasmidSequence: 'plasmid sequence',
    Standards: 'standards'
} as const;
export type DocumentsDocumentTypeEnum = typeof DocumentsDocumentTypeEnum[keyof typeof DocumentsDocumentTypeEnum];
/**
 * @export
 */
export const DocumentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type DocumentsStatusEnum = typeof DocumentsStatusEnum[keyof typeof DocumentsStatusEnum];
/**
 * @export
 */
export const GenesFrameEnum = {
    Object: 'object'
} as const;
export type GenesFrameEnum = typeof GenesFrameEnum[keyof typeof GenesFrameEnum];
/**
 * @export
 */
export const GenesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type GenesStatusEnum = typeof GenesStatusEnum[keyof typeof GenesStatusEnum];
/**
 * @export
 */
export const GenesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type GenesTaxaEnum = typeof GenesTaxaEnum[keyof typeof GenesTaxaEnum];
/**
 * @export
 */
export const GenesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type GenesTranscriptomeAnnotationEnum = typeof GenesTranscriptomeAnnotationEnum[keyof typeof GenesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesFrameEnum = {
    Object: 'object'
} as const;
export type GenomeBrowserAnnotationFilesFrameEnum = typeof GenomeBrowserAnnotationFilesFrameEnum[keyof typeof GenomeBrowserAnnotationFilesFrameEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesAssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type GenomeBrowserAnnotationFilesAssemblyEnum = typeof GenomeBrowserAnnotationFilesAssemblyEnum[keyof typeof GenomeBrowserAnnotationFilesAssemblyEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type GenomeBrowserAnnotationFilesAwardComponentEnum = typeof GenomeBrowserAnnotationFilesAwardComponentEnum[keyof typeof GenomeBrowserAnnotationFilesAwardComponentEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type GenomeBrowserAnnotationFilesCollectionsEnum = typeof GenomeBrowserAnnotationFilesCollectionsEnum[keyof typeof GenomeBrowserAnnotationFilesCollectionsEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesFileFormatEnum = {
    BigBed: 'bigBed',
    Tabix: 'tabix'
} as const;
export type GenomeBrowserAnnotationFilesFileFormatEnum = typeof GenomeBrowserAnnotationFilesFileFormatEnum[keyof typeof GenomeBrowserAnnotationFilesFileFormatEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesFileFormatTypeEnum = {
    Bed12: 'bed12',
    Bed3: 'bed3',
    Bed32: 'bed3+',
    Bed5: 'bed5',
    Bed6: 'bed6',
    Bed62: 'bed6+',
    Bed9: 'bed9',
    Bed92: 'bed9+',
    MpraStarr: 'mpra_starr'
} as const;
export type GenomeBrowserAnnotationFilesFileFormatTypeEnum = typeof GenomeBrowserAnnotationFilesFileFormatTypeEnum[keyof typeof GenomeBrowserAnnotationFilesFileFormatTypeEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type GenomeBrowserAnnotationFilesStatusEnum = typeof GenomeBrowserAnnotationFilesStatusEnum[keyof typeof GenomeBrowserAnnotationFilesStatusEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type GenomeBrowserAnnotationFilesTranscriptomeAnnotationEnum = typeof GenomeBrowserAnnotationFilesTranscriptomeAnnotationEnum[keyof typeof GenomeBrowserAnnotationFilesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const GenomeBrowserAnnotationFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type GenomeBrowserAnnotationFilesUploadStatusEnum = typeof GenomeBrowserAnnotationFilesUploadStatusEnum[keyof typeof GenomeBrowserAnnotationFilesUploadStatusEnum];
/**
 * @export
 */
export const GetByIdFrameEnum = {
    Object: 'object'
} as const;
export type GetByIdFrameEnum = typeof GetByIdFrameEnum[keyof typeof GetByIdFrameEnum];
/**
 * @export
 */
export const HumanDonorsFrameEnum = {
    Object: 'object'
} as const;
export type HumanDonorsFrameEnum = typeof HumanDonorsFrameEnum[keyof typeof HumanDonorsFrameEnum];
/**
 * @export
 */
export const HumanDonorsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type HumanDonorsAwardComponentEnum = typeof HumanDonorsAwardComponentEnum[keyof typeof HumanDonorsAwardComponentEnum];
/**
 * @export
 */
export const HumanDonorsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type HumanDonorsCollectionsEnum = typeof HumanDonorsCollectionsEnum[keyof typeof HumanDonorsCollectionsEnum];
/**
 * @export
 */
export const HumanDonorsEthnicitiesEnum = {
    AfricanAmerican: 'African American',
    AfricanCaribbean: 'African Caribbean',
    Arab: 'Arab',
    Asian: 'Asian',
    Black: 'Black',
    BlackAfrican: 'Black African',
    Chinese: 'Chinese',
    Colombian: 'Colombian',
    DaiChinese: 'Dai Chinese',
    Esan: 'Esan',
    Eskimo: 'Eskimo',
    European: 'European',
    Gambian: 'Gambian',
    HanChinese: 'Han Chinese',
    Hispanic: 'Hispanic',
    Indian: 'Indian',
    Japanese: 'Japanese',
    KinhVietnamese: 'Kinh Vietnamese',
    Luhya: 'Luhya',
    Maasai: 'Maasai',
    Mende: 'Mende',
    NativeHawaiian: 'Native Hawaiian',
    PacificIslander: 'Pacific Islander',
    PuertoRican: 'Puerto Rican',
    Yoruba: 'Yoruba'
} as const;
export type HumanDonorsEthnicitiesEnum = typeof HumanDonorsEthnicitiesEnum[keyof typeof HumanDonorsEthnicitiesEnum];
/**
 * @export
 */
export const HumanDonorsPhenotypicFeaturesQuantityUnitsEnum = {
    Meter: 'meter',
    Micromole: 'micromole',
    Nanogram: 'nanogram',
    Microgram: 'microgram',
    Milligram: 'milligram',
    Gram: 'gram',
    Kilogram: 'kilogram',
    MilliInternationalUnitPerMilliliter: 'milli-International Unit per milliliter',
    PicogramPerMilliliter: 'picogram per milliliter',
    NanogramPerMilliliter: 'nanogram per milliliter',
    MilligramPerDeciliter: 'milligram per deciliter'
} as const;
export type HumanDonorsPhenotypicFeaturesQuantityUnitsEnum = typeof HumanDonorsPhenotypicFeaturesQuantityUnitsEnum[keyof typeof HumanDonorsPhenotypicFeaturesQuantityUnitsEnum];
/**
 * @export
 */
export const HumanDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type HumanDonorsSexEnum = typeof HumanDonorsSexEnum[keyof typeof HumanDonorsSexEnum];
/**
 * @export
 */
export const HumanDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type HumanDonorsStatusEnum = typeof HumanDonorsStatusEnum[keyof typeof HumanDonorsStatusEnum];
/**
 * @export
 */
export const HumanDonorsTaxaEnum = {
    HomoSapiens: 'Homo sapiens'
} as const;
export type HumanDonorsTaxaEnum = typeof HumanDonorsTaxaEnum[keyof typeof HumanDonorsTaxaEnum];
/**
 * @export
 */
export const ImageFilesFrameEnum = {
    Object: 'object'
} as const;
export type ImageFilesFrameEnum = typeof ImageFilesFrameEnum[keyof typeof ImageFilesFrameEnum];
/**
 * @export
 */
export const ImageFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ImageFilesAwardComponentEnum = typeof ImageFilesAwardComponentEnum[keyof typeof ImageFilesAwardComponentEnum];
/**
 * @export
 */
export const ImageFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ImageFilesCollectionsEnum = typeof ImageFilesCollectionsEnum[keyof typeof ImageFilesCollectionsEnum];
/**
 * @export
 */
export const ImageFilesFileFormatEnum = {
    Jpg: 'jpg',
    Png: 'png'
} as const;
export type ImageFilesFileFormatEnum = typeof ImageFilesFileFormatEnum[keyof typeof ImageFilesFileFormatEnum];
/**
 * @export
 */
export const ImageFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ImageFilesStatusEnum = typeof ImageFilesStatusEnum[keyof typeof ImageFilesStatusEnum];
/**
 * @export
 */
export const ImageFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ImageFilesUploadStatusEnum = typeof ImageFilesUploadStatusEnum[keyof typeof ImageFilesUploadStatusEnum];
/**
 * @export
 */
export const ImagesFrameEnum = {
    Object: 'object'
} as const;
export type ImagesFrameEnum = typeof ImagesFrameEnum[keyof typeof ImagesFrameEnum];
/**
 * @export
 */
export const ImagesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type ImagesStatusEnum = typeof ImagesStatusEnum[keyof typeof ImagesStatusEnum];
/**
 * @export
 */
export const InVitroSystemsFrameEnum = {
    Object: 'object'
} as const;
export type InVitroSystemsFrameEnum = typeof InVitroSystemsFrameEnum[keyof typeof InVitroSystemsFrameEnum];
/**
 * @export
 */
export const InVitroSystemsAgeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;
export type InVitroSystemsAgeUnitsEnum = typeof InVitroSystemsAgeUnitsEnum[keyof typeof InVitroSystemsAgeUnitsEnum];
/**
 * @export
 */
export const InVitroSystemsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type InVitroSystemsAwardComponentEnum = typeof InVitroSystemsAwardComponentEnum[keyof typeof InVitroSystemsAwardComponentEnum];
/**
 * @export
 */
export const InVitroSystemsCellFateChangeTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type InVitroSystemsCellFateChangeTreatmentsPurposeEnum = typeof InVitroSystemsCellFateChangeTreatmentsPurposeEnum[keyof typeof InVitroSystemsCellFateChangeTreatmentsPurposeEnum];
/**
 * @export
 */
export const InVitroSystemsCellFateChangeTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type InVitroSystemsCellFateChangeTreatmentsStatusEnum = typeof InVitroSystemsCellFateChangeTreatmentsStatusEnum[keyof typeof InVitroSystemsCellFateChangeTreatmentsStatusEnum];
/**
 * @export
 */
export const InVitroSystemsCellFateChangeTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type InVitroSystemsCellFateChangeTreatmentsTreatmentTypeEnum = typeof InVitroSystemsCellFateChangeTreatmentsTreatmentTypeEnum[keyof typeof InVitroSystemsCellFateChangeTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const InVitroSystemsClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type InVitroSystemsClassificationsEnum = typeof InVitroSystemsClassificationsEnum[keyof typeof InVitroSystemsClassificationsEnum];
/**
 * @export
 */
export const InVitroSystemsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type InVitroSystemsCollectionsEnum = typeof InVitroSystemsCollectionsEnum[keyof typeof InVitroSystemsCollectionsEnum];
/**
 * @export
 */
export const InVitroSystemsFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type InVitroSystemsFileSetsStatusEnum = typeof InVitroSystemsFileSetsStatusEnum[keyof typeof InVitroSystemsFileSetsStatusEnum];
/**
 * @export
 */
export const InVitroSystemsGrowthMediumEnum = {
    DmemWithSerum: 'DMEM with serum',
    DmemWithoutSerum: 'DMEM without serum',
    SmbmWithSerum: 'SMBM with serum',
    SmbmWithoutSerum: 'SMBM without serum'
} as const;
export type InVitroSystemsGrowthMediumEnum = typeof InVitroSystemsGrowthMediumEnum[keyof typeof InVitroSystemsGrowthMediumEnum];
/**
 * @export
 */
export const InVitroSystemsModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type InVitroSystemsModificationsStatusEnum = typeof InVitroSystemsModificationsStatusEnum[keyof typeof InVitroSystemsModificationsStatusEnum];
/**
 * @export
 */
export const InVitroSystemsNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type InVitroSystemsNucleicAcidDeliveryEnum = typeof InVitroSystemsNucleicAcidDeliveryEnum[keyof typeof InVitroSystemsNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const InVitroSystemsSexEnum = {
    Female: 'female',
    Male: 'male',
    Mixed: 'mixed',
    Unspecified: 'unspecified'
} as const;
export type InVitroSystemsSexEnum = typeof InVitroSystemsSexEnum[keyof typeof InVitroSystemsSexEnum];
/**
 * @export
 */
export const InVitroSystemsStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type InVitroSystemsStartingAmountUnitsEnum = typeof InVitroSystemsStartingAmountUnitsEnum[keyof typeof InVitroSystemsStartingAmountUnitsEnum];
/**
 * @export
 */
export const InVitroSystemsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type InVitroSystemsStatusEnum = typeof InVitroSystemsStatusEnum[keyof typeof InVitroSystemsStatusEnum];
/**
 * @export
 */
export const InVitroSystemsTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type InVitroSystemsTaxaEnum = typeof InVitroSystemsTaxaEnum[keyof typeof InVitroSystemsTaxaEnum];
/**
 * @export
 */
export const InVitroSystemsTimePostChangeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type InVitroSystemsTimePostChangeUnitsEnum = typeof InVitroSystemsTimePostChangeUnitsEnum[keyof typeof InVitroSystemsTimePostChangeUnitsEnum];
/**
 * @export
 */
export const InVitroSystemsTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type InVitroSystemsTimePostLibraryDeliveryUnitsEnum = typeof InVitroSystemsTimePostLibraryDeliveryUnitsEnum[keyof typeof InVitroSystemsTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const InVitroSystemsTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type InVitroSystemsTreatmentsPurposeEnum = typeof InVitroSystemsTreatmentsPurposeEnum[keyof typeof InVitroSystemsTreatmentsPurposeEnum];
/**
 * @export
 */
export const InVitroSystemsTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type InVitroSystemsTreatmentsStatusEnum = typeof InVitroSystemsTreatmentsStatusEnum[keyof typeof InVitroSystemsTreatmentsStatusEnum];
/**
 * @export
 */
export const InVitroSystemsTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type InVitroSystemsTreatmentsTreatmentTypeEnum = typeof InVitroSystemsTreatmentsTreatmentTypeEnum[keyof typeof InVitroSystemsTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const InstitutionalCertificatesFrameEnum = {
    Object: 'object'
} as const;
export type InstitutionalCertificatesFrameEnum = typeof InstitutionalCertificatesFrameEnum[keyof typeof InstitutionalCertificatesFrameEnum];
/**
 * @export
 */
export const InstitutionalCertificatesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type InstitutionalCertificatesAwardComponentEnum = typeof InstitutionalCertificatesAwardComponentEnum[keyof typeof InstitutionalCertificatesAwardComponentEnum];
/**
 * @export
 */
export const InstitutionalCertificatesDataUseLimitationEnum = {
    Ds: 'DS',
    Gru: 'GRU',
    Hmb: 'HMB',
    Other: 'other'
} as const;
export type InstitutionalCertificatesDataUseLimitationEnum = typeof InstitutionalCertificatesDataUseLimitationEnum[keyof typeof InstitutionalCertificatesDataUseLimitationEnum];
/**
 * @export
 */
export const InstitutionalCertificatesDataUseLimitationModifiersEnum = {
    Col: 'COL',
    Gso: 'GSO',
    Irb: 'IRB',
    Mds: 'MDS',
    Npu: 'NPU',
    Pub: 'PUB'
} as const;
export type InstitutionalCertificatesDataUseLimitationModifiersEnum = typeof InstitutionalCertificatesDataUseLimitationModifiersEnum[keyof typeof InstitutionalCertificatesDataUseLimitationModifiersEnum];
/**
 * @export
 */
export const InstitutionalCertificatesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type InstitutionalCertificatesStatusEnum = typeof InstitutionalCertificatesStatusEnum[keyof typeof InstitutionalCertificatesStatusEnum];
/**
 * @export
 */
export const LabsFrameEnum = {
    Object: 'object'
} as const;
export type LabsFrameEnum = typeof LabsFrameEnum[keyof typeof LabsFrameEnum];
/**
 * @export
 */
export const LabsAwardsComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type LabsAwardsComponentEnum = typeof LabsAwardsComponentEnum[keyof typeof LabsAwardsComponentEnum];
/**
 * @export
 */
export const LabsStatusEnum = {
    Current: 'current',
    Deleted: 'deleted',
    Disabled: 'disabled'
} as const;
export type LabsStatusEnum = typeof LabsStatusEnum[keyof typeof LabsStatusEnum];
/**
 * @export
 */
export const MatrixFilesFrameEnum = {
    Object: 'object'
} as const;
export type MatrixFilesFrameEnum = typeof MatrixFilesFrameEnum[keyof typeof MatrixFilesFrameEnum];
/**
 * @export
 */
export const MatrixFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type MatrixFilesAwardComponentEnum = typeof MatrixFilesAwardComponentEnum[keyof typeof MatrixFilesAwardComponentEnum];
/**
 * @export
 */
export const MatrixFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type MatrixFilesCollectionsEnum = typeof MatrixFilesCollectionsEnum[keyof typeof MatrixFilesCollectionsEnum];
/**
 * @export
 */
export const MatrixFilesDimension1Enum = {
    Cell: 'cell',
    Fragment: 'fragment',
    Gene: 'gene',
    Time: 'time',
    Treatment: 'treatment',
    Variant: 'variant',
    GenomicPosition: 'genomic position'
} as const;
export type MatrixFilesDimension1Enum = typeof MatrixFilesDimension1Enum[keyof typeof MatrixFilesDimension1Enum];
/**
 * @export
 */
export const MatrixFilesDimension2Enum = {
    Cell: 'cell',
    Fragment: 'fragment',
    Gene: 'gene',
    Time: 'time',
    Treatment: 'treatment',
    Variant: 'variant',
    GenomicPosition: 'genomic position'
} as const;
export type MatrixFilesDimension2Enum = typeof MatrixFilesDimension2Enum[keyof typeof MatrixFilesDimension2Enum];
/**
 * @export
 */
export const MatrixFilesFileFormatEnum = {
    H5ad: 'h5ad',
    Hdf5: 'hdf5',
    Mtx: 'mtx',
    Tar: 'tar',
    Hic: 'hic'
} as const;
export type MatrixFilesFileFormatEnum = typeof MatrixFilesFileFormatEnum[keyof typeof MatrixFilesFileFormatEnum];
/**
 * @export
 */
export const MatrixFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MatrixFilesStatusEnum = typeof MatrixFilesStatusEnum[keyof typeof MatrixFilesStatusEnum];
/**
 * @export
 */
export const MatrixFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type MatrixFilesUploadStatusEnum = typeof MatrixFilesUploadStatusEnum[keyof typeof MatrixFilesUploadStatusEnum];
/**
 * @export
 */
export const MeasurementSetsFrameEnum = {
    Object: 'object'
} as const;
export type MeasurementSetsFrameEnum = typeof MeasurementSetsFrameEnum[keyof typeof MeasurementSetsFrameEnum];
/**
 * @export
 */
export const MeasurementSetsAuxiliarySetsFileSetTypeEnum = {
    CellHashing: 'cell hashing',
    CellSorting: 'cell sorting',
    CircularizedRnaBarcodeDetection: 'circularized RNA barcode detection',
    GRnaSequencing: 'gRNA sequencing',
    OligoConjugatedLipids: 'oligo-conjugated lipids',
    QuantificationDnaBarcodeSequencing: 'quantification DNA barcode sequencing',
    VariantSequencing: 'variant sequencing'
} as const;
export type MeasurementSetsAuxiliarySetsFileSetTypeEnum = typeof MeasurementSetsAuxiliarySetsFileSetTypeEnum[keyof typeof MeasurementSetsAuxiliarySetsFileSetTypeEnum];
/**
 * @export
 */
export const MeasurementSetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type MeasurementSetsAwardComponentEnum = typeof MeasurementSetsAwardComponentEnum[keyof typeof MeasurementSetsAwardComponentEnum];
/**
 * @export
 */
export const MeasurementSetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type MeasurementSetsCollectionsEnum = typeof MeasurementSetsCollectionsEnum[keyof typeof MeasurementSetsCollectionsEnum];
/**
 * @export
 */
export const MeasurementSetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type MeasurementSetsDonorsSexEnum = typeof MeasurementSetsDonorsSexEnum[keyof typeof MeasurementSetsDonorsSexEnum];
/**
 * @export
 */
export const MeasurementSetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MeasurementSetsDonorsStatusEnum = typeof MeasurementSetsDonorsStatusEnum[keyof typeof MeasurementSetsDonorsStatusEnum];
/**
 * @export
 */
export const MeasurementSetsFileSetTypeEnum = {
    ExperimentalData: 'experimental data'
} as const;
export type MeasurementSetsFileSetTypeEnum = typeof MeasurementSetsFileSetTypeEnum[keyof typeof MeasurementSetsFileSetTypeEnum];
/**
 * @export
 */
export const MeasurementSetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type MeasurementSetsFilesUploadStatusEnum = typeof MeasurementSetsFilesUploadStatusEnum[keyof typeof MeasurementSetsFilesUploadStatusEnum];
/**
 * @export
 */
export const MeasurementSetsPreferredAssayTitleEnum = {
    _10xMultiome: '10x multiome',
    _10xMultiomeWithMultiSeq: '10x multiome with MULTI-seq',
    AavMpra: 'AAV-MPRA',
    AtacSeq: 'ATAC-seq',
    CeresSeq: 'CERES-seq',
    CellPainting: 'Cell painting',
    CrisprFlowFish: 'CRISPR FlowFISH',
    DogmaSeq: 'DOGMA-seq',
    HistoneChIpSeq: 'Histone ChIP-seq',
    HiC: 'Hi-C',
    LentiMpra: 'lentiMPRA',
    Merfish: 'MERFISH',
    Miaa: 'MIAA',
    MN2H: 'mN2H',
    Mpra: 'MPRA',
    MpraScQer: 'MPRA (scQer)',
    MultiSeq: 'MULTI-seq',
    ParseSpliTSeq: 'Parse SPLiT-seq',
    PerturbSeq: 'Perturb-seq',
    RnaSeq: 'RNA-seq',
    Sge: 'SGE',
    ScAtacSeq: 'scATAC-seq',
    ScNtSeq: 'scNT-seq',
    ScNtSeq2: 'scNT-seq2',
    ScRnaSeq: 'scRNA-seq',
    SemiQY2H: 'semi-qY2H',
    ShareSeq: 'SHARE-seq',
    SmFish: 'smFISH',
    SnAtacSeq: 'snATAC-seq',
    SnmCSeq2: 'snmC-Seq2',
    SnMctSeq: 'snMCT-seq',
    SnM3CSeq: 'snM3C-seq',
    SnRnaSeq: 'snRNA-seq',
    Superstarr: 'SUPERSTARR',
    TapSeq: 'TAP-seq',
    TfChIpSeq: 'TF ChIP-seq',
    VampSeq: 'VAMP-seq',
    VariantFlowFish: 'Variant FlowFISH',
    VariantPainting: 'Variant painting',
    Y2H: 'Y2H',
    YN2H: 'yN2H'
} as const;
export type MeasurementSetsPreferredAssayTitleEnum = typeof MeasurementSetsPreferredAssayTitleEnum[keyof typeof MeasurementSetsPreferredAssayTitleEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesCellFateChangeTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type MeasurementSetsSamplesCellFateChangeTreatmentsPurposeEnum = typeof MeasurementSetsSamplesCellFateChangeTreatmentsPurposeEnum[keyof typeof MeasurementSetsSamplesCellFateChangeTreatmentsPurposeEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesCellFateChangeTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type MeasurementSetsSamplesCellFateChangeTreatmentsTreatmentTypeEnum = typeof MeasurementSetsSamplesCellFateChangeTreatmentsTreatmentTypeEnum[keyof typeof MeasurementSetsSamplesCellFateChangeTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type MeasurementSetsSamplesClassificationsEnum = typeof MeasurementSetsSamplesClassificationsEnum[keyof typeof MeasurementSetsSamplesClassificationsEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesConstructLibrarySetsFileSetTypeEnum = {
    GuideLibrary: 'guide library',
    ReporterLibrary: 'reporter library',
    ExpressionVectorLibrary: 'expression vector library',
    EditingTemplateLibrary: 'editing template library'
} as const;
export type MeasurementSetsSamplesConstructLibrarySetsFileSetTypeEnum = typeof MeasurementSetsSamplesConstructLibrarySetsFileSetTypeEnum[keyof typeof MeasurementSetsSamplesConstructLibrarySetsFileSetTypeEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type MeasurementSetsSamplesSampleTermsStatusEnum = typeof MeasurementSetsSamplesSampleTermsStatusEnum[keyof typeof MeasurementSetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MeasurementSetsSamplesStatusEnum = typeof MeasurementSetsSamplesStatusEnum[keyof typeof MeasurementSetsSamplesStatusEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type MeasurementSetsSamplesTaxaEnum = typeof MeasurementSetsSamplesTaxaEnum[keyof typeof MeasurementSetsSamplesTaxaEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type MeasurementSetsSamplesTreatmentsPurposeEnum = typeof MeasurementSetsSamplesTreatmentsPurposeEnum[keyof typeof MeasurementSetsSamplesTreatmentsPurposeEnum];
/**
 * @export
 */
export const MeasurementSetsSamplesTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type MeasurementSetsSamplesTreatmentsTreatmentTypeEnum = typeof MeasurementSetsSamplesTreatmentsTreatmentTypeEnum[keyof typeof MeasurementSetsSamplesTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const MeasurementSetsSequencingLibraryTypesEnum = {
    DirectRna: 'direct RNA',
    ExomeCapture: 'exome capture',
    MRnaEnriched: 'mRNA enriched',
    RRnaDepleted: 'rRNA depleted',
    PolyADepleted: 'polyA depleted',
    PolyAEnriched: 'polyA enriched'
} as const;
export type MeasurementSetsSequencingLibraryTypesEnum = typeof MeasurementSetsSequencingLibraryTypesEnum[keyof typeof MeasurementSetsSequencingLibraryTypesEnum];
/**
 * @export
 */
export const MeasurementSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MeasurementSetsStatusEnum = typeof MeasurementSetsStatusEnum[keyof typeof MeasurementSetsStatusEnum];
/**
 * @export
 */
export const ModelFilesFrameEnum = {
    Object: 'object'
} as const;
export type ModelFilesFrameEnum = typeof ModelFilesFrameEnum[keyof typeof ModelFilesFrameEnum];
/**
 * @export
 */
export const ModelFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ModelFilesAwardComponentEnum = typeof ModelFilesAwardComponentEnum[keyof typeof ModelFilesAwardComponentEnum];
/**
 * @export
 */
export const ModelFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ModelFilesCollectionsEnum = typeof ModelFilesCollectionsEnum[keyof typeof ModelFilesCollectionsEnum];
/**
 * @export
 */
export const ModelFilesFileFormatEnum = {
    Hdf5: 'hdf5',
    Json: 'json',
    Tar: 'tar',
    Tsv: 'tsv'
} as const;
export type ModelFilesFileFormatEnum = typeof ModelFilesFileFormatEnum[keyof typeof ModelFilesFileFormatEnum];
/**
 * @export
 */
export const ModelFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ModelFilesStatusEnum = typeof ModelFilesStatusEnum[keyof typeof ModelFilesStatusEnum];
/**
 * @export
 */
export const ModelFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ModelFilesUploadStatusEnum = typeof ModelFilesUploadStatusEnum[keyof typeof ModelFilesUploadStatusEnum];
/**
 * @export
 */
export const ModelSetsFrameEnum = {
    Object: 'object'
} as const;
export type ModelSetsFrameEnum = typeof ModelSetsFrameEnum[keyof typeof ModelSetsFrameEnum];
/**
 * @export
 */
export const ModelSetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ModelSetsAwardComponentEnum = typeof ModelSetsAwardComponentEnum[keyof typeof ModelSetsAwardComponentEnum];
/**
 * @export
 */
export const ModelSetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ModelSetsCollectionsEnum = typeof ModelSetsCollectionsEnum[keyof typeof ModelSetsCollectionsEnum];
/**
 * @export
 */
export const ModelSetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type ModelSetsDonorsSexEnum = typeof ModelSetsDonorsSexEnum[keyof typeof ModelSetsDonorsSexEnum];
/**
 * @export
 */
export const ModelSetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ModelSetsDonorsStatusEnum = typeof ModelSetsDonorsStatusEnum[keyof typeof ModelSetsDonorsStatusEnum];
/**
 * @export
 */
export const ModelSetsFileSetTypeEnum = {
    NeuralNetwork: 'neural network',
    RandomForest: 'random forest',
    DecisionTree: 'decision tree',
    SupportVectorMachine: 'support vector machine',
    VariantBindingEffect: 'variant binding effect'
} as const;
export type ModelSetsFileSetTypeEnum = typeof ModelSetsFileSetTypeEnum[keyof typeof ModelSetsFileSetTypeEnum];
/**
 * @export
 */
export const ModelSetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ModelSetsFilesUploadStatusEnum = typeof ModelSetsFilesUploadStatusEnum[keyof typeof ModelSetsFilesUploadStatusEnum];
/**
 * @export
 */
export const ModelSetsPredictionObjectsEnum = {
    CodingVariants: 'coding variants',
    NonCodingVariants: 'non-coding variants',
    AllVariants: 'all variants',
    RegulatoryElements: 'regulatory elements',
    Genes: 'genes'
} as const;
export type ModelSetsPredictionObjectsEnum = typeof ModelSetsPredictionObjectsEnum[keyof typeof ModelSetsPredictionObjectsEnum];
/**
 * @export
 */
export const ModelSetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type ModelSetsSamplesClassificationsEnum = typeof ModelSetsSamplesClassificationsEnum[keyof typeof ModelSetsSamplesClassificationsEnum];
/**
 * @export
 */
export const ModelSetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type ModelSetsSamplesSampleTermsStatusEnum = typeof ModelSetsSamplesSampleTermsStatusEnum[keyof typeof ModelSetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const ModelSetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ModelSetsSamplesStatusEnum = typeof ModelSetsSamplesStatusEnum[keyof typeof ModelSetsSamplesStatusEnum];
/**
 * @export
 */
export const ModelSetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type ModelSetsSamplesTaxaEnum = typeof ModelSetsSamplesTaxaEnum[keyof typeof ModelSetsSamplesTaxaEnum];
/**
 * @export
 */
export const ModelSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ModelSetsStatusEnum = typeof ModelSetsStatusEnum[keyof typeof ModelSetsStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesFrameEnum = {
    Object: 'object'
} as const;
export type MultiplexedSamplesFrameEnum = typeof MultiplexedSamplesFrameEnum[keyof typeof MultiplexedSamplesFrameEnum];
/**
 * @export
 */
export const MultiplexedSamplesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type MultiplexedSamplesAwardComponentEnum = typeof MultiplexedSamplesAwardComponentEnum[keyof typeof MultiplexedSamplesAwardComponentEnum];
/**
 * @export
 */
export const MultiplexedSamplesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type MultiplexedSamplesCollectionsEnum = typeof MultiplexedSamplesCollectionsEnum[keyof typeof MultiplexedSamplesCollectionsEnum];
/**
 * @export
 */
export const MultiplexedSamplesFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MultiplexedSamplesFileSetsStatusEnum = typeof MultiplexedSamplesFileSetsStatusEnum[keyof typeof MultiplexedSamplesFileSetsStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type MultiplexedSamplesModificationsStatusEnum = typeof MultiplexedSamplesModificationsStatusEnum[keyof typeof MultiplexedSamplesModificationsStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesMultiplexedSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MultiplexedSamplesMultiplexedSamplesStatusEnum = typeof MultiplexedSamplesMultiplexedSamplesStatusEnum[keyof typeof MultiplexedSamplesMultiplexedSamplesStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type MultiplexedSamplesNucleicAcidDeliveryEnum = typeof MultiplexedSamplesNucleicAcidDeliveryEnum[keyof typeof MultiplexedSamplesNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const MultiplexedSamplesStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type MultiplexedSamplesStartingAmountUnitsEnum = typeof MultiplexedSamplesStartingAmountUnitsEnum[keyof typeof MultiplexedSamplesStartingAmountUnitsEnum];
/**
 * @export
 */
export const MultiplexedSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type MultiplexedSamplesStatusEnum = typeof MultiplexedSamplesStatusEnum[keyof typeof MultiplexedSamplesStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type MultiplexedSamplesTimePostLibraryDeliveryUnitsEnum = typeof MultiplexedSamplesTimePostLibraryDeliveryUnitsEnum[keyof typeof MultiplexedSamplesTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const MultiplexedSamplesTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type MultiplexedSamplesTreatmentsPurposeEnum = typeof MultiplexedSamplesTreatmentsPurposeEnum[keyof typeof MultiplexedSamplesTreatmentsPurposeEnum];
/**
 * @export
 */
export const MultiplexedSamplesTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type MultiplexedSamplesTreatmentsStatusEnum = typeof MultiplexedSamplesTreatmentsStatusEnum[keyof typeof MultiplexedSamplesTreatmentsStatusEnum];
/**
 * @export
 */
export const MultiplexedSamplesTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type MultiplexedSamplesTreatmentsTreatmentTypeEnum = typeof MultiplexedSamplesTreatmentsTreatmentTypeEnum[keyof typeof MultiplexedSamplesTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const OpenReadingFramesFrameEnum = {
    Object: 'object'
} as const;
export type OpenReadingFramesFrameEnum = typeof OpenReadingFramesFrameEnum[keyof typeof OpenReadingFramesFrameEnum];
/**
 * @export
 */
export const OpenReadingFramesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type OpenReadingFramesStatusEnum = typeof OpenReadingFramesStatusEnum[keyof typeof OpenReadingFramesStatusEnum];
/**
 * @export
 */
export const PagesFrameEnum = {
    Object: 'object'
} as const;
export type PagesFrameEnum = typeof PagesFrameEnum[keyof typeof PagesFrameEnum];
/**
 * @export
 */
export const PagesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PagesStatusEnum = typeof PagesStatusEnum[keyof typeof PagesStatusEnum];
/**
 * @export
 */
export const PhenotypeTermsFrameEnum = {
    Object: 'object'
} as const;
export type PhenotypeTermsFrameEnum = typeof PhenotypeTermsFrameEnum[keyof typeof PhenotypeTermsFrameEnum];
/**
 * @export
 */
export const PhenotypeTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PhenotypeTermsStatusEnum = typeof PhenotypeTermsStatusEnum[keyof typeof PhenotypeTermsStatusEnum];
/**
 * @export
 */
export const PhenotypicFeaturesFrameEnum = {
    Object: 'object'
} as const;
export type PhenotypicFeaturesFrameEnum = typeof PhenotypicFeaturesFrameEnum[keyof typeof PhenotypicFeaturesFrameEnum];
/**
 * @export
 */
export const PhenotypicFeaturesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type PhenotypicFeaturesAwardComponentEnum = typeof PhenotypicFeaturesAwardComponentEnum[keyof typeof PhenotypicFeaturesAwardComponentEnum];
/**
 * @export
 */
export const PhenotypicFeaturesQuantityUnitsEnum = {
    Meter: 'meter',
    Micromole: 'micromole',
    Nanogram: 'nanogram',
    Microgram: 'microgram',
    Milligram: 'milligram',
    Gram: 'gram',
    Kilogram: 'kilogram',
    MilliInternationalUnitPerMilliliter: 'milli-International Unit per milliliter',
    PicogramPerMilliliter: 'picogram per milliliter',
    NanogramPerMilliliter: 'nanogram per milliliter',
    MilligramPerDeciliter: 'milligram per deciliter'
} as const;
export type PhenotypicFeaturesQuantityUnitsEnum = typeof PhenotypicFeaturesQuantityUnitsEnum[keyof typeof PhenotypicFeaturesQuantityUnitsEnum];
/**
 * @export
 */
export const PhenotypicFeaturesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PhenotypicFeaturesStatusEnum = typeof PhenotypicFeaturesStatusEnum[keyof typeof PhenotypicFeaturesStatusEnum];
/**
 * @export
 */
export const PlatformTermsFrameEnum = {
    Object: 'object'
} as const;
export type PlatformTermsFrameEnum = typeof PlatformTermsFrameEnum[keyof typeof PlatformTermsFrameEnum];
/**
 * @export
 */
export const PlatformTermsCompanyEnum = {
    _10XGenomics: '10X Genomics',
    Illumina: 'Illumina',
    LifeTechnologies: 'Life Technologies',
    OxfordNanoporeTechnologies: 'Oxford Nanopore Technologies',
    PacificBiosciences: 'Pacific Biosciences',
    ParseBiosciences: 'Parse Biosciences',
    Roche: 'Roche'
} as const;
export type PlatformTermsCompanyEnum = typeof PlatformTermsCompanyEnum[keyof typeof PlatformTermsCompanyEnum];
/**
 * @export
 */
export const PlatformTermsSequencingKitsEnum = {
    HiSeqSbsKitV4: 'HiSeq SBS Kit v4',
    HiSeqSrClusterKitV4CBotHs: 'HiSeq SR Cluster Kit v4-cBot-HS',
    HiSeqPeClusterKitV4CBotHs: 'HiSeq PE Cluster Kit v4-cBot-HS',
    HiSeqSrRapidClusterKitV2: 'HiSeq SR Rapid Cluster Kit v2',
    HiSeqPeRapidClusterKitV2: 'HiSeq PE Rapid Cluster Kit v2',
    HiSeqRapidSbsKitV2: 'HiSeq Rapid SBS Kit v2',
    HiSeq30004000SbsKit: 'HiSeq 3000/4000 SBS Kit',
    HiSeq30004000SrClusterKit: 'HiSeq 3000/4000 SR Cluster Kit',
    HiSeq30004000PeClusterKit: 'HiSeq 3000/4000 PE Cluster Kit',
    MiSeqReagentKitV2: 'MiSeq Reagent Kit v2',
    NextSeq500MidOutputKit: 'NextSeq 500 Mid Output Kit',
    NextSeq500HighOutputKit: 'NextSeq 500 High Output Kit',
    NextSeq500MidOutputV2Kit: 'NextSeq 500 Mid Output v2 Kit',
    NextSeq500HighOutputV2Kit: 'NextSeq 500 High Output v2 Kit',
    NextSeq500550MidOutputV25Kit: 'NextSeq 500/550 Mid-Output v2.5 Kit',
    NextSeq500550HighOutputV25Kit: 'NextSeq 500/550 High-Output v2.5 Kit',
    TgNextSeq500550MidOutputKitV25: 'TG NextSeq 500/550 Mid-Output Kit v2.5',
    TgNextSeq500550HighOutputKitV25: 'TG NextSeq 500/550 High-Output Kit v2.5',
    NextSeq10002000P1ReagentKit: 'NextSeq 1000/2000 P1 Reagent Kit',
    NextSeq10002000P2ReagentKit: 'NextSeq 1000/2000 P2 Reagent Kit',
    NextSeq10002000P3ReagentKit: 'NextSeq 1000/2000 P3 Reagent Kit',
    NextSeq10002000P1XleapSbsReagentKit: 'NextSeq 1000/2000 P1 XLEAP-SBS Reagent Kit',
    NextSeq10002000P2XleapSbsReagentKit: 'NextSeq 1000/2000 P2 XLEAP-SBS Reagent Kit',
    NextSeq2000P3XleapSbsReagentKit: 'NextSeq 2000 P3 XLEAP-SBS Reagent Kit',
    NextSeq2000P4XleapSbsReagentKit: 'NextSeq 2000 P4 XLEAP-SBS Reagent Kit',
    NovaSeq6000SpReagentKitV15: 'NovaSeq 6000 SP Reagent Kit v1.5',
    NovaSeq6000S1ReagentKitV15: 'NovaSeq 6000 S1 Reagent Kit v1.5',
    NovaSeq6000S2ReagentKitV15: 'NovaSeq 6000 S2 Reagent Kit v1.5',
    NovaSeq6000S4ReagentKitV15: 'NovaSeq 6000 S4 Reagent Kit v1.5',
    NovaSeqXSeries10BReagentKit: 'NovaSeq X Series 10B Reagent Kit',
    OntLigationSequencingKitV14: 'ONT Ligation Sequencing Kit V14',
    SequelSequencingKit30: 'Sequel sequencing kit 3.0',
    SequelIiSequencingKit20: 'Sequel II sequencing kit 2.0'
} as const;
export type PlatformTermsSequencingKitsEnum = typeof PlatformTermsSequencingKitsEnum[keyof typeof PlatformTermsSequencingKitsEnum];
/**
 * @export
 */
export const PlatformTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PlatformTermsStatusEnum = typeof PlatformTermsStatusEnum[keyof typeof PlatformTermsStatusEnum];
/**
 * @export
 */
export const PredictionSetsFrameEnum = {
    Object: 'object'
} as const;
export type PredictionSetsFrameEnum = typeof PredictionSetsFrameEnum[keyof typeof PredictionSetsFrameEnum];
/**
 * @export
 */
export const PredictionSetsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type PredictionSetsAwardComponentEnum = typeof PredictionSetsAwardComponentEnum[keyof typeof PredictionSetsAwardComponentEnum];
/**
 * @export
 */
export const PredictionSetsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type PredictionSetsCollectionsEnum = typeof PredictionSetsCollectionsEnum[keyof typeof PredictionSetsCollectionsEnum];
/**
 * @export
 */
export const PredictionSetsDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type PredictionSetsDonorsSexEnum = typeof PredictionSetsDonorsSexEnum[keyof typeof PredictionSetsDonorsSexEnum];
/**
 * @export
 */
export const PredictionSetsDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type PredictionSetsDonorsStatusEnum = typeof PredictionSetsDonorsStatusEnum[keyof typeof PredictionSetsDonorsStatusEnum];
/**
 * @export
 */
export const PredictionSetsFileSetTypeEnum = {
    Pathogenicity: 'pathogenicity',
    FunctionalEffect: 'functional effect',
    ProteinStability: 'protein stability',
    ActivityLevel: 'activity level',
    BindingEffect: 'binding effect'
} as const;
export type PredictionSetsFileSetTypeEnum = typeof PredictionSetsFileSetTypeEnum[keyof typeof PredictionSetsFileSetTypeEnum];
/**
 * @export
 */
export const PredictionSetsFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type PredictionSetsFilesUploadStatusEnum = typeof PredictionSetsFilesUploadStatusEnum[keyof typeof PredictionSetsFilesUploadStatusEnum];
/**
 * @export
 */
export const PredictionSetsSamplesClassificationsEnum = {
    Organoid: 'organoid',
    Gastruloid: 'gastruloid',
    Embryoid: 'embryoid',
    CellLine: 'cell line',
    DifferentiatedCellSpecimen: 'differentiated cell specimen',
    ReprogrammedCellSpecimen: 'reprogrammed cell specimen',
    PooledCellSpecimen: 'pooled cell specimen'
} as const;
export type PredictionSetsSamplesClassificationsEnum = typeof PredictionSetsSamplesClassificationsEnum[keyof typeof PredictionSetsSamplesClassificationsEnum];
/**
 * @export
 */
export const PredictionSetsSamplesSampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PredictionSetsSamplesSampleTermsStatusEnum = typeof PredictionSetsSamplesSampleTermsStatusEnum[keyof typeof PredictionSetsSamplesSampleTermsStatusEnum];
/**
 * @export
 */
export const PredictionSetsSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type PredictionSetsSamplesStatusEnum = typeof PredictionSetsSamplesStatusEnum[keyof typeof PredictionSetsSamplesStatusEnum];
/**
 * @export
 */
export const PredictionSetsSamplesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type PredictionSetsSamplesTaxaEnum = typeof PredictionSetsSamplesTaxaEnum[keyof typeof PredictionSetsSamplesTaxaEnum];
/**
 * @export
 */
export const PredictionSetsScopeEnum = {
    Genes: 'genes',
    Loci: 'loci',
    GenomeWide: 'genome-wide'
} as const;
export type PredictionSetsScopeEnum = typeof PredictionSetsScopeEnum[keyof typeof PredictionSetsScopeEnum];
/**
 * @export
 */
export const PredictionSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type PredictionSetsStatusEnum = typeof PredictionSetsStatusEnum[keyof typeof PredictionSetsStatusEnum];
/**
 * @export
 */
export const PrimaryCellsFrameEnum = {
    Object: 'object'
} as const;
export type PrimaryCellsFrameEnum = typeof PrimaryCellsFrameEnum[keyof typeof PrimaryCellsFrameEnum];
/**
 * @export
 */
export const PrimaryCellsAgeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;
export type PrimaryCellsAgeUnitsEnum = typeof PrimaryCellsAgeUnitsEnum[keyof typeof PrimaryCellsAgeUnitsEnum];
/**
 * @export
 */
export const PrimaryCellsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type PrimaryCellsAwardComponentEnum = typeof PrimaryCellsAwardComponentEnum[keyof typeof PrimaryCellsAwardComponentEnum];
/**
 * @export
 */
export const PrimaryCellsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type PrimaryCellsCollectionsEnum = typeof PrimaryCellsCollectionsEnum[keyof typeof PrimaryCellsCollectionsEnum];
/**
 * @export
 */
export const PrimaryCellsFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type PrimaryCellsFileSetsStatusEnum = typeof PrimaryCellsFileSetsStatusEnum[keyof typeof PrimaryCellsFileSetsStatusEnum];
/**
 * @export
 */
export const PrimaryCellsModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PrimaryCellsModificationsStatusEnum = typeof PrimaryCellsModificationsStatusEnum[keyof typeof PrimaryCellsModificationsStatusEnum];
/**
 * @export
 */
export const PrimaryCellsNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type PrimaryCellsNucleicAcidDeliveryEnum = typeof PrimaryCellsNucleicAcidDeliveryEnum[keyof typeof PrimaryCellsNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const PrimaryCellsSexEnum = {
    Female: 'female',
    Male: 'male',
    Mixed: 'mixed',
    Unspecified: 'unspecified'
} as const;
export type PrimaryCellsSexEnum = typeof PrimaryCellsSexEnum[keyof typeof PrimaryCellsSexEnum];
/**
 * @export
 */
export const PrimaryCellsStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type PrimaryCellsStartingAmountUnitsEnum = typeof PrimaryCellsStartingAmountUnitsEnum[keyof typeof PrimaryCellsStartingAmountUnitsEnum];
/**
 * @export
 */
export const PrimaryCellsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type PrimaryCellsStatusEnum = typeof PrimaryCellsStatusEnum[keyof typeof PrimaryCellsStatusEnum];
/**
 * @export
 */
export const PrimaryCellsTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type PrimaryCellsTaxaEnum = typeof PrimaryCellsTaxaEnum[keyof typeof PrimaryCellsTaxaEnum];
/**
 * @export
 */
export const PrimaryCellsTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type PrimaryCellsTimePostLibraryDeliveryUnitsEnum = typeof PrimaryCellsTimePostLibraryDeliveryUnitsEnum[keyof typeof PrimaryCellsTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const PrimaryCellsTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type PrimaryCellsTreatmentsPurposeEnum = typeof PrimaryCellsTreatmentsPurposeEnum[keyof typeof PrimaryCellsTreatmentsPurposeEnum];
/**
 * @export
 */
export const PrimaryCellsTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PrimaryCellsTreatmentsStatusEnum = typeof PrimaryCellsTreatmentsStatusEnum[keyof typeof PrimaryCellsTreatmentsStatusEnum];
/**
 * @export
 */
export const PrimaryCellsTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type PrimaryCellsTreatmentsTreatmentTypeEnum = typeof PrimaryCellsTreatmentsTreatmentTypeEnum[keyof typeof PrimaryCellsTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const PublicationsFrameEnum = {
    Object: 'object'
} as const;
export type PublicationsFrameEnum = typeof PublicationsFrameEnum[keyof typeof PublicationsFrameEnum];
/**
 * @export
 */
export const PublicationsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type PublicationsAwardComponentEnum = typeof PublicationsAwardComponentEnum[keyof typeof PublicationsAwardComponentEnum];
/**
 * @export
 */
export const PublicationsPublishedByEnum = {
    Community: 'community',
    Igvf: 'IGVF',
    Encode: 'ENCODE'
} as const;
export type PublicationsPublishedByEnum = typeof PublicationsPublishedByEnum[keyof typeof PublicationsPublishedByEnum];
/**
 * @export
 */
export const PublicationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type PublicationsStatusEnum = typeof PublicationsStatusEnum[keyof typeof PublicationsStatusEnum];
/**
 * @export
 */
export const ReferenceFilesFrameEnum = {
    Object: 'object'
} as const;
export type ReferenceFilesFrameEnum = typeof ReferenceFilesFrameEnum[keyof typeof ReferenceFilesFrameEnum];
/**
 * @export
 */
export const ReferenceFilesAssemblyEnum = {
    Grch38: 'GRCh38',
    Hg19: 'hg19',
    Grcm39: 'GRCm39',
    Mm10: 'mm10'
} as const;
export type ReferenceFilesAssemblyEnum = typeof ReferenceFilesAssemblyEnum[keyof typeof ReferenceFilesAssemblyEnum];
/**
 * @export
 */
export const ReferenceFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type ReferenceFilesAwardComponentEnum = typeof ReferenceFilesAwardComponentEnum[keyof typeof ReferenceFilesAwardComponentEnum];
/**
 * @export
 */
export const ReferenceFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type ReferenceFilesCollectionsEnum = typeof ReferenceFilesCollectionsEnum[keyof typeof ReferenceFilesCollectionsEnum];
/**
 * @export
 */
export const ReferenceFilesFileFormatEnum = {
    Bed: 'bed',
    Csv: 'csv',
    Dat: 'dat',
    Fasta: 'fasta',
    Gaf: 'gaf',
    Gds: 'gds',
    Gtf: 'gtf',
    Obo: 'obo',
    Owl: 'owl',
    Pwm: 'PWM',
    Tar: 'tar',
    Tsv: 'tsv',
    Txt: 'txt',
    Vcf: 'vcf',
    Xml: 'xml'
} as const;
export type ReferenceFilesFileFormatEnum = typeof ReferenceFilesFileFormatEnum[keyof typeof ReferenceFilesFileFormatEnum];
/**
 * @export
 */
export const ReferenceFilesFileFormatTypeEnum = {
    Bed12: 'bed12',
    Bed3: 'bed3',
    Bed32: 'bed3+',
    Bed5: 'bed5',
    Bed6: 'bed6',
    Bed62: 'bed6+',
    Bed9: 'bed9',
    Bed92: 'bed9+',
    MpraStarr: 'mpra_starr'
} as const;
export type ReferenceFilesFileFormatTypeEnum = typeof ReferenceFilesFileFormatTypeEnum[keyof typeof ReferenceFilesFileFormatTypeEnum];
/**
 * @export
 */
export const ReferenceFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type ReferenceFilesStatusEnum = typeof ReferenceFilesStatusEnum[keyof typeof ReferenceFilesStatusEnum];
/**
 * @export
 */
export const ReferenceFilesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type ReferenceFilesTranscriptomeAnnotationEnum = typeof ReferenceFilesTranscriptomeAnnotationEnum[keyof typeof ReferenceFilesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const ReferenceFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type ReferenceFilesUploadStatusEnum = typeof ReferenceFilesUploadStatusEnum[keyof typeof ReferenceFilesUploadStatusEnum];
/**
 * @export
 */
export const ReportFrameEnum = {
    Object: 'object',
    Embedded: 'embedded'
} as const;
export type ReportFrameEnum = typeof ReportFrameEnum[keyof typeof ReportFrameEnum];
/**
 * @export
 */
export const RodentDonorsFrameEnum = {
    Object: 'object'
} as const;
export type RodentDonorsFrameEnum = typeof RodentDonorsFrameEnum[keyof typeof RodentDonorsFrameEnum];
/**
 * @export
 */
export const RodentDonorsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type RodentDonorsAwardComponentEnum = typeof RodentDonorsAwardComponentEnum[keyof typeof RodentDonorsAwardComponentEnum];
/**
 * @export
 */
export const RodentDonorsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type RodentDonorsCollectionsEnum = typeof RodentDonorsCollectionsEnum[keyof typeof RodentDonorsCollectionsEnum];
/**
 * @export
 */
export const RodentDonorsPhenotypicFeaturesQuantityUnitsEnum = {
    Meter: 'meter',
    Micromole: 'micromole',
    Nanogram: 'nanogram',
    Microgram: 'microgram',
    Milligram: 'milligram',
    Gram: 'gram',
    Kilogram: 'kilogram',
    MilliInternationalUnitPerMilliliter: 'milli-International Unit per milliliter',
    PicogramPerMilliliter: 'picogram per milliliter',
    NanogramPerMilliliter: 'nanogram per milliliter',
    MilligramPerDeciliter: 'milligram per deciliter'
} as const;
export type RodentDonorsPhenotypicFeaturesQuantityUnitsEnum = typeof RodentDonorsPhenotypicFeaturesQuantityUnitsEnum[keyof typeof RodentDonorsPhenotypicFeaturesQuantityUnitsEnum];
/**
 * @export
 */
export const RodentDonorsSexEnum = {
    Male: 'male',
    Female: 'female',
    Unspecified: 'unspecified'
} as const;
export type RodentDonorsSexEnum = typeof RodentDonorsSexEnum[keyof typeof RodentDonorsSexEnum];
/**
 * @export
 */
export const RodentDonorsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type RodentDonorsStatusEnum = typeof RodentDonorsStatusEnum[keyof typeof RodentDonorsStatusEnum];
/**
 * @export
 */
export const RodentDonorsStrainBackgroundEnum = {
    AJAj: 'A/J (AJ)',
    C57Bl6JB6: 'C57BL/6J (B6)',
    _129S1SvImJ129: '129S1/SvImJ (129)',
    NodShiLtJNod: 'NOD/ShiLtJ (NOD)',
    NzoH1LtJNzo: 'NZO/H1LtJ (NZO)',
    CastEiJCast: 'CAST/EiJ (CAST)',
    PwkPhJPwk: 'PWK/PhJ (PWK)',
    WsbEiJWsb: 'WSB/EiJ (WSB)',
    CastMMCastaneus: 'CAST (M. m. castaneus)',
    WsbMMDomesticus: 'WSB (M. m. domesticus)',
    PwkMMMusculus: 'PWK (M. m. musculus)'
} as const;
export type RodentDonorsStrainBackgroundEnum = typeof RodentDonorsStrainBackgroundEnum[keyof typeof RodentDonorsStrainBackgroundEnum];
/**
 * @export
 */
export const RodentDonorsTaxaEnum = {
    MusMusculus: 'Mus musculus'
} as const;
export type RodentDonorsTaxaEnum = typeof RodentDonorsTaxaEnum[keyof typeof RodentDonorsTaxaEnum];
/**
 * @export
 */
export const SampleTermsFrameEnum = {
    Object: 'object'
} as const;
export type SampleTermsFrameEnum = typeof SampleTermsFrameEnum[keyof typeof SampleTermsFrameEnum];
/**
 * @export
 */
export const SampleTermsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type SampleTermsStatusEnum = typeof SampleTermsStatusEnum[keyof typeof SampleTermsStatusEnum];
/**
 * @export
 */
export const SearchFrameEnum = {
    Object: 'object'
} as const;
export type SearchFrameEnum = typeof SearchFrameEnum[keyof typeof SearchFrameEnum];
/**
 * @export
 */
export const SequenceFilesFrameEnum = {
    Object: 'object'
} as const;
export type SequenceFilesFrameEnum = typeof SequenceFilesFrameEnum[keyof typeof SequenceFilesFrameEnum];
/**
 * @export
 */
export const SequenceFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type SequenceFilesAwardComponentEnum = typeof SequenceFilesAwardComponentEnum[keyof typeof SequenceFilesAwardComponentEnum];
/**
 * @export
 */
export const SequenceFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type SequenceFilesCollectionsEnum = typeof SequenceFilesCollectionsEnum[keyof typeof SequenceFilesCollectionsEnum];
/**
 * @export
 */
export const SequenceFilesFileFormatEnum = {
    Bam: 'bam',
    Fastq: 'fastq',
    Pod5: 'pod5'
} as const;
export type SequenceFilesFileFormatEnum = typeof SequenceFilesFileFormatEnum[keyof typeof SequenceFilesFileFormatEnum];
/**
 * @export
 */
export const SequenceFilesIlluminaReadTypeEnum = {
    R1: 'R1',
    R2: 'R2',
    R3: 'R3',
    I1: 'I1',
    I2: 'I2'
} as const;
export type SequenceFilesIlluminaReadTypeEnum = typeof SequenceFilesIlluminaReadTypeEnum[keyof typeof SequenceFilesIlluminaReadTypeEnum];
/**
 * @export
 */
export const SequenceFilesSequencingKitEnum = {
    HiSeqSbsKitV4: 'HiSeq SBS Kit v4',
    HiSeqSrClusterKitV4CBotHs: 'HiSeq SR Cluster Kit v4-cBot-HS',
    HiSeqPeClusterKitV4CBotHs: 'HiSeq PE Cluster Kit v4-cBot-HS',
    HiSeqSrRapidClusterKitV2: 'HiSeq SR Rapid Cluster Kit v2',
    HiSeqPeRapidClusterKitV2: 'HiSeq PE Rapid Cluster Kit v2',
    HiSeqRapidSbsKitV2: 'HiSeq Rapid SBS Kit v2',
    HiSeq30004000SbsKit: 'HiSeq 3000/4000 SBS Kit',
    HiSeq30004000SrClusterKit: 'HiSeq 3000/4000 SR Cluster Kit',
    HiSeq30004000PeClusterKit: 'HiSeq 3000/4000 PE Cluster Kit',
    MiSeqReagentKitV2: 'MiSeq Reagent Kit v2',
    NextSeq500MidOutputKit: 'NextSeq 500 Mid Output Kit',
    NextSeq500HighOutputKit: 'NextSeq 500 High Output Kit',
    NextSeq500MidOutputV2Kit: 'NextSeq 500 Mid Output v2 Kit',
    NextSeq500HighOutputV2Kit: 'NextSeq 500 High Output v2 Kit',
    NextSeq500550MidOutputV25Kit: 'NextSeq 500/550 Mid-Output v2.5 Kit',
    NextSeq500550HighOutputV25Kit: 'NextSeq 500/550 High-Output v2.5 Kit',
    TgNextSeq500550MidOutputKitV25: 'TG NextSeq 500/550 Mid-Output Kit v2.5',
    TgNextSeq500550HighOutputKitV25: 'TG NextSeq 500/550 High-Output Kit v2.5',
    NextSeq10002000P1ReagentKit: 'NextSeq 1000/2000 P1 Reagent Kit',
    NextSeq10002000P2ReagentKit: 'NextSeq 1000/2000 P2 Reagent Kit',
    NextSeq10002000P3ReagentKit: 'NextSeq 1000/2000 P3 Reagent Kit',
    NextSeq10002000P1XleapSbsReagentKit: 'NextSeq 1000/2000 P1 XLEAP-SBS Reagent Kit',
    NextSeq10002000P2XleapSbsReagentKit: 'NextSeq 1000/2000 P2 XLEAP-SBS Reagent Kit',
    NextSeq2000P3XleapSbsReagentKit: 'NextSeq 2000 P3 XLEAP-SBS Reagent Kit',
    NextSeq2000P4XleapSbsReagentKit: 'NextSeq 2000 P4 XLEAP-SBS Reagent Kit',
    NovaSeq6000SpReagentKitV15: 'NovaSeq 6000 SP Reagent Kit v1.5',
    NovaSeq6000S1ReagentKitV15: 'NovaSeq 6000 S1 Reagent Kit v1.5',
    NovaSeq6000S2ReagentKitV15: 'NovaSeq 6000 S2 Reagent Kit v1.5',
    NovaSeq6000S4ReagentKitV15: 'NovaSeq 6000 S4 Reagent Kit v1.5',
    NovaSeqXSeries10BReagentKit: 'NovaSeq X Series 10B Reagent Kit',
    OntLigationSequencingKitV14: 'ONT Ligation Sequencing Kit V14',
    SequelSequencingKit30: 'Sequel sequencing kit 3.0',
    SequelIiSequencingKit20: 'Sequel II sequencing kit 2.0'
} as const;
export type SequenceFilesSequencingKitEnum = typeof SequenceFilesSequencingKitEnum[keyof typeof SequenceFilesSequencingKitEnum];
/**
 * @export
 */
export const SequenceFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type SequenceFilesStatusEnum = typeof SequenceFilesStatusEnum[keyof typeof SequenceFilesStatusEnum];
/**
 * @export
 */
export const SequenceFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type SequenceFilesUploadStatusEnum = typeof SequenceFilesUploadStatusEnum[keyof typeof SequenceFilesUploadStatusEnum];
/**
 * @export
 */
export const SignalFilesFrameEnum = {
    Object: 'object'
} as const;
export type SignalFilesFrameEnum = typeof SignalFilesFrameEnum[keyof typeof SignalFilesFrameEnum];
/**
 * @export
 */
export const SignalFilesAssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type SignalFilesAssemblyEnum = typeof SignalFilesAssemblyEnum[keyof typeof SignalFilesAssemblyEnum];
/**
 * @export
 */
export const SignalFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type SignalFilesAwardComponentEnum = typeof SignalFilesAwardComponentEnum[keyof typeof SignalFilesAwardComponentEnum];
/**
 * @export
 */
export const SignalFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type SignalFilesCollectionsEnum = typeof SignalFilesCollectionsEnum[keyof typeof SignalFilesCollectionsEnum];
/**
 * @export
 */
export const SignalFilesFileFormatEnum = {
    BigWig: 'bigWig'
} as const;
export type SignalFilesFileFormatEnum = typeof SignalFilesFileFormatEnum[keyof typeof SignalFilesFileFormatEnum];
/**
 * @export
 */
export const SignalFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type SignalFilesStatusEnum = typeof SignalFilesStatusEnum[keyof typeof SignalFilesStatusEnum];
/**
 * @export
 */
export const SignalFilesStrandSpecificityEnum = {
    Plus: 'plus',
    Minus: 'minus',
    Unstranded: 'unstranded'
} as const;
export type SignalFilesStrandSpecificityEnum = typeof SignalFilesStrandSpecificityEnum[keyof typeof SignalFilesStrandSpecificityEnum];
/**
 * @export
 */
export const SignalFilesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type SignalFilesTranscriptomeAnnotationEnum = typeof SignalFilesTranscriptomeAnnotationEnum[keyof typeof SignalFilesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const SignalFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type SignalFilesUploadStatusEnum = typeof SignalFilesUploadStatusEnum[keyof typeof SignalFilesUploadStatusEnum];
/**
 * @export
 */
export const SoftwareFrameEnum = {
    Object: 'object'
} as const;
export type SoftwareFrameEnum = typeof SoftwareFrameEnum[keyof typeof SoftwareFrameEnum];
/**
 * @export
 */
export const SoftwareAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type SoftwareAwardComponentEnum = typeof SoftwareAwardComponentEnum[keyof typeof SoftwareAwardComponentEnum];
/**
 * @export
 */
export const SoftwareStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type SoftwareStatusEnum = typeof SoftwareStatusEnum[keyof typeof SoftwareStatusEnum];
/**
 * @export
 */
export const SoftwareUsedByEnum = {
    ConsortiumAnalysis: 'consortium analysis',
    Dacc: 'DACC',
    ProcessingPipelines: 'processing pipelines'
} as const;
export type SoftwareUsedByEnum = typeof SoftwareUsedByEnum[keyof typeof SoftwareUsedByEnum];
/**
 * @export
 */
export const SoftwareVersionsFrameEnum = {
    Object: 'object'
} as const;
export type SoftwareVersionsFrameEnum = typeof SoftwareVersionsFrameEnum[keyof typeof SoftwareVersionsFrameEnum];
/**
 * @export
 */
export const SoftwareVersionsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type SoftwareVersionsAwardComponentEnum = typeof SoftwareVersionsAwardComponentEnum[keyof typeof SoftwareVersionsAwardComponentEnum];
/**
 * @export
 */
export const SoftwareVersionsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type SoftwareVersionsStatusEnum = typeof SoftwareVersionsStatusEnum[keyof typeof SoftwareVersionsStatusEnum];
/**
 * @export
 */
export const SourcesFrameEnum = {
    Object: 'object'
} as const;
export type SourcesFrameEnum = typeof SourcesFrameEnum[keyof typeof SourcesFrameEnum];
/**
 * @export
 */
export const SourcesStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type SourcesStatusEnum = typeof SourcesStatusEnum[keyof typeof SourcesStatusEnum];
/**
 * @export
 */
export const TabularFilesFrameEnum = {
    Object: 'object'
} as const;
export type TabularFilesFrameEnum = typeof TabularFilesFrameEnum[keyof typeof TabularFilesFrameEnum];
/**
 * @export
 */
export const TabularFilesAssemblyEnum = {
    Grch38: 'GRCh38',
    Grcm39: 'GRCm39'
} as const;
export type TabularFilesAssemblyEnum = typeof TabularFilesAssemblyEnum[keyof typeof TabularFilesAssemblyEnum];
/**
 * @export
 */
export const TabularFilesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type TabularFilesAwardComponentEnum = typeof TabularFilesAwardComponentEnum[keyof typeof TabularFilesAwardComponentEnum];
/**
 * @export
 */
export const TabularFilesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type TabularFilesCollectionsEnum = typeof TabularFilesCollectionsEnum[keyof typeof TabularFilesCollectionsEnum];
/**
 * @export
 */
export const TabularFilesFileFormatEnum = {
    Bed: 'bed',
    Csv: 'csv',
    Gtf: 'gtf',
    Tsv: 'tsv',
    Txt: 'txt',
    Vcf: 'vcf'
} as const;
export type TabularFilesFileFormatEnum = typeof TabularFilesFileFormatEnum[keyof typeof TabularFilesFileFormatEnum];
/**
 * @export
 */
export const TabularFilesFileFormatTypeEnum = {
    Bed12: 'bed12',
    Bed3: 'bed3',
    Bed32: 'bed3+',
    Bed5: 'bed5',
    Bed6: 'bed6',
    Bed62: 'bed6+',
    Bed9: 'bed9',
    Bed92: 'bed9+',
    MpraStarr: 'mpra_starr'
} as const;
export type TabularFilesFileFormatTypeEnum = typeof TabularFilesFileFormatTypeEnum[keyof typeof TabularFilesFileFormatTypeEnum];
/**
 * @export
 */
export const TabularFilesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TabularFilesStatusEnum = typeof TabularFilesStatusEnum[keyof typeof TabularFilesStatusEnum];
/**
 * @export
 */
export const TabularFilesTranscriptomeAnnotationEnum = {
    _40: 'GENCODE 40',
    _41: 'GENCODE 41',
    _42: 'GENCODE 42',
    _43: 'GENCODE 43',
    _44: 'GENCODE 44',
    _45: 'GENCODE 45',
    M30: 'GENCODE M30',
    M31: 'GENCODE M31',
    M32: 'GENCODE M32',
    M33: 'GENCODE M33',
    M34: 'GENCODE M34'
} as const;
export type TabularFilesTranscriptomeAnnotationEnum = typeof TabularFilesTranscriptomeAnnotationEnum[keyof typeof TabularFilesTranscriptomeAnnotationEnum];
/**
 * @export
 */
export const TabularFilesUploadStatusEnum = {
    Pending: 'pending',
    FileNotFound: 'file not found',
    Invalidated: 'invalidated',
    Validated: 'validated'
} as const;
export type TabularFilesUploadStatusEnum = typeof TabularFilesUploadStatusEnum[keyof typeof TabularFilesUploadStatusEnum];
/**
 * @export
 */
export const TechnicalSamplesFrameEnum = {
    Object: 'object'
} as const;
export type TechnicalSamplesFrameEnum = typeof TechnicalSamplesFrameEnum[keyof typeof TechnicalSamplesFrameEnum];
/**
 * @export
 */
export const TechnicalSamplesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type TechnicalSamplesAwardComponentEnum = typeof TechnicalSamplesAwardComponentEnum[keyof typeof TechnicalSamplesAwardComponentEnum];
/**
 * @export
 */
export const TechnicalSamplesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type TechnicalSamplesCollectionsEnum = typeof TechnicalSamplesCollectionsEnum[keyof typeof TechnicalSamplesCollectionsEnum];
/**
 * @export
 */
export const TechnicalSamplesFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TechnicalSamplesFileSetsStatusEnum = typeof TechnicalSamplesFileSetsStatusEnum[keyof typeof TechnicalSamplesFileSetsStatusEnum];
/**
 * @export
 */
export const TechnicalSamplesNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type TechnicalSamplesNucleicAcidDeliveryEnum = typeof TechnicalSamplesNucleicAcidDeliveryEnum[keyof typeof TechnicalSamplesNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const TechnicalSamplesSampleMaterialEnum = {
    Undefined: 'undefined',
    Inorganic: 'inorganic',
    Synthetic: 'synthetic',
    Organic: 'organic'
} as const;
export type TechnicalSamplesSampleMaterialEnum = typeof TechnicalSamplesSampleMaterialEnum[keyof typeof TechnicalSamplesSampleMaterialEnum];
/**
 * @export
 */
export const TechnicalSamplesStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type TechnicalSamplesStartingAmountUnitsEnum = typeof TechnicalSamplesStartingAmountUnitsEnum[keyof typeof TechnicalSamplesStartingAmountUnitsEnum];
/**
 * @export
 */
export const TechnicalSamplesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TechnicalSamplesStatusEnum = typeof TechnicalSamplesStatusEnum[keyof typeof TechnicalSamplesStatusEnum];
/**
 * @export
 */
export const TechnicalSamplesTaxaEnum = {
    SaccharomycesCerevisiae: 'Saccharomyces cerevisiae',
    HomoSapiens: 'Homo sapiens'
} as const;
export type TechnicalSamplesTaxaEnum = typeof TechnicalSamplesTaxaEnum[keyof typeof TechnicalSamplesTaxaEnum];
/**
 * @export
 */
export const TechnicalSamplesTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type TechnicalSamplesTimePostLibraryDeliveryUnitsEnum = typeof TechnicalSamplesTimePostLibraryDeliveryUnitsEnum[keyof typeof TechnicalSamplesTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const TissuesFrameEnum = {
    Object: 'object'
} as const;
export type TissuesFrameEnum = typeof TissuesFrameEnum[keyof typeof TissuesFrameEnum];
/**
 * @export
 */
export const TissuesAgeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;
export type TissuesAgeUnitsEnum = typeof TissuesAgeUnitsEnum[keyof typeof TissuesAgeUnitsEnum];
/**
 * @export
 */
export const TissuesAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type TissuesAwardComponentEnum = typeof TissuesAwardComponentEnum[keyof typeof TissuesAwardComponentEnum];
/**
 * @export
 */
export const TissuesCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type TissuesCollectionsEnum = typeof TissuesCollectionsEnum[keyof typeof TissuesCollectionsEnum];
/**
 * @export
 */
export const TissuesFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TissuesFileSetsStatusEnum = typeof TissuesFileSetsStatusEnum[keyof typeof TissuesFileSetsStatusEnum];
/**
 * @export
 */
export const TissuesModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type TissuesModificationsStatusEnum = typeof TissuesModificationsStatusEnum[keyof typeof TissuesModificationsStatusEnum];
/**
 * @export
 */
export const TissuesNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type TissuesNucleicAcidDeliveryEnum = typeof TissuesNucleicAcidDeliveryEnum[keyof typeof TissuesNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const TissuesPmiUnitsEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week'
} as const;
export type TissuesPmiUnitsEnum = typeof TissuesPmiUnitsEnum[keyof typeof TissuesPmiUnitsEnum];
/**
 * @export
 */
export const TissuesPreservationMethodEnum = {
    Cryopreservation: 'cryopreservation',
    FlashFreezing: 'flash-freezing'
} as const;
export type TissuesPreservationMethodEnum = typeof TissuesPreservationMethodEnum[keyof typeof TissuesPreservationMethodEnum];
/**
 * @export
 */
export const TissuesSexEnum = {
    Female: 'female',
    Male: 'male',
    Mixed: 'mixed',
    Unspecified: 'unspecified'
} as const;
export type TissuesSexEnum = typeof TissuesSexEnum[keyof typeof TissuesSexEnum];
/**
 * @export
 */
export const TissuesStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type TissuesStartingAmountUnitsEnum = typeof TissuesStartingAmountUnitsEnum[keyof typeof TissuesStartingAmountUnitsEnum];
/**
 * @export
 */
export const TissuesStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type TissuesStatusEnum = typeof TissuesStatusEnum[keyof typeof TissuesStatusEnum];
/**
 * @export
 */
export const TissuesTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type TissuesTaxaEnum = typeof TissuesTaxaEnum[keyof typeof TissuesTaxaEnum];
/**
 * @export
 */
export const TissuesTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type TissuesTimePostLibraryDeliveryUnitsEnum = typeof TissuesTimePostLibraryDeliveryUnitsEnum[keyof typeof TissuesTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const TissuesTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type TissuesTreatmentsPurposeEnum = typeof TissuesTreatmentsPurposeEnum[keyof typeof TissuesTreatmentsPurposeEnum];
/**
 * @export
 */
export const TissuesTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type TissuesTreatmentsStatusEnum = typeof TissuesTreatmentsStatusEnum[keyof typeof TissuesTreatmentsStatusEnum];
/**
 * @export
 */
export const TissuesTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type TissuesTreatmentsTreatmentTypeEnum = typeof TissuesTreatmentsTreatmentTypeEnum[keyof typeof TissuesTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const TreatmentsFrameEnum = {
    Object: 'object'
} as const;
export type TreatmentsFrameEnum = typeof TreatmentsFrameEnum[keyof typeof TreatmentsFrameEnum];
/**
 * @export
 */
export const TreatmentsAmountUnitsEnum = {
    MgKg: 'mg/kg',
    MgML: 'mg/mL',
    MM: 'mM',
    NgML: 'ng/mL',
    NM: 'nM',
    Percent: 'percent',
    GKg: 'μg/kg',
    GKg2: 'μg/kg',
    GML: 'μg/mL',
    M: 'μM',
    Kpa: 'kpa'
} as const;
export type TreatmentsAmountUnitsEnum = typeof TreatmentsAmountUnitsEnum[keyof typeof TreatmentsAmountUnitsEnum];
/**
 * @export
 */
export const TreatmentsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type TreatmentsAwardComponentEnum = typeof TreatmentsAwardComponentEnum[keyof typeof TreatmentsAwardComponentEnum];
/**
 * @export
 */
export const TreatmentsDurationUnitsEnum = {
    Second: 'second',
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day'
} as const;
export type TreatmentsDurationUnitsEnum = typeof TreatmentsDurationUnitsEnum[keyof typeof TreatmentsDurationUnitsEnum];
/**
 * @export
 */
export const TreatmentsPostTreatmentTimeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type TreatmentsPostTreatmentTimeUnitsEnum = typeof TreatmentsPostTreatmentTimeUnitsEnum[keyof typeof TreatmentsPostTreatmentTimeUnitsEnum];
/**
 * @export
 */
export const TreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type TreatmentsPurposeEnum = typeof TreatmentsPurposeEnum[keyof typeof TreatmentsPurposeEnum];
/**
 * @export
 */
export const TreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type TreatmentsStatusEnum = typeof TreatmentsStatusEnum[keyof typeof TreatmentsStatusEnum];
/**
 * @export
 */
export const TreatmentsTemperatureUnitsEnum = {
    Celsius: 'Celsius'
} as const;
export type TreatmentsTemperatureUnitsEnum = typeof TreatmentsTemperatureUnitsEnum[keyof typeof TreatmentsTemperatureUnitsEnum];
/**
 * @export
 */
export const TreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type TreatmentsTreatmentTypeEnum = typeof TreatmentsTreatmentTypeEnum[keyof typeof TreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const UsersFrameEnum = {
    Object: 'object'
} as const;
export type UsersFrameEnum = typeof UsersFrameEnum[keyof typeof UsersFrameEnum];
/**
 * @export
 */
export const UsersGroupsEnum = {
    Admin: 'admin',
    ReadOnlyAdmin: 'read-only-admin',
    Verified: 'verified'
} as const;
export type UsersGroupsEnum = typeof UsersGroupsEnum[keyof typeof UsersGroupsEnum];
/**
 * @export
 */
export const UsersJobTitleEnum = {
    PrincipalInvestigator: 'Principal Investigator',
    CoInvestigator: 'Co-Investigator',
    ProjectManager: 'Project Manager',
    Submitter: 'Submitter',
    PostDoc: 'Post Doc',
    DataWrangler: 'Data Wrangler',
    Scientist: 'Scientist',
    ComputationalScientist: 'Computational Scientist',
    SoftwareDeveloper: 'Software Developer',
    NhgriStaffMember: 'NHGRI staff member',
    Other: 'Other'
} as const;
export type UsersJobTitleEnum = typeof UsersJobTitleEnum[keyof typeof UsersJobTitleEnum];
/**
 * @export
 */
export const UsersStatusEnum = {
    Current: 'current',
    Deleted: 'deleted',
    Disabled: 'disabled'
} as const;
export type UsersStatusEnum = typeof UsersStatusEnum[keyof typeof UsersStatusEnum];
/**
 * @export
 */
export const UsersViewingGroupsEnum = {
    Community: 'community',
    Igvf: 'IGVF'
} as const;
export type UsersViewingGroupsEnum = typeof UsersViewingGroupsEnum[keyof typeof UsersViewingGroupsEnum];
/**
 * @export
 */
export const WholeOrganismsFrameEnum = {
    Object: 'object'
} as const;
export type WholeOrganismsFrameEnum = typeof WholeOrganismsFrameEnum[keyof typeof WholeOrganismsFrameEnum];
/**
 * @export
 */
export const WholeOrganismsAgeUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Year: 'year'
} as const;
export type WholeOrganismsAgeUnitsEnum = typeof WholeOrganismsAgeUnitsEnum[keyof typeof WholeOrganismsAgeUnitsEnum];
/**
 * @export
 */
export const WholeOrganismsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type WholeOrganismsAwardComponentEnum = typeof WholeOrganismsAwardComponentEnum[keyof typeof WholeOrganismsAwardComponentEnum];
/**
 * @export
 */
export const WholeOrganismsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type WholeOrganismsCollectionsEnum = typeof WholeOrganismsCollectionsEnum[keyof typeof WholeOrganismsCollectionsEnum];
/**
 * @export
 */
export const WholeOrganismsFileSetsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type WholeOrganismsFileSetsStatusEnum = typeof WholeOrganismsFileSetsStatusEnum[keyof typeof WholeOrganismsFileSetsStatusEnum];
/**
 * @export
 */
export const WholeOrganismsModificationsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type WholeOrganismsModificationsStatusEnum = typeof WholeOrganismsModificationsStatusEnum[keyof typeof WholeOrganismsModificationsStatusEnum];
/**
 * @export
 */
export const WholeOrganismsNucleicAcidDeliveryEnum = {
    Transfection: 'transfection',
    AdenoviralTransduction: 'adenoviral transduction',
    LentiviralTransduction: 'lentiviral transduction'
} as const;
export type WholeOrganismsNucleicAcidDeliveryEnum = typeof WholeOrganismsNucleicAcidDeliveryEnum[keyof typeof WholeOrganismsNucleicAcidDeliveryEnum];
/**
 * @export
 */
export const WholeOrganismsSexEnum = {
    Female: 'female',
    Male: 'male',
    Mixed: 'mixed',
    Unspecified: 'unspecified'
} as const;
export type WholeOrganismsSexEnum = typeof WholeOrganismsSexEnum[keyof typeof WholeOrganismsSexEnum];
/**
 * @export
 */
export const WholeOrganismsStartingAmountUnitsEnum = {
    Cells: 'cells',
    CellsMl: 'cells/ml',
    G: 'g',
    Items: 'items',
    Mg: 'mg',
    WholeAnimals: 'whole animals',
    WholeEmbryos: 'whole embryos',
    G2: 'μg',
    Ng: 'ng'
} as const;
export type WholeOrganismsStartingAmountUnitsEnum = typeof WholeOrganismsStartingAmountUnitsEnum[keyof typeof WholeOrganismsStartingAmountUnitsEnum];
/**
 * @export
 */
export const WholeOrganismsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type WholeOrganismsStatusEnum = typeof WholeOrganismsStatusEnum[keyof typeof WholeOrganismsStatusEnum];
/**
 * @export
 */
export const WholeOrganismsTaxaEnum = {
    HomoSapiens: 'Homo sapiens',
    MusMusculus: 'Mus musculus'
} as const;
export type WholeOrganismsTaxaEnum = typeof WholeOrganismsTaxaEnum[keyof typeof WholeOrganismsTaxaEnum];
/**
 * @export
 */
export const WholeOrganismsTimePostLibraryDeliveryUnitsEnum = {
    Minute: 'minute',
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type WholeOrganismsTimePostLibraryDeliveryUnitsEnum = typeof WholeOrganismsTimePostLibraryDeliveryUnitsEnum[keyof typeof WholeOrganismsTimePostLibraryDeliveryUnitsEnum];
/**
 * @export
 */
export const WholeOrganismsTreatmentsPurposeEnum = {
    Activation: 'activation',
    Agonist: 'agonist',
    Antagonist: 'antagonist',
    Control: 'control',
    Differentiation: 'differentiation',
    DeDifferentiation: 'de-differentiation',
    Perturbation: 'perturbation',
    Selection: 'selection',
    Stimulation: 'stimulation'
} as const;
export type WholeOrganismsTreatmentsPurposeEnum = typeof WholeOrganismsTreatmentsPurposeEnum[keyof typeof WholeOrganismsTreatmentsPurposeEnum];
/**
 * @export
 */
export const WholeOrganismsTreatmentsStatusEnum = {
    Archived: 'archived',
    Deleted: 'deleted',
    InProgress: 'in progress',
    Released: 'released'
} as const;
export type WholeOrganismsTreatmentsStatusEnum = typeof WholeOrganismsTreatmentsStatusEnum[keyof typeof WholeOrganismsTreatmentsStatusEnum];
/**
 * @export
 */
export const WholeOrganismsTreatmentsTreatmentTypeEnum = {
    Chemical: 'chemical',
    Protein: 'protein',
    Environmental: 'environmental'
} as const;
export type WholeOrganismsTreatmentsTreatmentTypeEnum = typeof WholeOrganismsTreatmentsTreatmentTypeEnum[keyof typeof WholeOrganismsTreatmentsTreatmentTypeEnum];
/**
 * @export
 */
export const WorkflowsFrameEnum = {
    Object: 'object'
} as const;
export type WorkflowsFrameEnum = typeof WorkflowsFrameEnum[keyof typeof WorkflowsFrameEnum];
/**
 * @export
 */
export const WorkflowsAwardComponentEnum = {
    Affiliate: 'affiliate',
    DataAnalysis: 'data analysis',
    DataCoordination: 'data coordination',
    FunctionalCharacterization: 'functional characterization',
    Mapping: 'mapping',
    Networks: 'networks',
    PredictiveModeling: 'predictive modeling'
} as const;
export type WorkflowsAwardComponentEnum = typeof WorkflowsAwardComponentEnum[keyof typeof WorkflowsAwardComponentEnum];
/**
 * @export
 */
export const WorkflowsCollectionsEnum = {
    ClinGen: 'ClinGen',
    Encode: 'ENCODE',
    GregoR: 'GREGoR',
    IgvfCatalogBetaV01: 'IGVF_catalog_beta_v0.1',
    IgvfCatalogBetaV02: 'IGVF_catalog_beta_v0.2',
    IgvfCatalogBetaV03: 'IGVF_catalog_beta_v0.3',
    IgvfCatalogBetaV04: 'IGVF_catalog_beta_v0.4',
    MaveDb: 'MaveDB',
    MprAbase: 'MPRAbase',
    Vista: 'Vista'
} as const;
export type WorkflowsCollectionsEnum = typeof WorkflowsCollectionsEnum[keyof typeof WorkflowsCollectionsEnum];
/**
 * @export
 */
export const WorkflowsStatusEnum = {
    InProgress: 'in progress',
    Released: 'released',
    Deleted: 'deleted',
    Replaced: 'replaced',
    Revoked: 'revoked',
    Archived: 'archived'
} as const;
export type WorkflowsStatusEnum = typeof WorkflowsStatusEnum[keyof typeof WorkflowsStatusEnum];
