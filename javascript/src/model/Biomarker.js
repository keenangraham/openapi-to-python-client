/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Biomarker model module.
 * @module model/Biomarker
 * @version 0.1.0
 */
class Biomarker {
    /**
     * Constructs a new <code>Biomarker</code>.
     * A biomarker, such as a cell surface protein, that is measured, detected, or used for sample sorting based upon the biomarker&#39;s presence, absence, or quantification. For example, a CD19 positive biomarker that was detected in a sample.
     * @alias module:model/Biomarker
     */
    constructor() { 
        
        Biomarker.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Biomarker</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Biomarker} obj Optional instance to populate.
     * @return {module:model/Biomarker} The populated <code>Biomarker</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Biomarker();

            if (data.hasOwnProperty('release_timestamp')) {
                obj['release_timestamp'] = ApiClient.convertToType(data['release_timestamp'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ApiClient.convertToType(data['lab'], 'String');
            }
            if (data.hasOwnProperty('award')) {
                obj['award'] = ApiClient.convertToType(data['award'], 'String');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'String');
            }
            if (data.hasOwnProperty('quantification')) {
                obj['quantification'] = ApiClient.convertToType(data['quantification'], 'String');
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], ['String']);
            }
            if (data.hasOwnProperty('gene')) {
                obj['gene'] = ApiClient.convertToType(data['gene'], 'String');
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('name_quantification')) {
                obj['name_quantification'] = ApiClient.convertToType(data['name_quantification'], 'String');
            }
            if (data.hasOwnProperty('biomarker_for')) {
                obj['biomarker_for'] = ApiClient.convertToType(data['biomarker_for'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Biomarker</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Biomarker</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['release_timestamp'] && !(typeof data['release_timestamp'] === 'string' || data['release_timestamp'] instanceof String)) {
            throw new Error("Expected the field `release_timestamp` to be a primitive type in the JSON string but got " + data['release_timestamp']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['lab'] && !(typeof data['lab'] === 'string' || data['lab'] instanceof String)) {
            throw new Error("Expected the field `lab` to be a primitive type in the JSON string but got " + data['lab']);
        }
        // ensure the json data is a string
        if (data['award'] && !(typeof data['award'] === 'string' || data['award'] instanceof String)) {
            throw new Error("Expected the field `award` to be a primitive type in the JSON string but got " + data['award']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['classification'] && !(typeof data['classification'] === 'string' || data['classification'] instanceof String)) {
            throw new Error("Expected the field `classification` to be a primitive type in the JSON string but got " + data['classification']);
        }
        // ensure the json data is a string
        if (data['quantification'] && !(typeof data['quantification'] === 'string' || data['quantification'] instanceof String)) {
            throw new Error("Expected the field `quantification` to be a primitive type in the JSON string but got " + data['quantification']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['synonyms'])) {
            throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
        }
        // ensure the json data is a string
        if (data['gene'] && !(typeof data['gene'] === 'string' || data['gene'] instanceof String)) {
            throw new Error("Expected the field `gene` to be a primitive type in the JSON string but got " + data['gene']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['name_quantification'] && !(typeof data['name_quantification'] === 'string' || data['name_quantification'] instanceof String)) {
            throw new Error("Expected the field `name_quantification` to be a primitive type in the JSON string but got " + data['name_quantification']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['biomarker_for'])) {
            throw new Error("Expected the field `biomarker_for` to be an array in the JSON data but got " + data['biomarker_for']);
        }

        return true;
    }


}



/**
 * The date the object was released.
 * @member {String} release_timestamp
 */
Biomarker.prototype['release_timestamp'] = undefined;

/**
 * The status of the metadata object.
 * @member {module:model/Biomarker.StatusEnum} status
 */
Biomarker.prototype['status'] = undefined;

/**
 * Lab associated with the submission.
 * @member {String} lab
 */
Biomarker.prototype['lab'] = undefined;

/**
 * Grant associated with the submission.
 * @member {String} award
 */
Biomarker.prototype['award'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
Biomarker.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
Biomarker.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
Biomarker.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
Biomarker.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
Biomarker.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
Biomarker.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
Biomarker.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
Biomarker.prototype['description'] = undefined;

/**
 * The biomarker name.
 * @member {String} name
 */
Biomarker.prototype['name'] = undefined;

/**
 * Sample specific biomarker.
 * @member {module:model/Biomarker.ClassificationEnum} classification
 */
Biomarker.prototype['classification'] = undefined;

/**
 * The biomarker association to the biosample, disease or other condition.  This can be the absence of the biomarker or the presence of the biomarker in some low, intermediate or high quantity.
 * @member {module:model/Biomarker.QuantificationEnum} quantification
 */
Biomarker.prototype['quantification'] = undefined;

/**
 * Alternate names for this biomarker.
 * @member {Array.<String>} synonyms
 */
Biomarker.prototype['synonyms'] = undefined;

/**
 * Biomarker gene.
 * @member {String} gene
 */
Biomarker.prototype['gene'] = undefined;

/**
 * @member {String} @id
 */
Biomarker.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
Biomarker.prototype['@type'] = undefined;

/**
 * A summary of the object.
 * @member {String} summary
 */
Biomarker.prototype['summary'] = undefined;

/**
 * A concatenation of the name and quantification of the biomarker.
 * @member {String} name_quantification
 */
Biomarker.prototype['name_quantification'] = undefined;

/**
 * The samples which have been confirmed to have this biomarker.
 * @member {Array.<String>} biomarker_for
 */
Biomarker.prototype['biomarker_for'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Biomarker['StatusEnum'] = {

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "in progress"
     * @const
     */
    "in progress": "in progress",

    /**
     * value: "released"
     * @const
     */
    "released": "released"
};


/**
 * Allowed values for the <code>classification</code> property.
 * @enum {String}
 * @readonly
 */
Biomarker['ClassificationEnum'] = {

    /**
     * value: "cell surface protein"
     * @const
     */
    "cell surface protein": "cell surface protein",

    /**
     * value: "marker gene"
     * @const
     */
    "marker gene": "marker gene"
};


/**
 * Allowed values for the <code>quantification</code> property.
 * @enum {String}
 * @readonly
 */
Biomarker['QuantificationEnum'] = {

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative",

    /**
     * value: "positive"
     * @const
     */
    "positive": "positive",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "intermediate"
     * @const
     */
    "intermediate": "intermediate",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};



export default Biomarker;

