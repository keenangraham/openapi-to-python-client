/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CrisprModification model module.
 * @module model/CrisprModification
 * @version 0.1.0
 */
class CrisprModification {
    /**
     * Constructs a new <code>CrisprModification</code>.
     * A CRISPR modification altering sample genomic material. For example, CRISPRi dCas9-KRAB modification.
     * @alias module:model/CrisprModification
     */
    constructor() { 
        
        CrisprModification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CrisprModification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CrisprModification} obj Optional instance to populate.
     * @return {module:model/CrisprModification} The populated <code>CrisprModification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CrisprModification();

            if (data.hasOwnProperty('release_timestamp')) {
                obj['release_timestamp'] = ApiClient.convertToType(data['release_timestamp'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('lot_id')) {
                obj['lot_id'] = ApiClient.convertToType(data['lot_id'], 'String');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'String');
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ApiClient.convertToType(data['lab'], 'String');
            }
            if (data.hasOwnProperty('award')) {
                obj['award'] = ApiClient.convertToType(data['award'], 'String');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('activated')) {
                obj['activated'] = ApiClient.convertToType(data['activated'], 'Boolean');
            }
            if (data.hasOwnProperty('activating_agent_term_id')) {
                obj['activating_agent_term_id'] = ApiClient.convertToType(data['activating_agent_term_id'], 'String');
            }
            if (data.hasOwnProperty('activating_agent_term_name')) {
                obj['activating_agent_term_name'] = ApiClient.convertToType(data['activating_agent_term_name'], 'String');
            }
            if (data.hasOwnProperty('modality')) {
                obj['modality'] = ApiClient.convertToType(data['modality'], 'String');
            }
            if (data.hasOwnProperty('cas')) {
                obj['cas'] = ApiClient.convertToType(data['cas'], 'String');
            }
            if (data.hasOwnProperty('fused_domain')) {
                obj['fused_domain'] = ApiClient.convertToType(data['fused_domain'], 'String');
            }
            if (data.hasOwnProperty('tagged_protein')) {
                obj['tagged_protein'] = ApiClient.convertToType(data['tagged_protein'], 'String');
            }
            if (data.hasOwnProperty('cas_species')) {
                obj['cas_species'] = ApiClient.convertToType(data['cas_species'], 'String');
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('biosamples_modified')) {
                obj['biosamples_modified'] = ApiClient.convertToType(data['biosamples_modified'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CrisprModification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CrisprModification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['release_timestamp'] && !(typeof data['release_timestamp'] === 'string' || data['release_timestamp'] instanceof String)) {
            throw new Error("Expected the field `release_timestamp` to be a primitive type in the JSON string but got " + data['release_timestamp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['lot_id'] && !(typeof data['lot_id'] === 'string' || data['lot_id'] instanceof String)) {
            throw new Error("Expected the field `lot_id` to be a primitive type in the JSON string but got " + data['lot_id']);
        }
        // ensure the json data is a string
        if (data['product_id'] && !(typeof data['product_id'] === 'string' || data['product_id'] instanceof String)) {
            throw new Error("Expected the field `product_id` to be a primitive type in the JSON string but got " + data['product_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documents'])) {
            throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['lab'] && !(typeof data['lab'] === 'string' || data['lab'] instanceof String)) {
            throw new Error("Expected the field `lab` to be a primitive type in the JSON string but got " + data['lab']);
        }
        // ensure the json data is a string
        if (data['award'] && !(typeof data['award'] === 'string' || data['award'] instanceof String)) {
            throw new Error("Expected the field `award` to be a primitive type in the JSON string but got " + data['award']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['activating_agent_term_id'] && !(typeof data['activating_agent_term_id'] === 'string' || data['activating_agent_term_id'] instanceof String)) {
            throw new Error("Expected the field `activating_agent_term_id` to be a primitive type in the JSON string but got " + data['activating_agent_term_id']);
        }
        // ensure the json data is a string
        if (data['activating_agent_term_name'] && !(typeof data['activating_agent_term_name'] === 'string' || data['activating_agent_term_name'] instanceof String)) {
            throw new Error("Expected the field `activating_agent_term_name` to be a primitive type in the JSON string but got " + data['activating_agent_term_name']);
        }
        // ensure the json data is a string
        if (data['modality'] && !(typeof data['modality'] === 'string' || data['modality'] instanceof String)) {
            throw new Error("Expected the field `modality` to be a primitive type in the JSON string but got " + data['modality']);
        }
        // ensure the json data is a string
        if (data['cas'] && !(typeof data['cas'] === 'string' || data['cas'] instanceof String)) {
            throw new Error("Expected the field `cas` to be a primitive type in the JSON string but got " + data['cas']);
        }
        // ensure the json data is a string
        if (data['fused_domain'] && !(typeof data['fused_domain'] === 'string' || data['fused_domain'] instanceof String)) {
            throw new Error("Expected the field `fused_domain` to be a primitive type in the JSON string but got " + data['fused_domain']);
        }
        // ensure the json data is a string
        if (data['tagged_protein'] && !(typeof data['tagged_protein'] === 'string' || data['tagged_protein'] instanceof String)) {
            throw new Error("Expected the field `tagged_protein` to be a primitive type in the JSON string but got " + data['tagged_protein']);
        }
        // ensure the json data is a string
        if (data['cas_species'] && !(typeof data['cas_species'] === 'string' || data['cas_species'] instanceof String)) {
            throw new Error("Expected the field `cas_species` to be a primitive type in the JSON string but got " + data['cas_species']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['biosamples_modified'])) {
            throw new Error("Expected the field `biosamples_modified` to be an array in the JSON data but got " + data['biosamples_modified']);
        }

        return true;
    }


}



/**
 * The date the object was released.
 * @member {String} release_timestamp
 */
CrisprModification.prototype['release_timestamp'] = undefined;

/**
 * The originating lab(s) or vendor(s).
 * @member {Array.<String>} sources
 */
CrisprModification.prototype['sources'] = undefined;

/**
 * The lot identifier provided by the originating lab or vendor.
 * @member {String} lot_id
 */
CrisprModification.prototype['lot_id'] = undefined;

/**
 * The product or catalog identifier provided following deposition to addgene.org.
 * @member {String} product_id
 */
CrisprModification.prototype['product_id'] = undefined;

/**
 * Documents that provide additional information (not data file).
 * @member {Array.<String>} documents
 */
CrisprModification.prototype['documents'] = undefined;

/**
 * The status of the metadata object.
 * @member {module:model/CrisprModification.StatusEnum} status
 */
CrisprModification.prototype['status'] = undefined;

/**
 * Lab associated with the submission.
 * @member {String} lab
 */
CrisprModification.prototype['lab'] = undefined;

/**
 * Grant associated with the submission.
 * @member {String} award
 */
CrisprModification.prototype['award'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
CrisprModification.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
CrisprModification.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
CrisprModification.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
CrisprModification.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
CrisprModification.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
CrisprModification.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
CrisprModification.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
CrisprModification.prototype['description'] = undefined;

/**
 * A boolean indicating whether the modification has been activated by a chemical agent.
 * @member {Boolean} activated
 */
CrisprModification.prototype['activated'] = undefined;

/**
 * The CHEBI identifier for the activating agent of the modification.
 * @member {String} activating_agent_term_id
 */
CrisprModification.prototype['activating_agent_term_id'] = undefined;

/**
 * The CHEBI name for the activating agent of the modification.
 * @member {String} activating_agent_term_name
 */
CrisprModification.prototype['activating_agent_term_name'] = undefined;

/**
 * The purpose or intended effect of a modification.
 * @member {module:model/CrisprModification.ModalityEnum} modality
 */
CrisprModification.prototype['modality'] = undefined;

/**
 * The name of the CRISPR associated protein used in the modification.
 * @member {module:model/CrisprModification.CasEnum} cas
 */
CrisprModification.prototype['cas'] = undefined;

/**
 * The name of the molecule fused to a Cas protein.
 * @member {module:model/CrisprModification.FusedDomainEnum} fused_domain
 */
CrisprModification.prototype['fused_domain'] = undefined;

/**
 * The tagged protein in modifications in which the Cas nuclease is fused to an antibody.
 * @member {String} tagged_protein
 */
CrisprModification.prototype['tagged_protein'] = undefined;

/**
 * The originating species of the Cas nuclease.
 * @member {module:model/CrisprModification.CasSpeciesEnum} cas_species
 */
CrisprModification.prototype['cas_species'] = undefined;

/**
 * @member {String} @id
 */
CrisprModification.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
CrisprModification.prototype['@type'] = undefined;

/**
 * @member {String} summary
 */
CrisprModification.prototype['summary'] = undefined;

/**
 * The biosamples which have been modified with this modification.
 * @member {Array.<String>} biosamples_modified
 */
CrisprModification.prototype['biosamples_modified'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CrisprModification['StatusEnum'] = {

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "in progress"
     * @const
     */
    "in progress": "in progress",

    /**
     * value: "released"
     * @const
     */
    "released": "released"
};


/**
 * Allowed values for the <code>modality</code> property.
 * @enum {String}
 * @readonly
 */
CrisprModification['ModalityEnum'] = {

    /**
     * value: "activation"
     * @const
     */
    "activation": "activation",

    /**
     * value: "base editing"
     * @const
     */
    "base editing": "base editing",

    /**
     * value: "cutting"
     * @const
     */
    "cutting": "cutting",

    /**
     * value: "interference"
     * @const
     */
    "interference": "interference",

    /**
     * value: "knockout"
     * @const
     */
    "knockout": "knockout",

    /**
     * value: "localizing"
     * @const
     */
    "localizing": "localizing",

    /**
     * value: "prime editing"
     * @const
     */
    "prime editing": "prime editing"
};


/**
 * Allowed values for the <code>cas</code> property.
 * @enum {String}
 * @readonly
 */
CrisprModification['CasEnum'] = {

    /**
     * value: "Cas9"
     * @const
     */
    "Cas9": "Cas9",

    /**
     * value: "Cas12a"
     * @const
     */
    "Cas12a": "Cas12a",

    /**
     * value: "Cas13"
     * @const
     */
    "Cas13": "Cas13",

    /**
     * value: "dCas9"
     * @const
     */
    "dCas9": "dCas9",

    /**
     * value: "nCas9"
     * @const
     */
    "nCas9": "nCas9",

    /**
     * value: "SpG"
     * @const
     */
    "SpG": "SpG",

    /**
     * value: "SpRY"
     * @const
     */
    "SpRY": "SpRY"
};


/**
 * Allowed values for the <code>fused_domain</code> property.
 * @enum {String}
 * @readonly
 */
CrisprModification['FusedDomainEnum'] = {

    /**
     * value: "2xVP64"
     * @const
     */
    "2xVP64": "2xVP64",

    /**
     * value: "3xVP64"
     * @const
     */
    "3xVP64": "3xVP64",

    /**
     * value: "ABE8e"
     * @const
     */
    "ABE8e": "ABE8e",

    /**
     * value: "ABE8.20"
     * @const
     */
    "ABE8.20": "ABE8.20",

    /**
     * value: "ANTI-FLAG"
     * @const
     */
    "ANTI-FLAG": "ANTI-FLAG",

    /**
     * value: "BE4"
     * @const
     */
    "BE4": "BE4",

    /**
     * value: "BE4max"
     * @const
     */
    "BE4max": "BE4max",

    /**
     * value: "eA3A"
     * @const
     */
    "eA3A": "eA3A",

    /**
     * value: "eA3A-T31A"
     * @const
     */
    "eA3A-T31A": "eA3A-T31A",

    /**
     * value: "eA3A-T44D-S45A"
     * @const
     */
    "eA3A-T44D-S45A": "eA3A-T44D-S45A",

    /**
     * value: "KOX1-KRAB"
     * @const
     */
    "KOX1-KRAB": "KOX1-KRAB",

    /**
     * value: "M-MLV RT (PE2)"
     * @const
     */
    "M-MLV RT (PE2)": "M-MLV RT (PE2)",

    /**
     * value: "p300"
     * @const
     */
    "p300": "p300",

    /**
     * value: "TdCBE"
     * @const
     */
    "TdCBE": "TdCBE",

    /**
     * value: "TdCGBE"
     * @const
     */
    "TdCGBE": "TdCGBE",

    /**
     * value: "TdDE"
     * @const
     */
    "TdDE": "TdDE",

    /**
     * value: "VPH"
     * @const
     */
    "VPH": "VPH",

    /**
     * value: "VP64"
     * @const
     */
    "VP64": "VP64",

    /**
     * value: "VP64-p65-Rta (VPR)"
     * @const
     */
    "VP64-p65-Rta (VPR)": "VP64-p65-Rta (VPR)",

    /**
     * value: "ZIM3-KRAB"
     * @const
     */
    "ZIM3-KRAB": "ZIM3-KRAB"
};


/**
 * Allowed values for the <code>cas_species</code> property.
 * @enum {String}
 * @readonly
 */
CrisprModification['CasSpeciesEnum'] = {

    /**
     * value: "Streptococcus pyogenes (Sp)"
     * @const
     */
    "Streptococcus pyogenes (Sp)": "Streptococcus pyogenes (Sp)",

    /**
     * value: "Staphylococcus aureus (Sa)"
     * @const
     */
    "Staphylococcus aureus (Sa)": "Staphylococcus aureus (Sa)",

    /**
     * value: "Campylobacter jejuni (Cj)"
     * @const
     */
    "Campylobacter jejuni (Cj)": "Campylobacter jejuni (Cj)",

    /**
     * value: "Neisseria meningitidis (Nm)"
     * @const
     */
    "Neisseria meningitidis (Nm)": "Neisseria meningitidis (Nm)"
};



export default CrisprModification;

