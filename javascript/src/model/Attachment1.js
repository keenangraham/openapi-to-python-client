/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attachment1 model module.
 * @module model/Attachment1
 * @version 0.1.0
 */
class Attachment1 {
    /**
     * Constructs a new <code>Attachment1</code>.
     * The attached content.
     * @alias module:model/Attachment1
     */
    constructor() { 
        
        Attachment1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attachment1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment1} obj Optional instance to populate.
     * @return {module:model/Attachment1} The populated <code>Attachment1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment1();

            if (data.hasOwnProperty('download')) {
                obj['download'] = ApiClient.convertToType(data['download'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('md5sum')) {
                obj['md5sum'] = ApiClient.convertToType(data['md5sum'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['download'] && !(typeof data['download'] === 'string' || data['download'] instanceof String)) {
            throw new Error("Expected the field `download` to be a primitive type in the JSON string but got " + data['download']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['md5sum'] && !(typeof data['md5sum'] === 'string' || data['md5sum'] instanceof String)) {
            throw new Error("Expected the field `md5sum` to be a primitive type in the JSON string but got " + data['md5sum']);
        }

        return true;
    }


}



/**
 * @member {String} download
 */
Attachment1.prototype['download'] = undefined;

/**
 * @member {String} href
 */
Attachment1.prototype['href'] = undefined;

/**
 * @member {module:model/Attachment1.TypeEnum} type
 */
Attachment1.prototype['type'] = undefined;

/**
 * @member {String} md5sum
 */
Attachment1.prototype['md5sum'] = undefined;

/**
 * @member {Number} size
 */
Attachment1.prototype['size'] = undefined;

/**
 * @member {Number} width
 */
Attachment1.prototype['width'] = undefined;

/**
 * @member {Number} height
 */
Attachment1.prototype['height'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Attachment1['TypeEnum'] = {

    /**
     * value: "image/png"
     * @const
     */
    "png": "image/png",

    /**
     * value: "image/jpeg"
     * @const
     */
    "jpeg": "image/jpeg",

    /**
     * value: "image/gif"
     * @const
     */
    "gif": "image/gif"
};



export default Attachment1;

