/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RelatedDonor model module.
 * @module model/RelatedDonor
 * @version 0.1.0
 */
class RelatedDonor {
    /**
     * Constructs a new <code>RelatedDonor</code>.
     * Familial relation of this donor.
     * @alias module:model/RelatedDonor
     * @param donor {String} An identifier for the related donor.
     * @param relationshipType {module:model/RelatedDonor.RelationshipTypeEnum} A descriptive term for the related donor’s relationship to this donor.
     */
    constructor(donor, relationshipType) { 
        
        RelatedDonor.initialize(this, donor, relationshipType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, donor, relationshipType) { 
        obj['donor'] = donor;
        obj['relationship_type'] = relationshipType;
    }

    /**
     * Constructs a <code>RelatedDonor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelatedDonor} obj Optional instance to populate.
     * @return {module:model/RelatedDonor} The populated <code>RelatedDonor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelatedDonor();

            if (data.hasOwnProperty('donor')) {
                obj['donor'] = ApiClient.convertToType(data['donor'], 'String');
            }
            if (data.hasOwnProperty('relationship_type')) {
                obj['relationship_type'] = ApiClient.convertToType(data['relationship_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelatedDonor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelatedDonor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RelatedDonor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['donor'] && !(typeof data['donor'] === 'string' || data['donor'] instanceof String)) {
            throw new Error("Expected the field `donor` to be a primitive type in the JSON string but got " + data['donor']);
        }
        // ensure the json data is a string
        if (data['relationship_type'] && !(typeof data['relationship_type'] === 'string' || data['relationship_type'] instanceof String)) {
            throw new Error("Expected the field `relationship_type` to be a primitive type in the JSON string but got " + data['relationship_type']);
        }

        return true;
    }


}

RelatedDonor.RequiredProperties = ["donor", "relationship_type"];

/**
 * An identifier for the related donor.
 * @member {String} donor
 */
RelatedDonor.prototype['donor'] = undefined;

/**
 * A descriptive term for the related donor’s relationship to this donor.
 * @member {module:model/RelatedDonor.RelationshipTypeEnum} relationship_type
 */
RelatedDonor.prototype['relationship_type'] = undefined;





/**
 * Allowed values for the <code>relationship_type</code> property.
 * @enum {String}
 * @readonly
 */
RelatedDonor['RelationshipTypeEnum'] = {

    /**
     * value: "aunt"
     * @const
     */
    "aunt": "aunt",

    /**
     * value: "child"
     * @const
     */
    "child": "child",

    /**
     * value: "first cousin once removed"
     * @const
     */
    "first cousin once removed": "first cousin once removed",

    /**
     * value: "first cousin"
     * @const
     */
    "first cousin": "first cousin",

    /**
     * value: "fraternal twin"
     * @const
     */
    "fraternal twin": "fraternal twin",

    /**
     * value: "grandparent"
     * @const
     */
    "grandparent": "grandparent",

    /**
     * value: "half-sibling"
     * @const
     */
    "half-sibling": "half-sibling",

    /**
     * value: "niece"
     * @const
     */
    "niece": "niece",

    /**
     * value: "nephew"
     * @const
     */
    "nephew": "nephew",

    /**
     * value: "parent"
     * @const
     */
    "parent": "parent",

    /**
     * value: "paternal twin"
     * @const
     */
    "paternal twin": "paternal twin",

    /**
     * value: "sibling"
     * @const
     */
    "sibling": "sibling",

    /**
     * value: "second cousin"
     * @const
     */
    "second cousin": "second cousin",

    /**
     * value: "uncle"
     * @const
     */
    "uncle": "uncle"
};



export default RelatedDonor;

