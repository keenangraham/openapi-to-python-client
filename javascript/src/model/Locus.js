/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Locus model module.
 * @module model/Locus
 * @version 0.1.0
 */
class Locus {
    /**
     * Constructs a new <code>Locus</code>.
     * @alias module:model/Locus
     * @param assembly {module:model/Locus.AssemblyEnum} The genome assembly to which coordinates relate (e.g., GRCh38).
     * @param chromosome {String} The number (or letter) designation for the chromosome, e.g. chr1 or chrX
     * @param start {Number} The 1-based, closed (inclusive) starting coordinate.
     * @param end {Number} The 1-based, closed (inclusive) ending coordinate.
     */
    constructor(assembly, chromosome, start, end) { 
        
        Locus.initialize(this, assembly, chromosome, start, end);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assembly, chromosome, start, end) { 
        obj['assembly'] = assembly;
        obj['chromosome'] = chromosome;
        obj['start'] = start;
        obj['end'] = end;
    }

    /**
     * Constructs a <code>Locus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Locus} obj Optional instance to populate.
     * @return {module:model/Locus} The populated <code>Locus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Locus();

            if (data.hasOwnProperty('assembly')) {
                obj['assembly'] = ApiClient.convertToType(data['assembly'], 'String');
            }
            if (data.hasOwnProperty('chromosome')) {
                obj['chromosome'] = ApiClient.convertToType(data['chromosome'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Locus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Locus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Locus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assembly'] && !(typeof data['assembly'] === 'string' || data['assembly'] instanceof String)) {
            throw new Error("Expected the field `assembly` to be a primitive type in the JSON string but got " + data['assembly']);
        }
        // ensure the json data is a string
        if (data['chromosome'] && !(typeof data['chromosome'] === 'string' || data['chromosome'] instanceof String)) {
            throw new Error("Expected the field `chromosome` to be a primitive type in the JSON string but got " + data['chromosome']);
        }

        return true;
    }


}

Locus.RequiredProperties = ["assembly", "chromosome", "start", "end"];

/**
 * The genome assembly to which coordinates relate (e.g., GRCh38).
 * @member {module:model/Locus.AssemblyEnum} assembly
 */
Locus.prototype['assembly'] = undefined;

/**
 * The number (or letter) designation for the chromosome, e.g. chr1 or chrX
 * @member {String} chromosome
 */
Locus.prototype['chromosome'] = undefined;

/**
 * The 1-based, closed (inclusive) starting coordinate.
 * @member {Number} start
 */
Locus.prototype['start'] = undefined;

/**
 * The 1-based, closed (inclusive) ending coordinate.
 * @member {Number} end
 */
Locus.prototype['end'] = undefined;





/**
 * Allowed values for the <code>assembly</code> property.
 * @enum {String}
 * @readonly
 */
Locus['AssemblyEnum'] = {

    /**
     * value: "GRCh38"
     * @const
     */
    "GRCh38": "GRCh38",

    /**
     * value: "GRCm39"
     * @const
     */
    "GRCm39": "GRCm39"
};



export default Locus;

