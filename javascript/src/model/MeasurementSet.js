/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MeasurementSet model module.
 * @module model/MeasurementSet
 * @version 0.1.0
 */
class MeasurementSet {
    /**
     * Constructs a new <code>MeasurementSet</code>.
     * Measurement set is a file set that hosts raw data files (e.g. FASTQs) resulting from sequencing of a library prepared from the nucleic acids of the sample that is the main target of the assay. For example sequencing of accessible regions in the genome, or sequencing of the transcriptome of the sample. The assay can either be bulk or single cell type. The sample specific raw sequencing results will be captured in the measurement sets. The files in the measurement sets are specific to the sample being investigated. See auxiliary sets for files that are not a direct result of sequencing the sample under investigation.
     * @alias module:model/MeasurementSet
     */
    constructor() { 
        
        MeasurementSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeasurementSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementSet} obj Optional instance to populate.
     * @return {module:model/MeasurementSet} The populated <code>MeasurementSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementSet();

            if (data.hasOwnProperty('release_timestamp')) {
                obj['release_timestamp'] = ApiClient.convertToType(data['release_timestamp'], 'String');
            }
            if (data.hasOwnProperty('publications')) {
                obj['publications'] = ApiClient.convertToType(data['publications'], ['String']);
            }
            if (data.hasOwnProperty('publication_identifiers')) {
                obj['publication_identifiers'] = ApiClient.convertToType(data['publication_identifiers'], ['String']);
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], ['String']);
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ApiClient.convertToType(data['lab'], 'String');
            }
            if (data.hasOwnProperty('award')) {
                obj['award'] = ApiClient.convertToType(data['award'], 'String');
            }
            if (data.hasOwnProperty('accession')) {
                obj['accession'] = ApiClient.convertToType(data['accession'], 'String');
            }
            if (data.hasOwnProperty('alternate_accessions')) {
                obj['alternate_accessions'] = ApiClient.convertToType(data['alternate_accessions'], ['String']);
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('revoke_detail')) {
                obj['revoke_detail'] = ApiClient.convertToType(data['revoke_detail'], 'String');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dbxrefs')) {
                obj['dbxrefs'] = ApiClient.convertToType(data['dbxrefs'], ['String']);
            }
            if (data.hasOwnProperty('samples')) {
                obj['samples'] = ApiClient.convertToType(data['samples'], ['String']);
            }
            if (data.hasOwnProperty('donors')) {
                obj['donors'] = ApiClient.convertToType(data['donors'], ['String']);
            }
            if (data.hasOwnProperty('file_set_type')) {
                obj['file_set_type'] = ApiClient.convertToType(data['file_set_type'], 'String');
            }
            if (data.hasOwnProperty('assay_term')) {
                obj['assay_term'] = ApiClient.convertToType(data['assay_term'], 'String');
            }
            if (data.hasOwnProperty('library_construction_platform')) {
                obj['library_construction_platform'] = ApiClient.convertToType(data['library_construction_platform'], 'String');
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = ApiClient.convertToType(data['protocols'], ['String']);
            }
            if (data.hasOwnProperty('preferred_assay_title')) {
                obj['preferred_assay_title'] = ApiClient.convertToType(data['preferred_assay_title'], 'String');
            }
            if (data.hasOwnProperty('multiome_size')) {
                obj['multiome_size'] = ApiClient.convertToType(data['multiome_size'], 'Number');
            }
            if (data.hasOwnProperty('control_file_sets')) {
                obj['control_file_sets'] = ApiClient.convertToType(data['control_file_sets'], ['String']);
            }
            if (data.hasOwnProperty('sequencing_library_types')) {
                obj['sequencing_library_types'] = ApiClient.convertToType(data['sequencing_library_types'], ['String']);
            }
            if (data.hasOwnProperty('auxiliary_sets')) {
                obj['auxiliary_sets'] = ApiClient.convertToType(data['auxiliary_sets'], ['String']);
            }
            if (data.hasOwnProperty('external_image_url')) {
                obj['external_image_url'] = ApiClient.convertToType(data['external_image_url'], 'String');
            }
            if (data.hasOwnProperty('targeted_genes')) {
                obj['targeted_genes'] = ApiClient.convertToType(data['targeted_genes'], ['String']);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], ['String']);
            }
            if (data.hasOwnProperty('control_for')) {
                obj['control_for'] = ApiClient.convertToType(data['control_for'], ['String']);
            }
            if (data.hasOwnProperty('submitted_files_timestamp')) {
                obj['submitted_files_timestamp'] = ApiClient.convertToType(data['submitted_files_timestamp'], 'String');
            }
            if (data.hasOwnProperty('input_file_set_for')) {
                obj['input_file_set_for'] = ApiClient.convertToType(data['input_file_set_for'], ['String']);
            }
            if (data.hasOwnProperty('related_multiome_datasets')) {
                obj['related_multiome_datasets'] = ApiClient.convertToType(data['related_multiome_datasets'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeasurementSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeasurementSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['release_timestamp'] && !(typeof data['release_timestamp'] === 'string' || data['release_timestamp'] instanceof String)) {
            throw new Error("Expected the field `release_timestamp` to be a primitive type in the JSON string but got " + data['release_timestamp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publications'])) {
            throw new Error("Expected the field `publications` to be an array in the JSON data but got " + data['publications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publication_identifiers'])) {
            throw new Error("Expected the field `publication_identifiers` to be an array in the JSON data but got " + data['publication_identifiers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documents'])) {
            throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
        }
        // ensure the json data is a string
        if (data['lab'] && !(typeof data['lab'] === 'string' || data['lab'] instanceof String)) {
            throw new Error("Expected the field `lab` to be a primitive type in the JSON string but got " + data['lab']);
        }
        // ensure the json data is a string
        if (data['award'] && !(typeof data['award'] === 'string' || data['award'] instanceof String)) {
            throw new Error("Expected the field `award` to be a primitive type in the JSON string but got " + data['award']);
        }
        // ensure the json data is a string
        if (data['accession'] && !(typeof data['accession'] === 'string' || data['accession'] instanceof String)) {
            throw new Error("Expected the field `accession` to be a primitive type in the JSON string but got " + data['accession']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alternate_accessions'])) {
            throw new Error("Expected the field `alternate_accessions` to be an array in the JSON data but got " + data['alternate_accessions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections'])) {
            throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['revoke_detail'] && !(typeof data['revoke_detail'] === 'string' || data['revoke_detail'] instanceof String)) {
            throw new Error("Expected the field `revoke_detail` to be a primitive type in the JSON string but got " + data['revoke_detail']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dbxrefs'])) {
            throw new Error("Expected the field `dbxrefs` to be an array in the JSON data but got " + data['dbxrefs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['samples'])) {
            throw new Error("Expected the field `samples` to be an array in the JSON data but got " + data['samples']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['donors'])) {
            throw new Error("Expected the field `donors` to be an array in the JSON data but got " + data['donors']);
        }
        // ensure the json data is a string
        if (data['file_set_type'] && !(typeof data['file_set_type'] === 'string' || data['file_set_type'] instanceof String)) {
            throw new Error("Expected the field `file_set_type` to be a primitive type in the JSON string but got " + data['file_set_type']);
        }
        // ensure the json data is a string
        if (data['assay_term'] && !(typeof data['assay_term'] === 'string' || data['assay_term'] instanceof String)) {
            throw new Error("Expected the field `assay_term` to be a primitive type in the JSON string but got " + data['assay_term']);
        }
        // ensure the json data is a string
        if (data['library_construction_platform'] && !(typeof data['library_construction_platform'] === 'string' || data['library_construction_platform'] instanceof String)) {
            throw new Error("Expected the field `library_construction_platform` to be a primitive type in the JSON string but got " + data['library_construction_platform']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocols'])) {
            throw new Error("Expected the field `protocols` to be an array in the JSON data but got " + data['protocols']);
        }
        // ensure the json data is a string
        if (data['preferred_assay_title'] && !(typeof data['preferred_assay_title'] === 'string' || data['preferred_assay_title'] instanceof String)) {
            throw new Error("Expected the field `preferred_assay_title` to be a primitive type in the JSON string but got " + data['preferred_assay_title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['control_file_sets'])) {
            throw new Error("Expected the field `control_file_sets` to be an array in the JSON data but got " + data['control_file_sets']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sequencing_library_types'])) {
            throw new Error("Expected the field `sequencing_library_types` to be an array in the JSON data but got " + data['sequencing_library_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['auxiliary_sets'])) {
            throw new Error("Expected the field `auxiliary_sets` to be an array in the JSON data but got " + data['auxiliary_sets']);
        }
        // ensure the json data is a string
        if (data['external_image_url'] && !(typeof data['external_image_url'] === 'string' || data['external_image_url'] instanceof String)) {
            throw new Error("Expected the field `external_image_url` to be a primitive type in the JSON string but got " + data['external_image_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targeted_genes'])) {
            throw new Error("Expected the field `targeted_genes` to be an array in the JSON data but got " + data['targeted_genes']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['files'])) {
            throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['control_for'])) {
            throw new Error("Expected the field `control_for` to be an array in the JSON data but got " + data['control_for']);
        }
        // ensure the json data is a string
        if (data['submitted_files_timestamp'] && !(typeof data['submitted_files_timestamp'] === 'string' || data['submitted_files_timestamp'] instanceof String)) {
            throw new Error("Expected the field `submitted_files_timestamp` to be a primitive type in the JSON string but got " + data['submitted_files_timestamp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['input_file_set_for'])) {
            throw new Error("Expected the field `input_file_set_for` to be an array in the JSON data but got " + data['input_file_set_for']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['related_multiome_datasets'])) {
            throw new Error("Expected the field `related_multiome_datasets` to be an array in the JSON data but got " + data['related_multiome_datasets']);
        }

        return true;
    }


}



/**
 * The date the object was released.
 * @member {String} release_timestamp
 */
MeasurementSet.prototype['release_timestamp'] = undefined;

/**
 * The publications associated with this object.
 * @member {Array.<String>} publications
 */
MeasurementSet.prototype['publications'] = undefined;

/**
 * The publication identifiers that provide more information about the object.
 * @member {Array.<String>} publication_identifiers
 */
MeasurementSet.prototype['publication_identifiers'] = undefined;

/**
 * Documents that provide additional information (not data file).
 * @member {Array.<String>} documents
 */
MeasurementSet.prototype['documents'] = undefined;

/**
 * Lab associated with the submission.
 * @member {String} lab
 */
MeasurementSet.prototype['lab'] = undefined;

/**
 * Grant associated with the submission.
 * @member {String} award
 */
MeasurementSet.prototype['award'] = undefined;

/**
 * A unique identifier to be used to reference the object prefixed with IGVF.
 * @member {String} accession
 */
MeasurementSet.prototype['accession'] = undefined;

/**
 * Accessions previously assigned to objects that have been merged with this object.
 * @member {Array.<String>} alternate_accessions
 */
MeasurementSet.prototype['alternate_accessions'] = undefined;

/**
 * Some samples are part of particular data collections.
 * @member {Array.<module:model/MeasurementSet.CollectionsEnum>} collections
 */
MeasurementSet.prototype['collections'] = undefined;

/**
 * The status of the metadata object.
 * @member {module:model/MeasurementSet.StatusEnum} status
 */
MeasurementSet.prototype['status'] = undefined;

/**
 * Explanation of why an object was transitioned to the revoked status.
 * @member {String} revoke_detail
 */
MeasurementSet.prototype['revoke_detail'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
MeasurementSet.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
MeasurementSet.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
MeasurementSet.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
MeasurementSet.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
MeasurementSet.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
MeasurementSet.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
MeasurementSet.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
MeasurementSet.prototype['description'] = undefined;

/**
 * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF file sets.
 * @member {Array.<String>} dbxrefs
 */
MeasurementSet.prototype['dbxrefs'] = undefined;

/**
 * The sample(s) associated with this file set.
 * @member {Array.<String>} samples
 */
MeasurementSet.prototype['samples'] = undefined;

/**
 * The donors of the samples associated with this measurement set.
 * @member {Array.<String>} donors
 */
MeasurementSet.prototype['donors'] = undefined;

/**
 * The category that best describes this measurement set.
 * @member {module:model/MeasurementSet.FileSetTypeEnum} file_set_type
 */
MeasurementSet.prototype['file_set_type'] = undefined;

/**
 * The assay used to produce data in this measurement set.
 * @member {String} assay_term
 */
MeasurementSet.prototype['assay_term'] = undefined;

/**
 * The platform used to construct the library sequenced in this measurement set.
 * @member {String} library_construction_platform
 */
MeasurementSet.prototype['library_construction_platform'] = undefined;

/**
 * Links to the protocol(s) for conducting the assay on Protocols.io.
 * @member {Array.<String>} protocols
 */
MeasurementSet.prototype['protocols'] = undefined;

/**
 * The custom lab preferred label for the experiment performed in this measurement set.
 * @member {module:model/MeasurementSet.PreferredAssayTitleEnum} preferred_assay_title
 */
MeasurementSet.prototype['preferred_assay_title'] = undefined;

/**
 * The number of datasets included in the multiome experiment this measurement set is a part of.
 * @member {Number} multiome_size
 */
MeasurementSet.prototype['multiome_size'] = undefined;

/**
 * File sets that can serve as scientific controls for this measurement_set.
 * @member {Array.<String>} control_file_sets
 */
MeasurementSet.prototype['control_file_sets'] = undefined;

/**
 * Description of the libraries sequenced in this measurement set.
 * @member {Array.<module:model/MeasurementSet.SequencingLibraryTypesEnum>} sequencing_library_types
 */
MeasurementSet.prototype['sequencing_library_types'] = undefined;

/**
 * The auxiliary sets of files produced alongside raw data from this measurement set.
 * @member {Array.<String>} auxiliary_sets
 */
MeasurementSet.prototype['auxiliary_sets'] = undefined;

/**
 * Links to the external site where images produced by this measurement are stored.
 * @member {String} external_image_url
 */
MeasurementSet.prototype['external_image_url'] = undefined;

/**
 * A list of genes targeted in this assay. For example, TF ChIP-seq attempts to identify binding sites of a protein encoded by a specific gene. In CRISPR FlowFISH, the modified samples are sorted based on expression of a specific gene. This property differs from small_scale_gene_list in Construct Library Set, which describes genes targeted by the content integrated in the constructs (such as guide RNAs.)
 * @member {Array.<String>} targeted_genes
 */
MeasurementSet.prototype['targeted_genes'] = undefined;

/**
 * @member {String} @id
 */
MeasurementSet.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
MeasurementSet.prototype['@type'] = undefined;

/**
 * @member {String} summary
 */
MeasurementSet.prototype['summary'] = undefined;

/**
 * The files associated with this file set.
 * @member {Array.<String>} files
 */
MeasurementSet.prototype['files'] = undefined;

/**
 * The file sets for which this file set is a control.
 * @member {Array.<String>} control_for
 */
MeasurementSet.prototype['control_for'] = undefined;

/**
 * The timestamp the first file object in the file_set or associated auxiliary sets was created.
 * @member {String} submitted_files_timestamp
 */
MeasurementSet.prototype['submitted_files_timestamp'] = undefined;

/**
 * The file sets that use this file set as an input.
 * @member {Array.<String>} input_file_set_for
 */
MeasurementSet.prototype['input_file_set_for'] = undefined;

/**
 * Related datasets included in the multiome experiment this measurement set is a part of.
 * @member {Array.<String>} related_multiome_datasets
 */
MeasurementSet.prototype['related_multiome_datasets'] = undefined;





/**
 * Allowed values for the <code>collections</code> property.
 * @enum {String}
 * @readonly
 */
MeasurementSet['CollectionsEnum'] = {

    /**
     * value: "ClinGen"
     * @const
     */
    "ClinGen": "ClinGen",

    /**
     * value: "ENCODE"
     * @const
     */
    "ENCODE": "ENCODE",

    /**
     * value: "GREGoR"
     * @const
     */
    "GREGoR": "GREGoR",

    /**
     * value: "IGVF_catalog_beta_v0.1"
     * @const
     */
    "IGVF_catalog_beta_v0.1": "IGVF_catalog_beta_v0.1",

    /**
     * value: "IGVF_catalog_beta_v0.2"
     * @const
     */
    "IGVF_catalog_beta_v0.2": "IGVF_catalog_beta_v0.2",

    /**
     * value: "IGVF_catalog_beta_v0.3"
     * @const
     */
    "IGVF_catalog_beta_v0.3": "IGVF_catalog_beta_v0.3",

    /**
     * value: "IGVF_catalog_beta_v0.4"
     * @const
     */
    "IGVF_catalog_beta_v0.4": "IGVF_catalog_beta_v0.4",

    /**
     * value: "MaveDB"
     * @const
     */
    "MaveDB": "MaveDB",

    /**
     * value: "MPRAbase"
     * @const
     */
    "MPRAbase": "MPRAbase",

    /**
     * value: "Vista"
     * @const
     */
    "Vista": "Vista"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MeasurementSet['StatusEnum'] = {

    /**
     * value: "in progress"
     * @const
     */
    "in progress": "in progress",

    /**
     * value: "released"
     * @const
     */
    "released": "released",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "replaced"
     * @const
     */
    "replaced": "replaced",

    /**
     * value: "revoked"
     * @const
     */
    "revoked": "revoked",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived"
};


/**
 * Allowed values for the <code>file_set_type</code> property.
 * @enum {String}
 * @readonly
 */
MeasurementSet['FileSetTypeEnum'] = {

    /**
     * value: "experimental data"
     * @const
     */
    "experimental data": "experimental data"
};


/**
 * Allowed values for the <code>preferred_assay_title</code> property.
 * @enum {String}
 * @readonly
 */
MeasurementSet['PreferredAssayTitleEnum'] = {

    /**
     * value: "10x multiome"
     * @const
     */
    "10x multiome": "10x multiome",

    /**
     * value: "10x multiome with MULTI-seq"
     * @const
     */
    "10x multiome with MULTI-seq": "10x multiome with MULTI-seq",

    /**
     * value: "AAV-MPRA"
     * @const
     */
    "AAV-MPRA": "AAV-MPRA",

    /**
     * value: "ATAC-seq"
     * @const
     */
    "ATAC-seq": "ATAC-seq",

    /**
     * value: "CERES-seq"
     * @const
     */
    "CERES-seq": "CERES-seq",

    /**
     * value: "Cell painting"
     * @const
     */
    "Cell painting": "Cell painting",

    /**
     * value: "CRISPR FlowFISH"
     * @const
     */
    "CRISPR FlowFISH": "CRISPR FlowFISH",

    /**
     * value: "DOGMA-seq"
     * @const
     */
    "DOGMA-seq": "DOGMA-seq",

    /**
     * value: "Histone ChIP-seq"
     * @const
     */
    "Histone ChIP-seq": "Histone ChIP-seq",

    /**
     * value: "Hi-C"
     * @const
     */
    "Hi-C": "Hi-C",

    /**
     * value: "lentiMPRA"
     * @const
     */
    "lentiMPRA": "lentiMPRA",

    /**
     * value: "MERFISH"
     * @const
     */
    "MERFISH": "MERFISH",

    /**
     * value: "MIAA"
     * @const
     */
    "MIAA": "MIAA",

    /**
     * value: "mN2H"
     * @const
     */
    "mN2H": "mN2H",

    /**
     * value: "MPRA"
     * @const
     */
    "MPRA": "MPRA",

    /**
     * value: "MPRA (scQer)"
     * @const
     */
    "MPRA (scQer)": "MPRA (scQer)",

    /**
     * value: "MULTI-seq"
     * @const
     */
    "MULTI-seq": "MULTI-seq",

    /**
     * value: "Parse SPLiT-seq"
     * @const
     */
    "Parse SPLiT-seq": "Parse SPLiT-seq",

    /**
     * value: "Perturb-seq"
     * @const
     */
    "Perturb-seq": "Perturb-seq",

    /**
     * value: "RNA-seq"
     * @const
     */
    "RNA-seq": "RNA-seq",

    /**
     * value: "SGE"
     * @const
     */
    "SGE": "SGE",

    /**
     * value: "scATAC-seq"
     * @const
     */
    "scATAC-seq": "scATAC-seq",

    /**
     * value: "scNT-seq"
     * @const
     */
    "scNT-seq": "scNT-seq",

    /**
     * value: "scNT-seq2"
     * @const
     */
    "scNT-seq2": "scNT-seq2",

    /**
     * value: "scRNA-seq"
     * @const
     */
    "scRNA-seq": "scRNA-seq",

    /**
     * value: "semi-qY2H"
     * @const
     */
    "semi-qY2H": "semi-qY2H",

    /**
     * value: "SHARE-seq"
     * @const
     */
    "SHARE-seq": "SHARE-seq",

    /**
     * value: "smFISH"
     * @const
     */
    "smFISH": "smFISH",

    /**
     * value: "snATAC-seq"
     * @const
     */
    "snATAC-seq": "snATAC-seq",

    /**
     * value: "snmC-Seq2"
     * @const
     */
    "snmC-Seq2": "snmC-Seq2",

    /**
     * value: "snMCT-seq"
     * @const
     */
    "snMCT-seq": "snMCT-seq",

    /**
     * value: "snM3C-seq"
     * @const
     */
    "snM3C-seq": "snM3C-seq",

    /**
     * value: "snRNA-seq"
     * @const
     */
    "snRNA-seq": "snRNA-seq",

    /**
     * value: "SUPERSTARR"
     * @const
     */
    "SUPERSTARR": "SUPERSTARR",

    /**
     * value: "TAP-seq"
     * @const
     */
    "TAP-seq": "TAP-seq",

    /**
     * value: "TF ChIP-seq"
     * @const
     */
    "TF ChIP-seq": "TF ChIP-seq",

    /**
     * value: "VAMP-seq"
     * @const
     */
    "VAMP-seq": "VAMP-seq",

    /**
     * value: "Variant FlowFISH"
     * @const
     */
    "Variant FlowFISH": "Variant FlowFISH",

    /**
     * value: "Variant painting"
     * @const
     */
    "Variant painting": "Variant painting",

    /**
     * value: "Y2H"
     * @const
     */
    "Y2H": "Y2H",

    /**
     * value: "yN2H"
     * @const
     */
    "yN2H": "yN2H"
};


/**
 * Allowed values for the <code>sequencingLibraryTypes</code> property.
 * @enum {String}
 * @readonly
 */
MeasurementSet['SequencingLibraryTypesEnum'] = {

    /**
     * value: "direct RNA"
     * @const
     */
    "direct RNA": "direct RNA",

    /**
     * value: "exome capture"
     * @const
     */
    "exome capture": "exome capture",

    /**
     * value: "mRNA enriched"
     * @const
     */
    "mRNA enriched": "mRNA enriched",

    /**
     * value: "rRNA depleted"
     * @const
     */
    "rRNA depleted": "rRNA depleted",

    /**
     * value: "polyA depleted"
     * @const
     */
    "polyA depleted": "polyA depleted",

    /**
     * value: "polyA enriched"
     * @const
     */
    "polyA enriched": "polyA enriched"
};



export default MeasurementSet;

