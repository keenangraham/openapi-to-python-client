/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';

/**
 * The Document model module.
 * @module model/Document
 * @version 0.1.0
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * A document with additional information regarding another object submitted to the data portal. For example, a plasmid map document associated with a transduced cell line sample.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('release_timestamp')) {
                obj['release_timestamp'] = ApiClient.convertToType(data['release_timestamp'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ApiClient.convertToType(data['lab'], 'String');
            }
            if (data.hasOwnProperty('award')) {
                obj['award'] = ApiClient.convertToType(data['award'], 'String');
            }
            if (data.hasOwnProperty('attachment')) {
                obj['attachment'] = Attachment.constructFromObject(data['attachment']);
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('document_type')) {
                obj['document_type'] = ApiClient.convertToType(data['document_type'], 'String');
            }
            if (data.hasOwnProperty('characterization_method')) {
                obj['characterization_method'] = ApiClient.convertToType(data['characterization_method'], 'String');
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], ['String']);
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['release_timestamp'] && !(typeof data['release_timestamp'] === 'string' || data['release_timestamp'] instanceof String)) {
            throw new Error("Expected the field `release_timestamp` to be a primitive type in the JSON string but got " + data['release_timestamp']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['lab'] && !(typeof data['lab'] === 'string' || data['lab'] instanceof String)) {
            throw new Error("Expected the field `lab` to be a primitive type in the JSON string but got " + data['lab']);
        }
        // ensure the json data is a string
        if (data['award'] && !(typeof data['award'] === 'string' || data['award'] instanceof String)) {
            throw new Error("Expected the field `award` to be a primitive type in the JSON string but got " + data['award']);
        }
        // validate the optional field `attachment`
        if (data['attachment']) { // data not null
          Attachment.validateJSON(data['attachment']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['document_type'] && !(typeof data['document_type'] === 'string' || data['document_type'] instanceof String)) {
            throw new Error("Expected the field `document_type` to be a primitive type in the JSON string but got " + data['document_type']);
        }
        // ensure the json data is a string
        if (data['characterization_method'] && !(typeof data['characterization_method'] === 'string' || data['characterization_method'] instanceof String)) {
            throw new Error("Expected the field `characterization_method` to be a primitive type in the JSON string but got " + data['characterization_method']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['urls'])) {
            throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * The date the object was released.
 * @member {String} release_timestamp
 */
Document.prototype['release_timestamp'] = undefined;

/**
 * The status of the metadata object.
 * @member {module:model/Document.StatusEnum} status
 */
Document.prototype['status'] = undefined;

/**
 * Lab associated with the submission.
 * @member {String} lab
 */
Document.prototype['lab'] = undefined;

/**
 * Grant associated with the submission.
 * @member {String} award
 */
Document.prototype['award'] = undefined;

/**
 * @member {module:model/Attachment} attachment
 */
Document.prototype['attachment'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
Document.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
Document.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
Document.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
Document.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
Document.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
Document.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
Document.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
Document.prototype['description'] = undefined;

/**
 * The category that best describes the document.
 * @member {module:model/Document.DocumentTypeEnum} document_type
 */
Document.prototype['document_type'] = undefined;

/**
 * The method used for the characterization.
 * @member {module:model/Document.CharacterizationMethodEnum} characterization_method
 */
Document.prototype['characterization_method'] = undefined;

/**
 * External resources with additional information to the document.
 * @member {Array.<String>} urls
 */
Document.prototype['urls'] = undefined;

/**
 * @member {String} @id
 */
Document.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
Document.prototype['@type'] = undefined;

/**
 * A summary of the document.
 * @member {String} summary
 */
Document.prototype['summary'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Document['StatusEnum'] = {

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "in progress"
     * @const
     */
    "in progress": "in progress",

    /**
     * value: "released"
     * @const
     */
    "released": "released"
};


/**
 * Allowed values for the <code>document_type</code> property.
 * @enum {String}
 * @readonly
 */
Document['DocumentTypeEnum'] = {

    /**
     * value: "cell fate change protocol"
     * @const
     */
    "cell fate change protocol": "cell fate change protocol",

    /**
     * value: "characterization"
     * @const
     */
    "characterization": "characterization",

    /**
     * value: "computational protocol"
     * @const
     */
    "computational protocol": "computational protocol",

    /**
     * value: "experimental protocol"
     * @const
     */
    "experimental protocol": "experimental protocol",

    /**
     * value: "file format specification"
     * @const
     */
    "file format specification": "file format specification",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "model source data"
     * @const
     */
    "model source data": "model source data",

    /**
     * value: "plate map"
     * @const
     */
    "plate map": "plate map",

    /**
     * value: "plasmid map"
     * @const
     */
    "plasmid map": "plasmid map",

    /**
     * value: "plasmid sequence"
     * @const
     */
    "plasmid sequence": "plasmid sequence",

    /**
     * value: "standards"
     * @const
     */
    "standards": "standards"
};


/**
 * Allowed values for the <code>characterization_method</code> property.
 * @enum {String}
 * @readonly
 */
Document['CharacterizationMethodEnum'] = {

    /**
     * value: "FACS"
     * @const
     */
    "FACS": "FACS",

    /**
     * value: "immunoblot"
     * @const
     */
    "immunoblot": "immunoblot",

    /**
     * value: "immunofluorescence"
     * @const
     */
    "immunofluorescence": "immunofluorescence",

    /**
     * value: "immunoprecipitation"
     * @const
     */
    "immunoprecipitation": "immunoprecipitation",

    /**
     * value: "mass spectrometry"
     * @const
     */
    "mass spectrometry": "mass spectrometry",

    /**
     * value: "PCR"
     * @const
     */
    "PCR": "PCR",

    /**
     * value: "restriction digest"
     * @const
     */
    "restriction digest": "restriction digest",

    /**
     * value: "RT-qPCR"
     * @const
     */
    "RT-qPCR": "RT-qPCR",

    /**
     * value: "sequencing"
     * @const
     */
    "sequencing": "sequencing"
};



export default Document;

