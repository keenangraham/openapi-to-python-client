/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Award model module.
 * @module model/Award
 * @version 0.1.0
 */
class Award {
    /**
     * Constructs a new <code>Award</code>.
     * A grant providing financial support for a scientific project. For example, HG012076 supporting \&quot;Single-cell Mapping Center for Human Regulatory Elements and Gene Activity.\&quot;
     * @alias module:model/Award
     */
    constructor() { 
        
        Award.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Award</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Award} obj Optional instance to populate.
     * @return {module:model/Award} The populated <code>Award</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Award();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('pis')) {
                obj['pis'] = ApiClient.convertToType(data['pis'], ['String']);
            }
            if (data.hasOwnProperty('contact_pi')) {
                obj['contact_pi'] = ApiClient.convertToType(data['contact_pi'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('viewing_group')) {
                obj['viewing_group'] = ApiClient.convertToType(data['viewing_group'], 'String');
            }
            if (data.hasOwnProperty('component')) {
                obj['component'] = ApiClient.convertToType(data['component'], 'String');
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Award</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Award</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pis'])) {
            throw new Error("Expected the field `pis` to be an array in the JSON data but got " + data['pis']);
        }
        // ensure the json data is a string
        if (data['contact_pi'] && !(typeof data['contact_pi'] === 'string' || data['contact_pi'] instanceof String)) {
            throw new Error("Expected the field `contact_pi` to be a primitive type in the JSON string but got " + data['contact_pi']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['viewing_group'] && !(typeof data['viewing_group'] === 'string' || data['viewing_group'] instanceof String)) {
            throw new Error("Expected the field `viewing_group` to be a primitive type in the JSON string but got " + data['viewing_group']);
        }
        // ensure the json data is a string
        if (data['component'] && !(typeof data['component'] === 'string' || data['component'] instanceof String)) {
            throw new Error("Expected the field `component` to be a primitive type in the JSON string but got " + data['component']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * The status of the metadata object.
 * @member {module:model/Award.StatusEnum} status
 */
Award.prototype['status'] = undefined;

/**
 * An external resource with additional information.
 * @member {String} url
 */
Award.prototype['url'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
Award.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
Award.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
Award.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
Award.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
Award.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
Award.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
Award.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
Award.prototype['description'] = undefined;

/**
 * The grant name from the NIH database, if applicable.
 * @member {String} title
 */
Award.prototype['title'] = undefined;

/**
 * The official grant number from the NIH database, if applicable
 * @member {String} name
 */
Award.prototype['name'] = undefined;

/**
 * The date when the award begins.
 * @member {String} start_date
 */
Award.prototype['start_date'] = undefined;

/**
 * The date when the award concludes.
 * @member {String} end_date
 */
Award.prototype['end_date'] = undefined;

/**
 * Principal Investigator(s) of the grant.
 * @member {Array.<String>} pis
 */
Award.prototype['pis'] = undefined;

/**
 * The contact Principal Investigator of the grant.
 * @member {String} contact_pi
 */
Award.prototype['contact_pi'] = undefined;

/**
 * The collection of biological data related to a single initiative, originating from a consortium.
 * @member {module:model/Award.ProjectEnum} project
 */
Award.prototype['project'] = undefined;

/**
 * The group that determines which set of data the user has permission to view.
 * @member {module:model/Award.ViewingGroupEnum} viewing_group
 */
Award.prototype['viewing_group'] = undefined;

/**
 * The project component the award is associated with.
 * @member {module:model/Award.ComponentEnum} component
 */
Award.prototype['component'] = undefined;

/**
 * @member {String} @id
 */
Award.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
Award.prototype['@type'] = undefined;

/**
 * A summary of the award.
 * @member {String} summary
 */
Award.prototype['summary'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Award['StatusEnum'] = {

    /**
     * value: "current"
     * @const
     */
    "current": "current",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};


/**
 * Allowed values for the <code>project</code> property.
 * @enum {String}
 * @readonly
 */
Award['ProjectEnum'] = {

    /**
     * value: "community"
     * @const
     */
    "community": "community",

    /**
     * value: "ENCODE"
     * @const
     */
    "ENCODE": "ENCODE",

    /**
     * value: "IGVF"
     * @const
     */
    "IGVF": "IGVF"
};


/**
 * Allowed values for the <code>viewing_group</code> property.
 * @enum {String}
 * @readonly
 */
Award['ViewingGroupEnum'] = {

    /**
     * value: "community"
     * @const
     */
    "community": "community",

    /**
     * value: "IGVF"
     * @const
     */
    "IGVF": "IGVF"
};


/**
 * Allowed values for the <code>component</code> property.
 * @enum {String}
 * @readonly
 */
Award['ComponentEnum'] = {

    /**
     * value: "affiliate"
     * @const
     */
    "affiliate": "affiliate",

    /**
     * value: "data analysis"
     * @const
     */
    "data analysis": "data analysis",

    /**
     * value: "data coordination"
     * @const
     */
    "data coordination": "data coordination",

    /**
     * value: "functional characterization"
     * @const
     */
    "functional characterization": "functional characterization",

    /**
     * value: "mapping"
     * @const
     */
    "mapping": "mapping",

    /**
     * value: "networks"
     * @const
     */
    "networks": "networks",

    /**
     * value: "predictive modeling"
     * @const
     */
    "predictive modeling": "predictive modeling"
};



export default Award;

