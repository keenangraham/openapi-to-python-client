/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RodentDonor model module.
 * @module model/RodentDonor
 * @version 0.1.0
 */
class RodentDonor {
    /**
     * Constructs a new <code>RodentDonor</code>.
     * A rodent donor of a biosample. Submission of any sample originating from a rodent donor requires submission of information about the relevant donor. The rodent donor can be a generic representative of an inbred strain, or a unique, individual mouse. For example, submission of a B6 mouse donor is a prerequisite for submission of any B6 mouse samples.
     * @alias module:model/RodentDonor
     */
    constructor() { 
        
        RodentDonor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RodentDonor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RodentDonor} obj Optional instance to populate.
     * @return {module:model/RodentDonor} The populated <code>RodentDonor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RodentDonor();

            if (data.hasOwnProperty('release_timestamp')) {
                obj['release_timestamp'] = ApiClient.convertToType(data['release_timestamp'], 'String');
            }
            if (data.hasOwnProperty('taxa')) {
                obj['taxa'] = ApiClient.convertToType(data['taxa'], 'String');
            }
            if (data.hasOwnProperty('publications')) {
                obj['publications'] = ApiClient.convertToType(data['publications'], ['String']);
            }
            if (data.hasOwnProperty('publication_identifiers')) {
                obj['publication_identifiers'] = ApiClient.convertToType(data['publication_identifiers'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('lot_id')) {
                obj['lot_id'] = ApiClient.convertToType(data['lot_id'], 'String');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'String');
            }
            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], ['String']);
            }
            if (data.hasOwnProperty('lab')) {
                obj['lab'] = ApiClient.convertToType(data['lab'], 'String');
            }
            if (data.hasOwnProperty('award')) {
                obj['award'] = ApiClient.convertToType(data['award'], 'String');
            }
            if (data.hasOwnProperty('accession')) {
                obj['accession'] = ApiClient.convertToType(data['accession'], 'String');
            }
            if (data.hasOwnProperty('alternate_accessions')) {
                obj['alternate_accessions'] = ApiClient.convertToType(data['alternate_accessions'], ['String']);
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('revoke_detail')) {
                obj['revoke_detail'] = ApiClient.convertToType(data['revoke_detail'], 'String');
            }
            if (data.hasOwnProperty('schema_version')) {
                obj['schema_version'] = ApiClient.convertToType(data['schema_version'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], ['String']);
            }
            if (data.hasOwnProperty('creation_timestamp')) {
                obj['creation_timestamp'] = ApiClient.convertToType(data['creation_timestamp'], 'String');
            }
            if (data.hasOwnProperty('submitted_by')) {
                obj['submitted_by'] = ApiClient.convertToType(data['submitted_by'], 'String');
            }
            if (data.hasOwnProperty('submitter_comment')) {
                obj['submitter_comment'] = ApiClient.convertToType(data['submitter_comment'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dbxrefs')) {
                obj['dbxrefs'] = ApiClient.convertToType(data['dbxrefs'], ['String']);
            }
            if (data.hasOwnProperty('sex')) {
                obj['sex'] = ApiClient.convertToType(data['sex'], 'String');
            }
            if (data.hasOwnProperty('phenotypic_features')) {
                obj['phenotypic_features'] = ApiClient.convertToType(data['phenotypic_features'], ['String']);
            }
            if (data.hasOwnProperty('virtual')) {
                obj['virtual'] = ApiClient.convertToType(data['virtual'], 'Boolean');
            }
            if (data.hasOwnProperty('strain_background')) {
                obj['strain_background'] = ApiClient.convertToType(data['strain_background'], 'String');
            }
            if (data.hasOwnProperty('strain')) {
                obj['strain'] = ApiClient.convertToType(data['strain'], 'String');
            }
            if (data.hasOwnProperty('genotype')) {
                obj['genotype'] = ApiClient.convertToType(data['genotype'], 'String');
            }
            if (data.hasOwnProperty('individual_rodent')) {
                obj['individual_rodent'] = ApiClient.convertToType(data['individual_rodent'], 'Boolean');
            }
            if (data.hasOwnProperty('rodent_identifier')) {
                obj['rodent_identifier'] = ApiClient.convertToType(data['rodent_identifier'], 'String');
            }
            if (data.hasOwnProperty('@id')) {
                obj['@id'] = ApiClient.convertToType(data['@id'], 'String');
            }
            if (data.hasOwnProperty('@type')) {
                obj['@type'] = ApiClient.convertToType(data['@type'], ['String']);
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RodentDonor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RodentDonor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['release_timestamp'] && !(typeof data['release_timestamp'] === 'string' || data['release_timestamp'] instanceof String)) {
            throw new Error("Expected the field `release_timestamp` to be a primitive type in the JSON string but got " + data['release_timestamp']);
        }
        // ensure the json data is a string
        if (data['taxa'] && !(typeof data['taxa'] === 'string' || data['taxa'] instanceof String)) {
            throw new Error("Expected the field `taxa` to be a primitive type in the JSON string but got " + data['taxa']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publications'])) {
            throw new Error("Expected the field `publications` to be an array in the JSON data but got " + data['publications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publication_identifiers'])) {
            throw new Error("Expected the field `publication_identifiers` to be an array in the JSON data but got " + data['publication_identifiers']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['lot_id'] && !(typeof data['lot_id'] === 'string' || data['lot_id'] instanceof String)) {
            throw new Error("Expected the field `lot_id` to be a primitive type in the JSON string but got " + data['lot_id']);
        }
        // ensure the json data is a string
        if (data['product_id'] && !(typeof data['product_id'] === 'string' || data['product_id'] instanceof String)) {
            throw new Error("Expected the field `product_id` to be a primitive type in the JSON string but got " + data['product_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documents'])) {
            throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
        }
        // ensure the json data is a string
        if (data['lab'] && !(typeof data['lab'] === 'string' || data['lab'] instanceof String)) {
            throw new Error("Expected the field `lab` to be a primitive type in the JSON string but got " + data['lab']);
        }
        // ensure the json data is a string
        if (data['award'] && !(typeof data['award'] === 'string' || data['award'] instanceof String)) {
            throw new Error("Expected the field `award` to be a primitive type in the JSON string but got " + data['award']);
        }
        // ensure the json data is a string
        if (data['accession'] && !(typeof data['accession'] === 'string' || data['accession'] instanceof String)) {
            throw new Error("Expected the field `accession` to be a primitive type in the JSON string but got " + data['accession']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alternate_accessions'])) {
            throw new Error("Expected the field `alternate_accessions` to be an array in the JSON data but got " + data['alternate_accessions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections'])) {
            throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['revoke_detail'] && !(typeof data['revoke_detail'] === 'string' || data['revoke_detail'] instanceof String)) {
            throw new Error("Expected the field `revoke_detail` to be a primitive type in the JSON string but got " + data['revoke_detail']);
        }
        // ensure the json data is a string
        if (data['schema_version'] && !(typeof data['schema_version'] === 'string' || data['schema_version'] instanceof String)) {
            throw new Error("Expected the field `schema_version` to be a primitive type in the JSON string but got " + data['schema_version']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aliases'])) {
            throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
        }
        // ensure the json data is a string
        if (data['creation_timestamp'] && !(typeof data['creation_timestamp'] === 'string' || data['creation_timestamp'] instanceof String)) {
            throw new Error("Expected the field `creation_timestamp` to be a primitive type in the JSON string but got " + data['creation_timestamp']);
        }
        // ensure the json data is a string
        if (data['submitted_by'] && !(typeof data['submitted_by'] === 'string' || data['submitted_by'] instanceof String)) {
            throw new Error("Expected the field `submitted_by` to be a primitive type in the JSON string but got " + data['submitted_by']);
        }
        // ensure the json data is a string
        if (data['submitter_comment'] && !(typeof data['submitter_comment'] === 'string' || data['submitter_comment'] instanceof String)) {
            throw new Error("Expected the field `submitter_comment` to be a primitive type in the JSON string but got " + data['submitter_comment']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dbxrefs'])) {
            throw new Error("Expected the field `dbxrefs` to be an array in the JSON data but got " + data['dbxrefs']);
        }
        // ensure the json data is a string
        if (data['sex'] && !(typeof data['sex'] === 'string' || data['sex'] instanceof String)) {
            throw new Error("Expected the field `sex` to be a primitive type in the JSON string but got " + data['sex']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phenotypic_features'])) {
            throw new Error("Expected the field `phenotypic_features` to be an array in the JSON data but got " + data['phenotypic_features']);
        }
        // ensure the json data is a string
        if (data['strain_background'] && !(typeof data['strain_background'] === 'string' || data['strain_background'] instanceof String)) {
            throw new Error("Expected the field `strain_background` to be a primitive type in the JSON string but got " + data['strain_background']);
        }
        // ensure the json data is a string
        if (data['strain'] && !(typeof data['strain'] === 'string' || data['strain'] instanceof String)) {
            throw new Error("Expected the field `strain` to be a primitive type in the JSON string but got " + data['strain']);
        }
        // ensure the json data is a string
        if (data['genotype'] && !(typeof data['genotype'] === 'string' || data['genotype'] instanceof String)) {
            throw new Error("Expected the field `genotype` to be a primitive type in the JSON string but got " + data['genotype']);
        }
        // ensure the json data is a string
        if (data['rodent_identifier'] && !(typeof data['rodent_identifier'] === 'string' || data['rodent_identifier'] instanceof String)) {
            throw new Error("Expected the field `rodent_identifier` to be a primitive type in the JSON string but got " + data['rodent_identifier']);
        }
        // ensure the json data is a string
        if (data['@id'] && !(typeof data['@id'] === 'string' || data['@id'] instanceof String)) {
            throw new Error("Expected the field `@id` to be a primitive type in the JSON string but got " + data['@id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['@type'])) {
            throw new Error("Expected the field `@type` to be an array in the JSON data but got " + data['@type']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * The date the object was released.
 * @member {String} release_timestamp
 */
RodentDonor.prototype['release_timestamp'] = undefined;

/**
 * The species of the organism.
 * @member {module:model/RodentDonor.TaxaEnum} taxa
 */
RodentDonor.prototype['taxa'] = undefined;

/**
 * The publications associated with this object.
 * @member {Array.<String>} publications
 */
RodentDonor.prototype['publications'] = undefined;

/**
 * The publication identifiers that provide more information about the object.
 * @member {Array.<String>} publication_identifiers
 */
RodentDonor.prototype['publication_identifiers'] = undefined;

/**
 * An external resource with additional information.
 * @member {String} url
 */
RodentDonor.prototype['url'] = undefined;

/**
 * The originating lab(s) or vendor(s).
 * @member {Array.<String>} sources
 */
RodentDonor.prototype['sources'] = undefined;

/**
 * The lot identifier provided by the originating lab or vendor.
 * @member {String} lot_id
 */
RodentDonor.prototype['lot_id'] = undefined;

/**
 * The product identifier provided by the originating lab or vendor.
 * @member {String} product_id
 */
RodentDonor.prototype['product_id'] = undefined;

/**
 * Documents that provide additional information (not data file).
 * @member {Array.<String>} documents
 */
RodentDonor.prototype['documents'] = undefined;

/**
 * Lab associated with the submission.
 * @member {String} lab
 */
RodentDonor.prototype['lab'] = undefined;

/**
 * Grant associated with the submission.
 * @member {String} award
 */
RodentDonor.prototype['award'] = undefined;

/**
 * A unique identifier to be used to reference the object prefixed with IGVF.
 * @member {String} accession
 */
RodentDonor.prototype['accession'] = undefined;

/**
 * Accessions previously assigned to objects that have been merged with this object.
 * @member {Array.<String>} alternate_accessions
 */
RodentDonor.prototype['alternate_accessions'] = undefined;

/**
 * Some samples are part of particular data collections.
 * @member {Array.<module:model/RodentDonor.CollectionsEnum>} collections
 */
RodentDonor.prototype['collections'] = undefined;

/**
 * The status of the metadata object.
 * @member {module:model/RodentDonor.StatusEnum} status
 */
RodentDonor.prototype['status'] = undefined;

/**
 * Explanation of why an object was transitioned to the revoked status.
 * @member {String} revoke_detail
 */
RodentDonor.prototype['revoke_detail'] = undefined;

/**
 * The version of the JSON schema that the server uses to validate the object.
 * @member {String} schema_version
 */
RodentDonor.prototype['schema_version'] = undefined;

/**
 * The unique identifier associated with every object.
 * @member {String} uuid
 */
RodentDonor.prototype['uuid'] = undefined;

/**
 * DACC internal notes.
 * @member {String} notes
 */
RodentDonor.prototype['notes'] = undefined;

/**
 * Lab specific identifiers to reference an object.
 * @member {Array.<String>} aliases
 */
RodentDonor.prototype['aliases'] = undefined;

/**
 * The date the object was created.
 * @member {String} creation_timestamp
 */
RodentDonor.prototype['creation_timestamp'] = undefined;

/**
 * The user who submitted the object.
 * @member {String} submitted_by
 */
RodentDonor.prototype['submitted_by'] = undefined;

/**
 * Additional information specified by the submitter to be displayed as a comment on the portal.
 * @member {String} submitter_comment
 */
RodentDonor.prototype['submitter_comment'] = undefined;

/**
 * A plain text description of the object.
 * @member {String} description
 */
RodentDonor.prototype['description'] = undefined;

/**
 * Identifiers from external resources that may have 1-to-1 or 1-to-many relationships with IGVF donors.
 * @member {Array.<String>} dbxrefs
 */
RodentDonor.prototype['dbxrefs'] = undefined;

/**
 * Sex of the donor.
 * @member {module:model/RodentDonor.SexEnum} sex
 */
RodentDonor.prototype['sex'] = undefined;

/**
 * A list of associated phenotypic features of the donor.
 * @member {Array.<String>} phenotypic_features
 */
RodentDonor.prototype['phenotypic_features'] = undefined;

/**
 * Virtual donors are not representing actual human or model organism donors, samples coming from which were used in experiments, but rather capturing metadata about hypothetical donors that the reported analysis results are relevant for.
 * @member {Boolean} virtual
 */
RodentDonor.prototype['virtual'] = undefined;

/**
 * The specific parent strain designation of a non-human donor.
 * @member {module:model/RodentDonor.StrainBackgroundEnum} strain_background
 */
RodentDonor.prototype['strain_background'] = undefined;

/**
 * The specific strain designation of a non-human donor.
 * @member {String} strain
 */
RodentDonor.prototype['strain'] = undefined;

/**
 * The genotype of the strain according to accepted nomenclature conventions.
 * @member {String} genotype
 */
RodentDonor.prototype['genotype'] = undefined;

/**
 * This rodent donor represents an individual rodent.
 * @member {Boolean} individual_rodent
 */
RodentDonor.prototype['individual_rodent'] = undefined;

/**
 * The identifier for this individual rodent donor.
 * @member {String} rodent_identifier
 */
RodentDonor.prototype['rodent_identifier'] = undefined;

/**
 * @member {String} @id
 */
RodentDonor.prototype['@id'] = undefined;

/**
 * @member {Array.<String>} @type
 */
RodentDonor.prototype['@type'] = undefined;

/**
 * A summary of the rodent donor.
 * @member {String} summary
 */
RodentDonor.prototype['summary'] = undefined;





/**
 * Allowed values for the <code>taxa</code> property.
 * @enum {String}
 * @readonly
 */
RodentDonor['TaxaEnum'] = {

    /**
     * value: "Mus musculus"
     * @const
     */
    "Mus musculus": "Mus musculus"
};


/**
 * Allowed values for the <code>collections</code> property.
 * @enum {String}
 * @readonly
 */
RodentDonor['CollectionsEnum'] = {

    /**
     * value: "ClinGen"
     * @const
     */
    "ClinGen": "ClinGen",

    /**
     * value: "ENCODE"
     * @const
     */
    "ENCODE": "ENCODE",

    /**
     * value: "GREGoR"
     * @const
     */
    "GREGoR": "GREGoR",

    /**
     * value: "IGVF_catalog_beta_v0.1"
     * @const
     */
    "IGVF_catalog_beta_v0.1": "IGVF_catalog_beta_v0.1",

    /**
     * value: "IGVF_catalog_beta_v0.2"
     * @const
     */
    "IGVF_catalog_beta_v0.2": "IGVF_catalog_beta_v0.2",

    /**
     * value: "IGVF_catalog_beta_v0.3"
     * @const
     */
    "IGVF_catalog_beta_v0.3": "IGVF_catalog_beta_v0.3",

    /**
     * value: "IGVF_catalog_beta_v0.4"
     * @const
     */
    "IGVF_catalog_beta_v0.4": "IGVF_catalog_beta_v0.4",

    /**
     * value: "MaveDB"
     * @const
     */
    "MaveDB": "MaveDB",

    /**
     * value: "MPRAbase"
     * @const
     */
    "MPRAbase": "MPRAbase",

    /**
     * value: "Vista"
     * @const
     */
    "Vista": "Vista"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
RodentDonor['StatusEnum'] = {

    /**
     * value: "in progress"
     * @const
     */
    "in progress": "in progress",

    /**
     * value: "released"
     * @const
     */
    "released": "released",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "replaced"
     * @const
     */
    "replaced": "replaced",

    /**
     * value: "revoked"
     * @const
     */
    "revoked": "revoked",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived"
};


/**
 * Allowed values for the <code>sex</code> property.
 * @enum {String}
 * @readonly
 */
RodentDonor['SexEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female",

    /**
     * value: "unspecified"
     * @const
     */
    "unspecified": "unspecified"
};


/**
 * Allowed values for the <code>strain_background</code> property.
 * @enum {String}
 * @readonly
 */
RodentDonor['StrainBackgroundEnum'] = {

    /**
     * value: "A/J (AJ)"
     * @const
     */
    "A/J (AJ)": "A/J (AJ)",

    /**
     * value: "C57BL/6J (B6)"
     * @const
     */
    "C57BL/6J (B6)": "C57BL/6J (B6)",

    /**
     * value: "129S1/SvImJ (129)"
     * @const
     */
    "129S1/SvImJ (129)": "129S1/SvImJ (129)",

    /**
     * value: "NOD/ShiLtJ (NOD)"
     * @const
     */
    "NOD/ShiLtJ (NOD)": "NOD/ShiLtJ (NOD)",

    /**
     * value: "NZO/H1LtJ (NZO)"
     * @const
     */
    "NZO/H1LtJ (NZO)": "NZO/H1LtJ (NZO)",

    /**
     * value: "CAST/EiJ (CAST)"
     * @const
     */
    "CAST/EiJ (CAST)": "CAST/EiJ (CAST)",

    /**
     * value: "PWK/PhJ (PWK)"
     * @const
     */
    "PWK/PhJ (PWK)": "PWK/PhJ (PWK)",

    /**
     * value: "WSB/EiJ (WSB)"
     * @const
     */
    "WSB/EiJ (WSB)": "WSB/EiJ (WSB)",

    /**
     * value: "CAST (M. m. castaneus)"
     * @const
     */
    "CAST (M. m. castaneus)": "CAST (M. m. castaneus)",

    /**
     * value: "WSB (M. m. domesticus)"
     * @const
     */
    "WSB (M. m. domesticus)": "WSB (M. m. domesticus)",

    /**
     * value: "PWK (M. m. musculus)"
     * @const
     */
    "PWK (M. m. musculus)": "PWK (M. m. musculus)"
};



export default RodentDonor;

