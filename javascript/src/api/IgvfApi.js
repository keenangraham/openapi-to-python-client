/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessKeyResults from '../model/AccessKeyResults';
import AlignmentFileResults from '../model/AlignmentFileResults';
import AnalysisSetResults from '../model/AnalysisSetResults';
import AnalysisStepResults from '../model/AnalysisStepResults';
import AnalysisStepVersionResults from '../model/AnalysisStepVersionResults';
import AssayTermResults from '../model/AssayTermResults';
import AuxiliarySetResults from '../model/AuxiliarySetResults';
import AwardResults from '../model/AwardResults';
import BiomarkerResults from '../model/BiomarkerResults';
import ConfigurationFileResults from '../model/ConfigurationFileResults';
import ConstructLibrarySetResults from '../model/ConstructLibrarySetResults';
import CrisprModificationResults from '../model/CrisprModificationResults';
import CuratedSetResults from '../model/CuratedSetResults';
import DegronModificationResults from '../model/DegronModificationResults';
import DocumentResults from '../model/DocumentResults';
import GeneLocation from '../model/GeneLocation';
import GeneResults from '../model/GeneResults';
import GenomeBrowserAnnotationFileResults from '../model/GenomeBrowserAnnotationFileResults';
import HumanDonorResults from '../model/HumanDonorResults';
import ImageFileResults from '../model/ImageFileResults';
import ImageResults from '../model/ImageResults';
import InVitroSystemResults from '../model/InVitroSystemResults';
import InstitutionalCertificateResults from '../model/InstitutionalCertificateResults';
import Item from '../model/Item';
import ItemType from '../model/ItemType';
import LabResults from '../model/LabResults';
import Limit from '../model/Limit';
import Locus from '../model/Locus';
import MatrixFileResults from '../model/MatrixFileResults';
import MeasurementSetResults from '../model/MeasurementSetResults';
import ModelFileResults from '../model/ModelFileResults';
import ModelSetResults from '../model/ModelSetResults';
import MultiplexedSampleResults from '../model/MultiplexedSampleResults';
import NoResultsResponse from '../model/NoResultsResponse';
import OpenReadingFrameResults from '../model/OpenReadingFrameResults';
import PageResults from '../model/PageResults';
import PhenotypeTermResults from '../model/PhenotypeTermResults';
import PhenotypicFeatureResults from '../model/PhenotypicFeatureResults';
import PlatformTermResults from '../model/PlatformTermResults';
import PredictionSetResults from '../model/PredictionSetResults';
import PrimaryCellResults from '../model/PrimaryCellResults';
import PublicationResults from '../model/PublicationResults';
import ReferenceFileResults from '../model/ReferenceFileResults';
import RodentDonorResults from '../model/RodentDonorResults';
import SampleTermResults from '../model/SampleTermResults';
import SearchResults from '../model/SearchResults';
import SequenceFileResults from '../model/SequenceFileResults';
import SignalFileResults from '../model/SignalFileResults';
import SoftwareResults from '../model/SoftwareResults';
import SoftwareVersionResults from '../model/SoftwareVersionResults';
import SourceResults from '../model/SourceResults';
import TabularFileResults from '../model/TabularFileResults';
import TechnicalSampleResults from '../model/TechnicalSampleResults';
import TissueResults from '../model/TissueResults';
import TreatmentResults from '../model/TreatmentResults';
import UserResults from '../model/UserResults';
import WholeOrganismResults from '../model/WholeOrganismResults';
import WorkflowResults from '../model/WorkflowResults';

/**
* Igvf service.
* @module api/IgvfApi
* @version 0.1.0
*/
export default class IgvfApi {

    /**
    * Constructs a new IgvfApi. 
    * @alias module:api/IgvfApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessKeys operation.
     * @callback module:api/IgvfApi~accessKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessKeyResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AccessKey collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AccessKey items. Supports filtering on fields within AccessKey items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accessKeyId] Filter by access_key_id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [secretAccessKeyHash] Filter by secret_access_key_hash
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [user] Filter by user
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~accessKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessKeyResults}
     */
    accessKeys(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling accessKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'access_key_id': this.apiClient.buildCollectionParam(opts['accessKeyId'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'secret_access_key_hash': this.apiClient.buildCollectionParam(opts['secretAccessKeyHash'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'user': this.apiClient.buildCollectionParam(opts['user'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessKeyResults;
      return this.apiClient.callApi(
        '/access-keys/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alignmentFiles operation.
     * @callback module:api/IgvfApi~alignmentFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlignmentFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AlignmentFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AlignmentFile items. Supports filtering on fields within AlignmentFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [anvilUrl] Filter by anvil_url
     * @param {Array.<module:model/String>} [assembly] Filter by assembly
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentSummary] Filter by content_summary
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<Boolean>} [filtered] Filter by filtered
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<Boolean>} [redacted] Filter by redacted
     * @param {Array.<String>} [referenceFiles] Filter by reference_files
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~alignmentFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlignmentFileResults}
     */
    alignmentFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling alignmentFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'anvil_url': this.apiClient.buildCollectionParam(opts['anvilUrl'], 'multi'),
        'assembly': this.apiClient.buildCollectionParam(opts['assembly'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_summary': this.apiClient.buildCollectionParam(opts['contentSummary'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'filtered': this.apiClient.buildCollectionParam(opts['filtered'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'redacted': this.apiClient.buildCollectionParam(opts['redacted'], 'multi'),
        'reference_files': this.apiClient.buildCollectionParam(opts['referenceFiles'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlignmentFileResults;
      return this.apiClient.callApi(
        '/alignment-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisSets operation.
     * @callback module:api/IgvfApi~analysisSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisSetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AnalysisSet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisSet items. Supports filtering on fields within AnalysisSet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [assayTitles] Filter by assay_titles
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatform] Filter by files.sequencing_platform
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [inputFileSetsId] Filter by input_file_sets.@id
     * @param {Array.<String>} [inputFileSetsAccession] Filter by input_file_sets.accession
     * @param {Array.<String>} [inputFileSetsAliases] Filter by input_file_sets.aliases
     * @param {Array.<module:model/String>} [inputFileSetsFileSetType] Filter by input_file_sets.file_set_type
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatments] Filter by samples.cell_fate_change_treatments
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySets] Filter by samples.construct_library_sets
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModifications] Filter by samples.modifications
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatments] Filter by samples.treatments
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~analysisSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisSetResults}
     */
    analysisSets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling analysisSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'assay_titles': this.apiClient.buildCollectionParam(opts['assayTitles'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform': this.apiClient.buildCollectionParam(opts['filesSequencingPlatform'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'input_file_sets.@id': this.apiClient.buildCollectionParam(opts['inputFileSetsId'], 'multi'),
        'input_file_sets.accession': this.apiClient.buildCollectionParam(opts['inputFileSetsAccession'], 'multi'),
        'input_file_sets.aliases': this.apiClient.buildCollectionParam(opts['inputFileSetsAliases'], 'multi'),
        'input_file_sets.file_set_type': this.apiClient.buildCollectionParam(opts['inputFileSetsFileSetType'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatments'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySets'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications': this.apiClient.buildCollectionParam(opts['samplesModifications'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments': this.apiClient.buildCollectionParam(opts['samplesTreatments'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisSetResults;
      return this.apiClient.callApi(
        '/analysis-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisStepVersions operation.
     * @callback module:api/IgvfApi~analysisStepVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisStepVersionResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AnalysisStepVersion collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStepVersion items. Supports filtering on fields within AnalysisStepVersion items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [analysisStepId] Filter by analysis_step.@id
     * @param {Array.<String>} [analysisStepName] Filter by analysis_step.name
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [softwareVersionsId] Filter by software_versions.@id
     * @param {Array.<String>} [softwareVersionsName] Filter by software_versions.name
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~analysisStepVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisStepVersionResults}
     */
    analysisStepVersions(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling analysisStepVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'analysis_step.@id': this.apiClient.buildCollectionParam(opts['analysisStepId'], 'multi'),
        'analysis_step.name': this.apiClient.buildCollectionParam(opts['analysisStepName'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'software_versions.@id': this.apiClient.buildCollectionParam(opts['softwareVersionsId'], 'multi'),
        'software_versions.name': this.apiClient.buildCollectionParam(opts['softwareVersionsName'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisStepVersionResults;
      return this.apiClient.callApi(
        '/analysis-step-versions/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisSteps operation.
     * @callback module:api/IgvfApi~analysisStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisStepResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AnalysisStep collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AnalysisStep items. Supports filtering on fields within AnalysisStep items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<module:model/String>} [analysisStepTypes] Filter by analysis_step_types
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [inputContentTypes] Filter by input_content_types
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [outputContentTypes] Filter by output_content_types
     * @param {Array.<String>} [parentsId] Filter by parents.@id
     * @param {Array.<String>} [parentsTitle] Filter by parents.title
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [stepLabel] Filter by step_label
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [workflowId] Filter by workflow.@id
     * @param {Array.<String>} [workflowAccession] Filter by workflow.accession
     * @param {module:api/IgvfApi~analysisStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisStepResults}
     */
    analysisSteps(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling analysisSteps");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'analysis_step_types': this.apiClient.buildCollectionParam(opts['analysisStepTypes'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'input_content_types': this.apiClient.buildCollectionParam(opts['inputContentTypes'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'output_content_types': this.apiClient.buildCollectionParam(opts['outputContentTypes'], 'multi'),
        'parents.@id': this.apiClient.buildCollectionParam(opts['parentsId'], 'multi'),
        'parents.title': this.apiClient.buildCollectionParam(opts['parentsTitle'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'step_label': this.apiClient.buildCollectionParam(opts['stepLabel'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'workflow.@id': this.apiClient.buildCollectionParam(opts['workflowId'], 'multi'),
        'workflow.accession': this.apiClient.buildCollectionParam(opts['workflowAccession'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisStepResults;
      return this.apiClient.callApi(
        '/analysis-steps/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assayTerms operation.
     * @callback module:api/IgvfApi~assayTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssayTermResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AssayTerm collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AssayTerm items. Supports filtering on fields within AssayTerm items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [ancestors] Filter by ancestors
     * @param {Array.<String>} [assaySlims] Filter by assay_slims
     * @param {Array.<String>} [categorySlims] Filter by category_slims
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [deprecatedNtrTerms] Filter by deprecated_ntr_terms
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [isA] Filter by is_a
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [objectiveSlims] Filter by objective_slims
     * @param {Array.<String>} [ontology] Filter by ontology
     * @param {Array.<module:model/String>} [preferredAssayTitles] Filter by preferred_assay_titles
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<String>} [termId] Filter by term_id
     * @param {Array.<String>} [termName] Filter by term_name
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~assayTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssayTermResults}
     */
    assayTerms(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling assayTerms");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'ancestors': this.apiClient.buildCollectionParam(opts['ancestors'], 'multi'),
        'assay_slims': this.apiClient.buildCollectionParam(opts['assaySlims'], 'multi'),
        'category_slims': this.apiClient.buildCollectionParam(opts['categorySlims'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'deprecated_ntr_terms': this.apiClient.buildCollectionParam(opts['deprecatedNtrTerms'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'is_a': this.apiClient.buildCollectionParam(opts['isA'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'objective_slims': this.apiClient.buildCollectionParam(opts['objectiveSlims'], 'multi'),
        'ontology': this.apiClient.buildCollectionParam(opts['ontology'], 'multi'),
        'preferred_assay_titles': this.apiClient.buildCollectionParam(opts['preferredAssayTitles'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'term_id': this.apiClient.buildCollectionParam(opts['termId'], 'multi'),
        'term_name': this.apiClient.buildCollectionParam(opts['termName'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssayTermResults;
      return this.apiClient.callApi(
        '/assay-terms/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the auxiliarySets operation.
     * @callback module:api/IgvfApi~auxiliarySetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuxiliarySetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the AuxiliarySet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate AuxiliarySet items. Supports filtering on fields within AuxiliarySet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatform] Filter by files.sequencing_platform
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [libraryConstructionPlatform] Filter by library_construction_platform
     * @param {Array.<String>} [measurementSetsId] Filter by measurement_sets.@id
     * @param {Array.<String>} [measurementSetsAccession] Filter by measurement_sets.accession
     * @param {Array.<String>} [measurementSetsAliases] Filter by measurement_sets.aliases
     * @param {Array.<module:model/String>} [measurementSetsPreferredAssayTitle] Filter by measurement_sets.preferred_assay_title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatments] Filter by samples.cell_fate_change_treatments
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySets] Filter by samples.construct_library_sets
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModifications] Filter by samples.modifications
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatments] Filter by samples.treatments
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~auxiliarySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuxiliarySetResults}
     */
    auxiliarySets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling auxiliarySets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform': this.apiClient.buildCollectionParam(opts['filesSequencingPlatform'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'library_construction_platform': this.apiClient.buildCollectionParam(opts['libraryConstructionPlatform'], 'multi'),
        'measurement_sets.@id': this.apiClient.buildCollectionParam(opts['measurementSetsId'], 'multi'),
        'measurement_sets.accession': this.apiClient.buildCollectionParam(opts['measurementSetsAccession'], 'multi'),
        'measurement_sets.aliases': this.apiClient.buildCollectionParam(opts['measurementSetsAliases'], 'multi'),
        'measurement_sets.preferred_assay_title': this.apiClient.buildCollectionParam(opts['measurementSetsPreferredAssayTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatments'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySets'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications': this.apiClient.buildCollectionParam(opts['samplesModifications'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments': this.apiClient.buildCollectionParam(opts['samplesTreatments'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuxiliarySetResults;
      return this.apiClient.callApi(
        '/auxiliary-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the awards operation.
     * @callback module:api/IgvfApi~awardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Award collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Award items. Supports filtering on fields within Award items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<module:model/String>} [component] Filter by component
     * @param {Array.<String>} [contactPi] Filter by contact_pi
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [endDate] Filter by end_date
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [pis] Filter by pis
     * @param {Array.<module:model/String>} [project] Filter by project
     * @param {Array.<String>} [startDate] Filter by start_date
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<module:model/String>} [viewingGroup] Filter by viewing_group
     * @param {module:api/IgvfApi~awardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardResults}
     */
    awards(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling awards");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'component': this.apiClient.buildCollectionParam(opts['component'], 'multi'),
        'contact_pi': this.apiClient.buildCollectionParam(opts['contactPi'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'end_date': this.apiClient.buildCollectionParam(opts['endDate'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'pis': this.apiClient.buildCollectionParam(opts['pis'], 'multi'),
        'project': this.apiClient.buildCollectionParam(opts['project'], 'multi'),
        'start_date': this.apiClient.buildCollectionParam(opts['startDate'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'viewing_group': this.apiClient.buildCollectionParam(opts['viewingGroup'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardResults;
      return this.apiClient.callApi(
        '/awards/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDownload operation.
     * @callback module:api/IgvfApi~batchDownloadCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List files to download based on search query. All results are returned.
     * Generates TSV of files contained in FileSets in search results.
     * @param {Array.<String>} type Type of objects to return. Can be repeated for multiple types.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {Object.<String, Object>} [fieldFilters] Any field from any object type can be used as a filter. Use '!' for negation, '*' as a wildcard, and 'lt:', 'lte:', 'gt:', 'gte:' for range queries on numeric fields.
     * @param {module:api/IgvfApi~batchDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    batchDownload(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling batchDownload");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': this.apiClient.buildCollectionParam(type, 'multi'),
        'query': opts['query'],
        'field_filters': opts['fieldFilters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['text/tab-separated-values', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/batch-download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the biomarkers operation.
     * @callback module:api/IgvfApi~biomarkersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BiomarkerResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Biomarker collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Biomarker items. Supports filtering on fields within Biomarker items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardName] Filter by award.name
     * @param {Array.<String>} [biomarkerFor] Filter by biomarker_for
     * @param {Array.<module:model/String>} [classification] Filter by classification
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [gene] Filter by gene
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [nameQuantification] Filter by name_quantification
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [quantification] Filter by quantification
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~biomarkersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BiomarkerResults}
     */
    biomarkers(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling biomarkers");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.name': this.apiClient.buildCollectionParam(opts['awardName'], 'multi'),
        'biomarker_for': this.apiClient.buildCollectionParam(opts['biomarkerFor'], 'multi'),
        'classification': this.apiClient.buildCollectionParam(opts['classification'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'gene': this.apiClient.buildCollectionParam(opts['gene'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'name_quantification': this.apiClient.buildCollectionParam(opts['nameQuantification'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'quantification': this.apiClient.buildCollectionParam(opts['quantification'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BiomarkerResults;
      return this.apiClient.callApi(
        '/biomarkers/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationFiles operation.
     * @callback module:api/IgvfApi~configurationFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ConfigurationFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConfigurationFile items. Supports filtering on fields within ConfigurationFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<String>} [seqspecOf] Filter by seqspec_of
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~configurationFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationFileResults}
     */
    configurationFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling configurationFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'seqspec_of': this.apiClient.buildCollectionParam(opts['seqspecOf'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationFileResults;
      return this.apiClient.callApi(
        '/configuration-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the constructLibrarySets operation.
     * @callback module:api/IgvfApi~constructLibrarySetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConstructLibrarySetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ConstructLibrarySet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ConstructLibrarySet items. Supports filtering on fields within ConstructLibrarySet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [appliedToSamplesId] Filter by applied_to_samples.@id
     * @param {Array.<String>} [appliedToSamplesAccession] Filter by applied_to_samples.accession
     * @param {Array.<String>} [appliedToSamplesAliases] Filter by applied_to_samples.aliases
     * @param {Array.<String>} [appliedToSamplesDiseaseTermsId] Filter by applied_to_samples.disease_terms.@id
     * @param {Array.<String>} [appliedToSamplesDiseaseTermsTermName] Filter by applied_to_samples.disease_terms.term_name
     * @param {Array.<String>} [appliedToSamplesSampleTermsId] Filter by applied_to_samples.sample_terms.@id
     * @param {Array.<String>} [appliedToSamplesSampleTermsTermName] Filter by applied_to_samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [appliedToSamplesStatus] Filter by applied_to_samples.status
     * @param {Array.<String>} [appliedToSamplesSummary] Filter by applied_to_samples.summary
     * @param {Array.<String>} [associatedPhenotypesId] Filter by associated_phenotypes.@id
     * @param {Array.<String>} [associatedPhenotypesTermId] Filter by associated_phenotypes.term_id
     * @param {Array.<String>} [associatedPhenotypesTermName] Filter by associated_phenotypes.term_name
     * @param {Array.<Number>} [averageGuideCoverage] Filter by average_guide_coverage
     * @param {Array.<Number>} [averageInsertSize] Filter by average_insert_size
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [exon] Filter by exon
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<module:model/String>} [guideType] Filter by guide_type
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [integratedContentFiles] Filter by integrated_content_files
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [largeScaleGeneListId] Filter by large_scale_gene_list.@id
     * @param {Array.<String>} [largeScaleGeneListAccession] Filter by large_scale_gene_list.accession
     * @param {Array.<String>} [largeScaleGeneListAliases] Filter by large_scale_gene_list.aliases
     * @param {Array.<String>} [largeScaleLociListId] Filter by large_scale_loci_list.@id
     * @param {Array.<String>} [largeScaleLociListAccession] Filter by large_scale_loci_list.accession
     * @param {Array.<String>} [largeScaleLociListAliases] Filter by large_scale_loci_list.aliases
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [lowerBoundGuideCoverage] Filter by lower_bound_guide_coverage
     * @param {Array.<Number>} [lowerBoundInsertSize] Filter by lower_bound_insert_size
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [orfListId] Filter by orf_list.@id
     * @param {Array.<String>} [orfListAliases] Filter by orf_list.aliases
     * @param {Array.<String>} [orfListGene] Filter by orf_list.gene
     * @param {Array.<String>} [orfListOrfId] Filter by orf_list.orf_id
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<module:model/String>} [scope] Filter by scope
     * @param {Array.<module:model/String>} [selectionCriteria] Filter by selection_criteria
     * @param {Array.<String>} [smallScaleGeneListId] Filter by small_scale_gene_list.@id
     * @param {Array.<String>} [smallScaleGeneListGeneid] Filter by small_scale_gene_list.geneid
     * @param {Array.<String>} [smallScaleGeneListName] Filter by small_scale_gene_list.name
     * @param {Array.<String>} [smallScaleGeneListSymbol] Filter by small_scale_gene_list.symbol
     * @param {Array.<String>} [smallScaleGeneListSynonyms] Filter by small_scale_gene_list.synonyms
     * @param {Array.<module:model/Locus>} [smallScaleLociList] Filter by small_scale_loci_list
     * @param {Array.<String>} [sources] Filter by sources
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [targeton] Filter by targeton
     * @param {Array.<module:model/String>} [tilingModality] Filter by tiling_modality
     * @param {Array.<Number>} [upperBoundGuideCoverage] Filter by upper_bound_guide_coverage
     * @param {Array.<Number>} [upperBoundInsertSize] Filter by upper_bound_insert_size
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~constructLibrarySetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConstructLibrarySetResults}
     */
    constructLibrarySets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling constructLibrarySets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'applied_to_samples.@id': this.apiClient.buildCollectionParam(opts['appliedToSamplesId'], 'multi'),
        'applied_to_samples.accession': this.apiClient.buildCollectionParam(opts['appliedToSamplesAccession'], 'multi'),
        'applied_to_samples.aliases': this.apiClient.buildCollectionParam(opts['appliedToSamplesAliases'], 'multi'),
        'applied_to_samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['appliedToSamplesDiseaseTermsId'], 'multi'),
        'applied_to_samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['appliedToSamplesDiseaseTermsTermName'], 'multi'),
        'applied_to_samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['appliedToSamplesSampleTermsId'], 'multi'),
        'applied_to_samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['appliedToSamplesSampleTermsTermName'], 'multi'),
        'applied_to_samples.status': this.apiClient.buildCollectionParam(opts['appliedToSamplesStatus'], 'multi'),
        'applied_to_samples.summary': this.apiClient.buildCollectionParam(opts['appliedToSamplesSummary'], 'multi'),
        'associated_phenotypes.@id': this.apiClient.buildCollectionParam(opts['associatedPhenotypesId'], 'multi'),
        'associated_phenotypes.term_id': this.apiClient.buildCollectionParam(opts['associatedPhenotypesTermId'], 'multi'),
        'associated_phenotypes.term_name': this.apiClient.buildCollectionParam(opts['associatedPhenotypesTermName'], 'multi'),
        'average_guide_coverage': this.apiClient.buildCollectionParam(opts['averageGuideCoverage'], 'multi'),
        'average_insert_size': this.apiClient.buildCollectionParam(opts['averageInsertSize'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'exon': this.apiClient.buildCollectionParam(opts['exon'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'guide_type': this.apiClient.buildCollectionParam(opts['guideType'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'integrated_content_files': this.apiClient.buildCollectionParam(opts['integratedContentFiles'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'large_scale_gene_list.@id': this.apiClient.buildCollectionParam(opts['largeScaleGeneListId'], 'multi'),
        'large_scale_gene_list.accession': this.apiClient.buildCollectionParam(opts['largeScaleGeneListAccession'], 'multi'),
        'large_scale_gene_list.aliases': this.apiClient.buildCollectionParam(opts['largeScaleGeneListAliases'], 'multi'),
        'large_scale_loci_list.@id': this.apiClient.buildCollectionParam(opts['largeScaleLociListId'], 'multi'),
        'large_scale_loci_list.accession': this.apiClient.buildCollectionParam(opts['largeScaleLociListAccession'], 'multi'),
        'large_scale_loci_list.aliases': this.apiClient.buildCollectionParam(opts['largeScaleLociListAliases'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'lower_bound_guide_coverage': this.apiClient.buildCollectionParam(opts['lowerBoundGuideCoverage'], 'multi'),
        'lower_bound_insert_size': this.apiClient.buildCollectionParam(opts['lowerBoundInsertSize'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'orf_list.@id': this.apiClient.buildCollectionParam(opts['orfListId'], 'multi'),
        'orf_list.aliases': this.apiClient.buildCollectionParam(opts['orfListAliases'], 'multi'),
        'orf_list.gene': this.apiClient.buildCollectionParam(opts['orfListGene'], 'multi'),
        'orf_list.orf_id': this.apiClient.buildCollectionParam(opts['orfListOrfId'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'multi'),
        'selection_criteria': this.apiClient.buildCollectionParam(opts['selectionCriteria'], 'multi'),
        'small_scale_gene_list.@id': this.apiClient.buildCollectionParam(opts['smallScaleGeneListId'], 'multi'),
        'small_scale_gene_list.geneid': this.apiClient.buildCollectionParam(opts['smallScaleGeneListGeneid'], 'multi'),
        'small_scale_gene_list.name': this.apiClient.buildCollectionParam(opts['smallScaleGeneListName'], 'multi'),
        'small_scale_gene_list.symbol': this.apiClient.buildCollectionParam(opts['smallScaleGeneListSymbol'], 'multi'),
        'small_scale_gene_list.synonyms': this.apiClient.buildCollectionParam(opts['smallScaleGeneListSynonyms'], 'multi'),
        'small_scale_loci_list': this.apiClient.buildCollectionParam(opts['smallScaleLociList'], 'multi'),
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'targeton': this.apiClient.buildCollectionParam(opts['targeton'], 'multi'),
        'tiling_modality': this.apiClient.buildCollectionParam(opts['tilingModality'], 'multi'),
        'upper_bound_guide_coverage': this.apiClient.buildCollectionParam(opts['upperBoundGuideCoverage'], 'multi'),
        'upper_bound_insert_size': this.apiClient.buildCollectionParam(opts['upperBoundInsertSize'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConstructLibrarySetResults;
      return this.apiClient.callApi(
        '/construct-library-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the crisprModifications operation.
     * @callback module:api/IgvfApi~crisprModificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrisprModificationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the CrisprModification collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CrisprModification items. Supports filtering on fields within CrisprModification items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<Boolean>} [activated] Filter by activated
     * @param {Array.<String>} [activatingAgentTermId] Filter by activating_agent_term_id
     * @param {Array.<String>} [activatingAgentTermName] Filter by activating_agent_term_name
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biosamplesModified] Filter by biosamples_modified
     * @param {Array.<module:model/String>} [cas] Filter by cas
     * @param {Array.<module:model/String>} [casSpecies] Filter by cas_species
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fusedDomain] Filter by fused_domain
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<module:model/String>} [modality] Filter by modality
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [sources] Filter by sources
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [taggedProtein] Filter by tagged_protein
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~crisprModificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrisprModificationResults}
     */
    crisprModifications(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling crisprModifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'activated': this.apiClient.buildCollectionParam(opts['activated'], 'multi'),
        'activating_agent_term_id': this.apiClient.buildCollectionParam(opts['activatingAgentTermId'], 'multi'),
        'activating_agent_term_name': this.apiClient.buildCollectionParam(opts['activatingAgentTermName'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biosamples_modified': this.apiClient.buildCollectionParam(opts['biosamplesModified'], 'multi'),
        'cas': this.apiClient.buildCollectionParam(opts['cas'], 'multi'),
        'cas_species': this.apiClient.buildCollectionParam(opts['casSpecies'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'fused_domain': this.apiClient.buildCollectionParam(opts['fusedDomain'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'modality': this.apiClient.buildCollectionParam(opts['modality'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'tagged_protein': this.apiClient.buildCollectionParam(opts['taggedProtein'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrisprModificationResults;
      return this.apiClient.callApi(
        '/crispr-modifications/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curatedSets operation.
     * @callback module:api/IgvfApi~curatedSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CuratedSetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the CuratedSet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate CuratedSet items. Supports filtering on fields within CuratedSet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [assemblies] Filter by assemblies
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatform] Filter by files.sequencing_platform
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatments] Filter by samples.cell_fate_change_treatments
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySets] Filter by samples.construct_library_sets
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModifications] Filter by samples.modifications
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatments] Filter by samples.treatments
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<String>} [transcriptomeAnnotations] Filter by transcriptome_annotations
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~curatedSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CuratedSetResults}
     */
    curatedSets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling curatedSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'assemblies': this.apiClient.buildCollectionParam(opts['assemblies'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform': this.apiClient.buildCollectionParam(opts['filesSequencingPlatform'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatments'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySets'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications': this.apiClient.buildCollectionParam(opts['samplesModifications'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments': this.apiClient.buildCollectionParam(opts['samplesTreatments'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'transcriptome_annotations': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotations'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CuratedSetResults;
      return this.apiClient.callApi(
        '/curated-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the degronModifications operation.
     * @callback module:api/IgvfApi~degronModificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DegronModificationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the DegronModification collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate DegronModification items. Supports filtering on fields within DegronModification items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<Boolean>} [activated] Filter by activated
     * @param {Array.<String>} [activatingAgentTermId] Filter by activating_agent_term_id
     * @param {Array.<String>} [activatingAgentTermName] Filter by activating_agent_term_name
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biosamplesModified] Filter by biosamples_modified
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<module:model/String>} [degronSystem] Filter by degron_system
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<module:model/String>} [modality] Filter by modality
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [sources] Filter by sources
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [taggedProteins] Filter by tagged_proteins
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~degronModificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DegronModificationResults}
     */
    degronModifications(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling degronModifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'activated': this.apiClient.buildCollectionParam(opts['activated'], 'multi'),
        'activating_agent_term_id': this.apiClient.buildCollectionParam(opts['activatingAgentTermId'], 'multi'),
        'activating_agent_term_name': this.apiClient.buildCollectionParam(opts['activatingAgentTermName'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biosamples_modified': this.apiClient.buildCollectionParam(opts['biosamplesModified'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'degron_system': this.apiClient.buildCollectionParam(opts['degronSystem'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'modality': this.apiClient.buildCollectionParam(opts['modality'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'tagged_proteins': this.apiClient.buildCollectionParam(opts['taggedProteins'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DegronModificationResults;
      return this.apiClient.callApi(
        '/degron-modifications/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documents operation.
     * @callback module:api/IgvfApi~documentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Document collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Document items. Supports filtering on fields within Document items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [characterizationMethod] Filter by characterization_method
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<module:model/String>} [documentType] Filter by document_type
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [urls] Filter by urls
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~documentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentResults}
     */
    documents(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling documents");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'characterization_method': this.apiClient.buildCollectionParam(opts['characterizationMethod'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'document_type': this.apiClient.buildCollectionParam(opts['documentType'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'urls': this.apiClient.buildCollectionParam(opts['urls'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentResults;
      return this.apiClient.callApi(
        '/documents/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the download operation.
     * @callback module:api/IgvfApi~downloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file.
     * Returns underlying file associated with file metadata
     * @param {String} fileId The unique identifier for the file to download, e.g. @id (/tabular-files/IGVFFI8092FZKL/), accession (IGVFFI8092FZKL), or UUID (fdbdc159-e5b9-40a8-b788-3f72c9886b03).
     * @param {module:api/IgvfApi~downloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    download(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling download");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{file_id}/@@download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genes operation.
     * @callback module:api/IgvfApi~genesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeneResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Gene collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Gene items. Supports filtering on fields within Gene items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [geneid] Filter by geneid
     * @param {Array.<String>} [geneidWithVersion] Filter by geneid_with_version
     * @param {Array.<module:model/GeneLocation>} [locations] Filter by locations
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [symbol] Filter by symbol
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [versionNumber] Filter by version_number
     * @param {module:api/IgvfApi~genesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeneResults}
     */
    genes(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling genes");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'geneid': this.apiClient.buildCollectionParam(opts['geneid'], 'multi'),
        'geneid_with_version': this.apiClient.buildCollectionParam(opts['geneidWithVersion'], 'multi'),
        'locations': this.apiClient.buildCollectionParam(opts['locations'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'symbol': this.apiClient.buildCollectionParam(opts['symbol'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'version_number': this.apiClient.buildCollectionParam(opts['versionNumber'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeneResults;
      return this.apiClient.callApi(
        '/genes/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the genomeBrowserAnnotationFiles operation.
     * @callback module:api/IgvfApi~genomeBrowserAnnotationFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenomeBrowserAnnotationFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the GenomeBrowserAnnotationFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate GenomeBrowserAnnotationFile items. Supports filtering on fields within GenomeBrowserAnnotationFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<module:model/String>} [assembly] Filter by assembly
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<module:model/String>} [fileFormatType] Filter by file_format_type
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~genomeBrowserAnnotationFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenomeBrowserAnnotationFileResults}
     */
    genomeBrowserAnnotationFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling genomeBrowserAnnotationFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'assembly': this.apiClient.buildCollectionParam(opts['assembly'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_format_type': this.apiClient.buildCollectionParam(opts['fileFormatType'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenomeBrowserAnnotationFileResults;
      return this.apiClient.callApi(
        '/genome-browser-annotation-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/IgvfApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item information
     * Retrieve detailed information about a specific item using its @id or uuid.
     * @param {String} resourceId The unique identifier for the resource i.e. @id (`/sequence-files/IGVFFI1165AJSO/`), accession (`IGVFFI1165AJSO`) or UUID (`fffcd64e-af02-4675-8953-7352459ee06a`).
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {module:api/IgvfApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Item}
     */
    getById(resourceId, frame, callback) {
      let postBody = null;
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getById");
      }
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling getById");
      }

      let pathParams = {
        'resource_id': resourceId
      };
      let queryParams = {
        'frame': frame
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Item;
      return this.apiClient.callApi(
        '/{resource_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the humanDonors operation.
     * @callback module:api/IgvfApi~humanDonorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HumanDonorResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the HumanDonor collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate HumanDonor items. Supports filtering on fields within HumanDonor items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [ethnicities] Filter by ethnicities
     * @param {Array.<String>} [humanDonorIdentifiers] Filter by human_donor_identifiers
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [phenotypicFeaturesId] Filter by phenotypic_features.@id
     * @param {Array.<String>} [phenotypicFeaturesFeatureId] Filter by phenotypic_features.feature.@id
     * @param {Array.<String>} [phenotypicFeaturesFeatureTermId] Filter by phenotypic_features.feature.term_id
     * @param {Array.<String>} [phenotypicFeaturesFeatureTermName] Filter by phenotypic_features.feature.term_name
     * @param {Array.<String>} [phenotypicFeaturesObservationDate] Filter by phenotypic_features.observation_date
     * @param {Array.<module:model/String>} [phenotypicFeaturesQuantityUnits] Filter by phenotypic_features.quantity_units
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [relatedDonorsDonorId] Filter by related_donors.donor.@id
     * @param {Array.<String>} [relatedDonorsDonorAccession] Filter by related_donors.donor.accession
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~humanDonorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HumanDonorResults}
     */
    humanDonors(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling humanDonors");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'ethnicities': this.apiClient.buildCollectionParam(opts['ethnicities'], 'multi'),
        'human_donor_identifiers': this.apiClient.buildCollectionParam(opts['humanDonorIdentifiers'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'phenotypic_features.@id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesId'], 'multi'),
        'phenotypic_features.feature.@id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureId'], 'multi'),
        'phenotypic_features.feature.term_id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureTermId'], 'multi'),
        'phenotypic_features.feature.term_name': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureTermName'], 'multi'),
        'phenotypic_features.observation_date': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesObservationDate'], 'multi'),
        'phenotypic_features.quantity_units': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesQuantityUnits'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'related_donors.donor.@id': this.apiClient.buildCollectionParam(opts['relatedDonorsDonorId'], 'multi'),
        'related_donors.donor.accession': this.apiClient.buildCollectionParam(opts['relatedDonorsDonorAccession'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HumanDonorResults;
      return this.apiClient.callApi(
        '/human-donors/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageFiles operation.
     * @callback module:api/IgvfApi~imageFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ImageFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ImageFile items. Supports filtering on fields within ImageFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~imageFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageFileResults}
     */
    imageFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling imageFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageFileResults;
      return this.apiClient.callApi(
        '/image-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the images operation.
     * @callback module:api/IgvfApi~imagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Image collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Image items. Supports filtering on fields within Image items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [caption] Filter by caption
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [downloadUrl] Filter by download_url
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [thumbNail] Filter by thumb_nail
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~imagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageResults}
     */
    images(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling images");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'caption': this.apiClient.buildCollectionParam(opts['caption'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'download_url': this.apiClient.buildCollectionParam(opts['downloadUrl'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'thumb_nail': this.apiClient.buildCollectionParam(opts['thumbNail'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageResults;
      return this.apiClient.callApi(
        '/images/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inVitroSystems operation.
     * @callback module:api/IgvfApi~inVitroSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InVitroSystemResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the InVitroSystem collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InVitroSystem items. Supports filtering on fields within InVitroSystem items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [age] Filter by age
     * @param {Array.<module:model/String>} [ageUnits] Filter by age_units
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biomarkers] Filter by biomarkers
     * @param {Array.<String>} [cellFateChangeProtocol] Filter by cell_fate_change_protocol
     * @param {Array.<String>} [cellFateChangeTreatmentsId] Filter by cell_fate_change_treatments.@id
     * @param {Array.<module:model/String>} [cellFateChangeTreatmentsPurpose] Filter by cell_fate_change_treatments.purpose
     * @param {Array.<module:model/String>} [cellFateChangeTreatmentsStatus] Filter by cell_fate_change_treatments.status
     * @param {Array.<String>} [cellFateChangeTreatmentsSummary] Filter by cell_fate_change_treatments.summary
     * @param {Array.<module:model/String>} [cellFateChangeTreatmentsTreatmentType] Filter by cell_fate_change_treatments.treatment_type
     * @param {Array.<String>} [cellularSubPool] Filter by cellular_sub_pool
     * @param {Array.<module:model/String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySets] Filter by construct_library_sets
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [demultiplexedFrom] Filter by demultiplexed_from
     * @param {Array.<String>} [demultiplexedTo] Filter by demultiplexed_to
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [diseaseTermsId] Filter by disease_terms.@id
     * @param {Array.<String>} [diseaseTermsTermName] Filter by disease_terms.term_name
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<Boolean>} [embryonic] Filter by embryonic
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<module:model/String>} [growthMedium] Filter by growth_medium
     * @param {Array.<String>} [institutionalCertificatesId] Filter by institutional_certificates.@id
     * @param {Array.<String>} [institutionalCertificatesCertificateIdentifier] Filter by institutional_certificates.certificate_identifier
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [lowerBoundAge] Filter by lower_bound_age
     * @param {Array.<Number>} [lowerBoundAgeInHours] Filter by lower_bound_age_in_hours
     * @param {Array.<String>} [modificationsId] Filter by modifications.@id
     * @param {Array.<module:model/String>} [modificationsStatus] Filter by modifications.status
     * @param {Array.<String>} [modificationsSummary] Filter by modifications.summary
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [originatedFromId] Filter by originated_from.@id
     * @param {Array.<String>} [originatedFromAccession] Filter by originated_from.accession
     * @param {Array.<String>} [partOf] Filter by part_of
     * @param {Array.<String>} [parts] Filter by parts
     * @param {Array.<Number>} [passageNumber] Filter by passage_number
     * @param {Array.<String>} [pooledFrom] Filter by pooled_from
     * @param {Array.<String>} [pooledIn] Filter by pooled_in
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [targetedSampleTerm] Filter by targeted_sample_term
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<Number>} [timePostChange] Filter by time_post_change
     * @param {Array.<module:model/String>} [timePostChangeUnits] Filter by time_post_change_units
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [treatmentsId] Filter by treatments.@id
     * @param {Array.<module:model/String>} [treatmentsPurpose] Filter by treatments.purpose
     * @param {Array.<module:model/String>} [treatmentsStatus] Filter by treatments.status
     * @param {Array.<String>} [treatmentsSummary] Filter by treatments.summary
     * @param {Array.<module:model/String>} [treatmentsTreatmentType] Filter by treatments.treatment_type
     * @param {Array.<Number>} [upperBoundAge] Filter by upper_bound_age
     * @param {Array.<Number>} [upperBoundAgeInHours] Filter by upper_bound_age_in_hours
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~inVitroSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InVitroSystemResults}
     */
    inVitroSystems(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling inVitroSystems");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'age': this.apiClient.buildCollectionParam(opts['age'], 'multi'),
        'age_units': this.apiClient.buildCollectionParam(opts['ageUnits'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biomarkers': this.apiClient.buildCollectionParam(opts['biomarkers'], 'multi'),
        'cell_fate_change_protocol': this.apiClient.buildCollectionParam(opts['cellFateChangeProtocol'], 'multi'),
        'cell_fate_change_treatments.@id': this.apiClient.buildCollectionParam(opts['cellFateChangeTreatmentsId'], 'multi'),
        'cell_fate_change_treatments.purpose': this.apiClient.buildCollectionParam(opts['cellFateChangeTreatmentsPurpose'], 'multi'),
        'cell_fate_change_treatments.status': this.apiClient.buildCollectionParam(opts['cellFateChangeTreatmentsStatus'], 'multi'),
        'cell_fate_change_treatments.summary': this.apiClient.buildCollectionParam(opts['cellFateChangeTreatmentsSummary'], 'multi'),
        'cell_fate_change_treatments.treatment_type': this.apiClient.buildCollectionParam(opts['cellFateChangeTreatmentsTreatmentType'], 'multi'),
        'cellular_sub_pool': this.apiClient.buildCollectionParam(opts['cellularSubPool'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets': this.apiClient.buildCollectionParam(opts['constructLibrarySets'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'demultiplexed_from': this.apiClient.buildCollectionParam(opts['demultiplexedFrom'], 'multi'),
        'demultiplexed_to': this.apiClient.buildCollectionParam(opts['demultiplexedTo'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'disease_terms.@id': this.apiClient.buildCollectionParam(opts['diseaseTermsId'], 'multi'),
        'disease_terms.term_name': this.apiClient.buildCollectionParam(opts['diseaseTermsTermName'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'embryonic': this.apiClient.buildCollectionParam(opts['embryonic'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'growth_medium': this.apiClient.buildCollectionParam(opts['growthMedium'], 'multi'),
        'institutional_certificates.@id': this.apiClient.buildCollectionParam(opts['institutionalCertificatesId'], 'multi'),
        'institutional_certificates.certificate_identifier': this.apiClient.buildCollectionParam(opts['institutionalCertificatesCertificateIdentifier'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'lower_bound_age': this.apiClient.buildCollectionParam(opts['lowerBoundAge'], 'multi'),
        'lower_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['lowerBoundAgeInHours'], 'multi'),
        'modifications.@id': this.apiClient.buildCollectionParam(opts['modificationsId'], 'multi'),
        'modifications.status': this.apiClient.buildCollectionParam(opts['modificationsStatus'], 'multi'),
        'modifications.summary': this.apiClient.buildCollectionParam(opts['modificationsSummary'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'originated_from.@id': this.apiClient.buildCollectionParam(opts['originatedFromId'], 'multi'),
        'originated_from.accession': this.apiClient.buildCollectionParam(opts['originatedFromAccession'], 'multi'),
        'part_of': this.apiClient.buildCollectionParam(opts['partOf'], 'multi'),
        'parts': this.apiClient.buildCollectionParam(opts['parts'], 'multi'),
        'passage_number': this.apiClient.buildCollectionParam(opts['passageNumber'], 'multi'),
        'pooled_from': this.apiClient.buildCollectionParam(opts['pooledFrom'], 'multi'),
        'pooled_in': this.apiClient.buildCollectionParam(opts['pooledIn'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'targeted_sample_term': this.apiClient.buildCollectionParam(opts['targetedSampleTerm'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'time_post_change': this.apiClient.buildCollectionParam(opts['timePostChange'], 'multi'),
        'time_post_change_units': this.apiClient.buildCollectionParam(opts['timePostChangeUnits'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'treatments.@id': this.apiClient.buildCollectionParam(opts['treatmentsId'], 'multi'),
        'treatments.purpose': this.apiClient.buildCollectionParam(opts['treatmentsPurpose'], 'multi'),
        'treatments.status': this.apiClient.buildCollectionParam(opts['treatmentsStatus'], 'multi'),
        'treatments.summary': this.apiClient.buildCollectionParam(opts['treatmentsSummary'], 'multi'),
        'treatments.treatment_type': this.apiClient.buildCollectionParam(opts['treatmentsTreatmentType'], 'multi'),
        'upper_bound_age': this.apiClient.buildCollectionParam(opts['upperBoundAge'], 'multi'),
        'upper_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['upperBoundAgeInHours'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InVitroSystemResults;
      return this.apiClient.callApi(
        '/in-vitro-systems/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionalCertificates operation.
     * @callback module:api/IgvfApi~institutionalCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstitutionalCertificateResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the InstitutionalCertificate collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate InstitutionalCertificate items. Supports filtering on fields within InstitutionalCertificate items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [certificateIdentifier] Filter by certificate_identifier
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<module:model/String>} [dataUseLimitation] Filter by data_use_limitation
     * @param {Array.<module:model/String>} [dataUseLimitationModifiers] Filter by data_use_limitation_modifiers
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [samples] Filter by samples
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [urls] Filter by urls
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~institutionalCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstitutionalCertificateResults}
     */
    institutionalCertificates(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling institutionalCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'certificate_identifier': this.apiClient.buildCollectionParam(opts['certificateIdentifier'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'data_use_limitation': this.apiClient.buildCollectionParam(opts['dataUseLimitation'], 'multi'),
        'data_use_limitation_modifiers': this.apiClient.buildCollectionParam(opts['dataUseLimitationModifiers'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'samples': this.apiClient.buildCollectionParam(opts['samples'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'urls': this.apiClient.buildCollectionParam(opts['urls'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstitutionalCertificateResults;
      return this.apiClient.callApi(
        '/institutional-certificates/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the labs operation.
     * @callback module:api/IgvfApi~labsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LabResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Lab collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Lab items. Supports filtering on fields within Lab items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardsId] Filter by awards.@id
     * @param {Array.<module:model/String>} [awardsComponent] Filter by awards.component
     * @param {Array.<String>} [awardsName] Filter by awards.name
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [instituteLabel] Filter by institute_label
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [pi] Filter by pi
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~labsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LabResults}
     */
    labs(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling labs");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'awards.@id': this.apiClient.buildCollectionParam(opts['awardsId'], 'multi'),
        'awards.component': this.apiClient.buildCollectionParam(opts['awardsComponent'], 'multi'),
        'awards.name': this.apiClient.buildCollectionParam(opts['awardsName'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'institute_label': this.apiClient.buildCollectionParam(opts['instituteLabel'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'pi': this.apiClient.buildCollectionParam(opts['pi'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LabResults;
      return this.apiClient.callApi(
        '/labs/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the matrixFiles operation.
     * @callback module:api/IgvfApi~matrixFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatrixFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the MatrixFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MatrixFile items. Supports filtering on fields within MatrixFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentSummary] Filter by content_summary
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<module:model/String>} [dimension1] Filter by dimension1
     * @param {Array.<module:model/String>} [dimension2] Filter by dimension2
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [referenceFiles] Filter by reference_files
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~matrixFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatrixFileResults}
     */
    matrixFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling matrixFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_summary': this.apiClient.buildCollectionParam(opts['contentSummary'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'dimension1': this.apiClient.buildCollectionParam(opts['dimension1'], 'multi'),
        'dimension2': this.apiClient.buildCollectionParam(opts['dimension2'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'reference_files': this.apiClient.buildCollectionParam(opts['referenceFiles'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatrixFileResults;
      return this.apiClient.callApi(
        '/matrix-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the measurementSets operation.
     * @callback module:api/IgvfApi~measurementSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeasurementSetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the MeasurementSet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MeasurementSet items. Supports filtering on fields within MeasurementSet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [assayTermId] Filter by assay_term.@id
     * @param {Array.<String>} [assayTermTermName] Filter by assay_term.term_name
     * @param {Array.<String>} [auxiliarySetsId] Filter by auxiliary_sets.@id
     * @param {Array.<String>} [auxiliarySetsAccession] Filter by auxiliary_sets.accession
     * @param {Array.<String>} [auxiliarySetsAliases] Filter by auxiliary_sets.aliases
     * @param {Array.<module:model/String>} [auxiliarySetsFileSetType] Filter by auxiliary_sets.file_set_type
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlFileSetsId] Filter by control_file_sets.@id
     * @param {Array.<String>} [controlFileSetsAccession] Filter by control_file_sets.accession
     * @param {Array.<String>} [controlFileSetsAliases] Filter by control_file_sets.aliases
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<String>} [externalImageUrl] Filter by external_image_url
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatformId] Filter by files.sequencing_platform.@id
     * @param {Array.<String>} [filesSequencingPlatformTermName] Filter by files.sequencing_platform.term_name
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [libraryConstructionPlatformId] Filter by library_construction_platform.@id
     * @param {Array.<String>} [libraryConstructionPlatformTermName] Filter by library_construction_platform.term_name
     * @param {Array.<Number>} [multiomeSize] Filter by multiome_size
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [preferredAssayTitle] Filter by preferred_assay_title
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [relatedMultiomeDatasetsId] Filter by related_multiome_datasets.@id
     * @param {Array.<String>} [relatedMultiomeDatasetsAccession] Filter by related_multiome_datasets.accession
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatmentsId] Filter by samples.cell_fate_change_treatments.@id
     * @param {Array.<module:model/String>} [samplesCellFateChangeTreatmentsPurpose] Filter by samples.cell_fate_change_treatments.purpose
     * @param {Array.<String>} [samplesCellFateChangeTreatmentsSummary] Filter by samples.cell_fate_change_treatments.summary
     * @param {Array.<module:model/String>} [samplesCellFateChangeTreatmentsTreatmentType] Filter by samples.cell_fate_change_treatments.treatment_type
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySetsId] Filter by samples.construct_library_sets.@id
     * @param {Array.<String>} [samplesConstructLibrarySetsAccession] Filter by samples.construct_library_sets.accession
     * @param {Array.<module:model/String>} [samplesConstructLibrarySetsFileSetType] Filter by samples.construct_library_sets.file_set_type
     * @param {Array.<String>} [samplesConstructLibrarySetsSmallScaleGeneListId] Filter by samples.construct_library_sets.small_scale_gene_list.@id
     * @param {Array.<String>} [samplesConstructLibrarySetsSmallScaleGeneListGeneid] Filter by samples.construct_library_sets.small_scale_gene_list.geneid
     * @param {Array.<String>} [samplesConstructLibrarySetsSmallScaleGeneListName] Filter by samples.construct_library_sets.small_scale_gene_list.name
     * @param {Array.<String>} [samplesConstructLibrarySetsSmallScaleGeneListSummary] Filter by samples.construct_library_sets.small_scale_gene_list.summary
     * @param {Array.<String>} [samplesConstructLibrarySetsSmallScaleGeneListSymbol] Filter by samples.construct_library_sets.small_scale_gene_list.symbol
     * @param {Array.<String>} [samplesConstructLibrarySetsSummary] Filter by samples.construct_library_sets.summary
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModificationsId] Filter by samples.modifications.@id
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatmentsId] Filter by samples.treatments.@id
     * @param {Array.<module:model/String>} [samplesTreatmentsPurpose] Filter by samples.treatments.purpose
     * @param {Array.<String>} [samplesTreatmentsSummary] Filter by samples.treatments.summary
     * @param {Array.<module:model/String>} [samplesTreatmentsTreatmentType] Filter by samples.treatments.treatment_type
     * @param {Array.<module:model/String>} [sequencingLibraryTypes] Filter by sequencing_library_types
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [targetedGenesId] Filter by targeted_genes.@id
     * @param {Array.<String>} [targetedGenesGeneid] Filter by targeted_genes.geneid
     * @param {Array.<String>} [targetedGenesName] Filter by targeted_genes.name
     * @param {Array.<String>} [targetedGenesSymbol] Filter by targeted_genes.symbol
     * @param {Array.<String>} [targetedGenesSynonyms] Filter by targeted_genes.synonyms
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~measurementSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeasurementSetResults}
     */
    measurementSets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling measurementSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'assay_term.@id': this.apiClient.buildCollectionParam(opts['assayTermId'], 'multi'),
        'assay_term.term_name': this.apiClient.buildCollectionParam(opts['assayTermTermName'], 'multi'),
        'auxiliary_sets.@id': this.apiClient.buildCollectionParam(opts['auxiliarySetsId'], 'multi'),
        'auxiliary_sets.accession': this.apiClient.buildCollectionParam(opts['auxiliarySetsAccession'], 'multi'),
        'auxiliary_sets.aliases': this.apiClient.buildCollectionParam(opts['auxiliarySetsAliases'], 'multi'),
        'auxiliary_sets.file_set_type': this.apiClient.buildCollectionParam(opts['auxiliarySetsFileSetType'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_file_sets.@id': this.apiClient.buildCollectionParam(opts['controlFileSetsId'], 'multi'),
        'control_file_sets.accession': this.apiClient.buildCollectionParam(opts['controlFileSetsAccession'], 'multi'),
        'control_file_sets.aliases': this.apiClient.buildCollectionParam(opts['controlFileSetsAliases'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'external_image_url': this.apiClient.buildCollectionParam(opts['externalImageUrl'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform.@id': this.apiClient.buildCollectionParam(opts['filesSequencingPlatformId'], 'multi'),
        'files.sequencing_platform.term_name': this.apiClient.buildCollectionParam(opts['filesSequencingPlatformTermName'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'library_construction_platform.@id': this.apiClient.buildCollectionParam(opts['libraryConstructionPlatformId'], 'multi'),
        'library_construction_platform.term_name': this.apiClient.buildCollectionParam(opts['libraryConstructionPlatformTermName'], 'multi'),
        'multiome_size': this.apiClient.buildCollectionParam(opts['multiomeSize'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'preferred_assay_title': this.apiClient.buildCollectionParam(opts['preferredAssayTitle'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'related_multiome_datasets.@id': this.apiClient.buildCollectionParam(opts['relatedMultiomeDatasetsId'], 'multi'),
        'related_multiome_datasets.accession': this.apiClient.buildCollectionParam(opts['relatedMultiomeDatasetsAccession'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments.@id': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatmentsId'], 'multi'),
        'samples.cell_fate_change_treatments.purpose': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatmentsPurpose'], 'multi'),
        'samples.cell_fate_change_treatments.summary': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatmentsSummary'], 'multi'),
        'samples.cell_fate_change_treatments.treatment_type': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatmentsTreatmentType'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets.@id': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsId'], 'multi'),
        'samples.construct_library_sets.accession': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsAccession'], 'multi'),
        'samples.construct_library_sets.file_set_type': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsFileSetType'], 'multi'),
        'samples.construct_library_sets.small_scale_gene_list.@id': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSmallScaleGeneListId'], 'multi'),
        'samples.construct_library_sets.small_scale_gene_list.geneid': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSmallScaleGeneListGeneid'], 'multi'),
        'samples.construct_library_sets.small_scale_gene_list.name': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSmallScaleGeneListName'], 'multi'),
        'samples.construct_library_sets.small_scale_gene_list.summary': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSmallScaleGeneListSummary'], 'multi'),
        'samples.construct_library_sets.small_scale_gene_list.symbol': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSmallScaleGeneListSymbol'], 'multi'),
        'samples.construct_library_sets.summary': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSummary'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications.@id': this.apiClient.buildCollectionParam(opts['samplesModificationsId'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments.@id': this.apiClient.buildCollectionParam(opts['samplesTreatmentsId'], 'multi'),
        'samples.treatments.purpose': this.apiClient.buildCollectionParam(opts['samplesTreatmentsPurpose'], 'multi'),
        'samples.treatments.summary': this.apiClient.buildCollectionParam(opts['samplesTreatmentsSummary'], 'multi'),
        'samples.treatments.treatment_type': this.apiClient.buildCollectionParam(opts['samplesTreatmentsTreatmentType'], 'multi'),
        'sequencing_library_types': this.apiClient.buildCollectionParam(opts['sequencingLibraryTypes'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'targeted_genes.@id': this.apiClient.buildCollectionParam(opts['targetedGenesId'], 'multi'),
        'targeted_genes.geneid': this.apiClient.buildCollectionParam(opts['targetedGenesGeneid'], 'multi'),
        'targeted_genes.name': this.apiClient.buildCollectionParam(opts['targetedGenesName'], 'multi'),
        'targeted_genes.symbol': this.apiClient.buildCollectionParam(opts['targetedGenesSymbol'], 'multi'),
        'targeted_genes.synonyms': this.apiClient.buildCollectionParam(opts['targetedGenesSynonyms'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MeasurementSetResults;
      return this.apiClient.callApi(
        '/measurement-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelFiles operation.
     * @callback module:api/IgvfApi~modelFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ModelFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelFile items. Supports filtering on fields within ModelFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [anvilUrl] Filter by anvil_url
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~modelFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelFileResults}
     */
    modelFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling modelFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'anvil_url': this.apiClient.buildCollectionParam(opts['anvilUrl'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelFileResults;
      return this.apiClient.callApi(
        '/model-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelSets operation.
     * @callback module:api/IgvfApi~modelSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelSetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ModelSet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ModelSet items. Supports filtering on fields within ModelSet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [assessedGenes] Filter by assessed_genes
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatform] Filter by files.sequencing_platform
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [inputFileSetsId] Filter by input_file_sets.@id
     * @param {Array.<String>} [inputFileSetsAccession] Filter by input_file_sets.accession
     * @param {Array.<String>} [inputFileSetsAliases] Filter by input_file_sets.aliases
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [modelName] Filter by model_name
     * @param {Array.<String>} [modelVersion] Filter by model_version
     * @param {Array.<String>} [modelZooLocation] Filter by model_zoo_location
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [predictionObjects] Filter by prediction_objects
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatments] Filter by samples.cell_fate_change_treatments
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySets] Filter by samples.construct_library_sets
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModifications] Filter by samples.modifications
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatments] Filter by samples.treatments
     * @param {Array.<String>} [softwareVersion] Filter by software_version
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~modelSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelSetResults}
     */
    modelSets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling modelSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'assessed_genes': this.apiClient.buildCollectionParam(opts['assessedGenes'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform': this.apiClient.buildCollectionParam(opts['filesSequencingPlatform'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'input_file_sets.@id': this.apiClient.buildCollectionParam(opts['inputFileSetsId'], 'multi'),
        'input_file_sets.accession': this.apiClient.buildCollectionParam(opts['inputFileSetsAccession'], 'multi'),
        'input_file_sets.aliases': this.apiClient.buildCollectionParam(opts['inputFileSetsAliases'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'model_name': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'model_version': this.apiClient.buildCollectionParam(opts['modelVersion'], 'multi'),
        'model_zoo_location': this.apiClient.buildCollectionParam(opts['modelZooLocation'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'prediction_objects': this.apiClient.buildCollectionParam(opts['predictionObjects'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatments'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySets'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications': this.apiClient.buildCollectionParam(opts['samplesModifications'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments': this.apiClient.buildCollectionParam(opts['samplesTreatments'], 'multi'),
        'software_version': this.apiClient.buildCollectionParam(opts['softwareVersion'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelSetResults;
      return this.apiClient.callApi(
        '/model-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the multiplexedSamples operation.
     * @callback module:api/IgvfApi~multiplexedSamplesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultiplexedSampleResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the MultiplexedSample collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate MultiplexedSample items. Supports filtering on fields within MultiplexedSample items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [barcodeSampleMap] Filter by barcode_sample_map
     * @param {Array.<String>} [biomarkers] Filter by biomarkers
     * @param {Array.<String>} [cellularSubPool] Filter by cellular_sub_pool
     * @param {Array.<String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySetsId] Filter by construct_library_sets.@id
     * @param {Array.<String>} [constructLibrarySetsAccession] Filter by construct_library_sets.accession
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [diseaseTermsId] Filter by disease_terms.@id
     * @param {Array.<String>} [diseaseTermsTermName] Filter by disease_terms.term_name
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<String>} [institutionalCertificates] Filter by institutional_certificates
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [modificationsId] Filter by modifications.@id
     * @param {Array.<module:model/String>} [modificationsStatus] Filter by modifications.status
     * @param {Array.<String>} [modificationsSummary] Filter by modifications.summary
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [multiplexedSamplesId] Filter by multiplexed_samples.@id
     * @param {Array.<String>} [multiplexedSamplesAccession] Filter by multiplexed_samples.accession
     * @param {Array.<String>} [multiplexedSamplesConstructLibrarySets] Filter by multiplexed_samples.construct_library_sets
     * @param {Array.<String>} [multiplexedSamplesDiseaseTermsId] Filter by multiplexed_samples.disease_terms.@id
     * @param {Array.<String>} [multiplexedSamplesDiseaseTermsTermName] Filter by multiplexed_samples.disease_terms.term_name
     * @param {Array.<String>} [multiplexedSamplesDonorsId] Filter by multiplexed_samples.donors.@id
     * @param {Array.<String>} [multiplexedSamplesDonorsAccession] Filter by multiplexed_samples.donors.accession
     * @param {Array.<String>} [multiplexedSamplesSampleTermsId] Filter by multiplexed_samples.sample_terms.@id
     * @param {Array.<String>} [multiplexedSamplesSampleTermsTermName] Filter by multiplexed_samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [multiplexedSamplesStatus] Filter by multiplexed_samples.status
     * @param {Array.<String>} [multiplexedSamplesSummary] Filter by multiplexed_samples.summary
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [treatmentsId] Filter by treatments.@id
     * @param {Array.<module:model/String>} [treatmentsPurpose] Filter by treatments.purpose
     * @param {Array.<module:model/String>} [treatmentsStatus] Filter by treatments.status
     * @param {Array.<String>} [treatmentsSummary] Filter by treatments.summary
     * @param {Array.<module:model/String>} [treatmentsTreatmentType] Filter by treatments.treatment_type
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~multiplexedSamplesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultiplexedSampleResults}
     */
    multiplexedSamples(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling multiplexedSamples");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'barcode_sample_map': this.apiClient.buildCollectionParam(opts['barcodeSampleMap'], 'multi'),
        'biomarkers': this.apiClient.buildCollectionParam(opts['biomarkers'], 'multi'),
        'cellular_sub_pool': this.apiClient.buildCollectionParam(opts['cellularSubPool'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets.@id': this.apiClient.buildCollectionParam(opts['constructLibrarySetsId'], 'multi'),
        'construct_library_sets.accession': this.apiClient.buildCollectionParam(opts['constructLibrarySetsAccession'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'disease_terms.@id': this.apiClient.buildCollectionParam(opts['diseaseTermsId'], 'multi'),
        'disease_terms.term_name': this.apiClient.buildCollectionParam(opts['diseaseTermsTermName'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'institutional_certificates': this.apiClient.buildCollectionParam(opts['institutionalCertificates'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'modifications.@id': this.apiClient.buildCollectionParam(opts['modificationsId'], 'multi'),
        'modifications.status': this.apiClient.buildCollectionParam(opts['modificationsStatus'], 'multi'),
        'modifications.summary': this.apiClient.buildCollectionParam(opts['modificationsSummary'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'multiplexed_samples.@id': this.apiClient.buildCollectionParam(opts['multiplexedSamplesId'], 'multi'),
        'multiplexed_samples.accession': this.apiClient.buildCollectionParam(opts['multiplexedSamplesAccession'], 'multi'),
        'multiplexed_samples.construct_library_sets': this.apiClient.buildCollectionParam(opts['multiplexedSamplesConstructLibrarySets'], 'multi'),
        'multiplexed_samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['multiplexedSamplesDiseaseTermsId'], 'multi'),
        'multiplexed_samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['multiplexedSamplesDiseaseTermsTermName'], 'multi'),
        'multiplexed_samples.donors.@id': this.apiClient.buildCollectionParam(opts['multiplexedSamplesDonorsId'], 'multi'),
        'multiplexed_samples.donors.accession': this.apiClient.buildCollectionParam(opts['multiplexedSamplesDonorsAccession'], 'multi'),
        'multiplexed_samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['multiplexedSamplesSampleTermsId'], 'multi'),
        'multiplexed_samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['multiplexedSamplesSampleTermsTermName'], 'multi'),
        'multiplexed_samples.status': this.apiClient.buildCollectionParam(opts['multiplexedSamplesStatus'], 'multi'),
        'multiplexed_samples.summary': this.apiClient.buildCollectionParam(opts['multiplexedSamplesSummary'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'treatments.@id': this.apiClient.buildCollectionParam(opts['treatmentsId'], 'multi'),
        'treatments.purpose': this.apiClient.buildCollectionParam(opts['treatmentsPurpose'], 'multi'),
        'treatments.status': this.apiClient.buildCollectionParam(opts['treatmentsStatus'], 'multi'),
        'treatments.summary': this.apiClient.buildCollectionParam(opts['treatmentsSummary'], 'multi'),
        'treatments.treatment_type': this.apiClient.buildCollectionParam(opts['treatmentsTreatmentType'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MultiplexedSampleResults;
      return this.apiClient.callApi(
        '/multiplexed-samples/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openReadingFrames operation.
     * @callback module:api/IgvfApi~openReadingFramesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenReadingFrameResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the OpenReadingFrame collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate OpenReadingFrame items. Supports filtering on fields within OpenReadingFrame items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [award] Filter by award
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [geneId] Filter by gene.@id
     * @param {Array.<String>} [geneGeneid] Filter by gene.geneid
     * @param {Array.<String>} [geneSymbol] Filter by gene.symbol
     * @param {Array.<String>} [lab] Filter by lab
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [orfId] Filter by orf_id
     * @param {Array.<Number>} [pctCoverageOrf] Filter by pct_coverage_orf
     * @param {Array.<Number>} [pctCoverageProtein] Filter by pct_coverage_protein
     * @param {Array.<Number>} [pctIdenticalProtein] Filter by pct_identical_protein
     * @param {Array.<String>} [proteinId] Filter by protein_id
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedBy] Filter by submitted_by
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~openReadingFramesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenReadingFrameResults}
     */
    openReadingFrames(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling openReadingFrames");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award': this.apiClient.buildCollectionParam(opts['award'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'gene.@id': this.apiClient.buildCollectionParam(opts['geneId'], 'multi'),
        'gene.geneid': this.apiClient.buildCollectionParam(opts['geneGeneid'], 'multi'),
        'gene.symbol': this.apiClient.buildCollectionParam(opts['geneSymbol'], 'multi'),
        'lab': this.apiClient.buildCollectionParam(opts['lab'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'orf_id': this.apiClient.buildCollectionParam(opts['orfId'], 'multi'),
        'pct_coverage_orf': this.apiClient.buildCollectionParam(opts['pctCoverageOrf'], 'multi'),
        'pct_coverage_protein': this.apiClient.buildCollectionParam(opts['pctCoverageProtein'], 'multi'),
        'pct_identical_protein': this.apiClient.buildCollectionParam(opts['pctIdenticalProtein'], 'multi'),
        'protein_id': this.apiClient.buildCollectionParam(opts['proteinId'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by': this.apiClient.buildCollectionParam(opts['submittedBy'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenReadingFrameResults;
      return this.apiClient.callApi(
        '/open-reading-frames/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pages operation.
     * @callback module:api/IgvfApi~pagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Page collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Page items. Supports filtering on fields within Page items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [award] Filter by award
     * @param {Array.<String>} [canonicalUri] Filter by canonical_uri
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [lab] Filter by lab
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [parent] Filter by parent
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~pagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResults}
     */
    pages(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling pages");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award': this.apiClient.buildCollectionParam(opts['award'], 'multi'),
        'canonical_uri': this.apiClient.buildCollectionParam(opts['canonicalUri'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'lab': this.apiClient.buildCollectionParam(opts['lab'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'parent': this.apiClient.buildCollectionParam(opts['parent'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResults;
      return this.apiClient.callApi(
        '/pages/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phenotypeTerms operation.
     * @callback module:api/IgvfApi~phenotypeTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhenotypeTermResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the PhenotypeTerm collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypeTerm items. Supports filtering on fields within PhenotypeTerm items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [ancestors] Filter by ancestors
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [deprecatedNtrTerms] Filter by deprecated_ntr_terms
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [isA] Filter by is_a
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [ontology] Filter by ontology
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<String>} [termId] Filter by term_id
     * @param {Array.<String>} [termName] Filter by term_name
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~phenotypeTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhenotypeTermResults}
     */
    phenotypeTerms(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling phenotypeTerms");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'ancestors': this.apiClient.buildCollectionParam(opts['ancestors'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'deprecated_ntr_terms': this.apiClient.buildCollectionParam(opts['deprecatedNtrTerms'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'is_a': this.apiClient.buildCollectionParam(opts['isA'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'ontology': this.apiClient.buildCollectionParam(opts['ontology'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'term_id': this.apiClient.buildCollectionParam(opts['termId'], 'multi'),
        'term_name': this.apiClient.buildCollectionParam(opts['termName'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhenotypeTermResults;
      return this.apiClient.callApi(
        '/phenotype-terms/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phenotypicFeatures operation.
     * @callback module:api/IgvfApi~phenotypicFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhenotypicFeatureResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the PhenotypicFeature collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PhenotypicFeature items. Supports filtering on fields within PhenotypicFeature items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [featureId] Filter by feature.@id
     * @param {Array.<String>} [featureTermId] Filter by feature.term_id
     * @param {Array.<String>} [featureTermName] Filter by feature.term_name
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [observationDate] Filter by observation_date
     * @param {Array.<Number>} [quantity] Filter by quantity
     * @param {Array.<module:model/String>} [quantityUnits] Filter by quantity_units
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~phenotypicFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhenotypicFeatureResults}
     */
    phenotypicFeatures(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling phenotypicFeatures");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'feature.@id': this.apiClient.buildCollectionParam(opts['featureId'], 'multi'),
        'feature.term_id': this.apiClient.buildCollectionParam(opts['featureTermId'], 'multi'),
        'feature.term_name': this.apiClient.buildCollectionParam(opts['featureTermName'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'observation_date': this.apiClient.buildCollectionParam(opts['observationDate'], 'multi'),
        'quantity': this.apiClient.buildCollectionParam(opts['quantity'], 'multi'),
        'quantity_units': this.apiClient.buildCollectionParam(opts['quantityUnits'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhenotypicFeatureResults;
      return this.apiClient.callApi(
        '/phenotypic-features/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformTerms operation.
     * @callback module:api/IgvfApi~platformTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlatformTermResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the PlatformTerm collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PlatformTerm items. Supports filtering on fields within PlatformTerm items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [ancestors] Filter by ancestors
     * @param {Array.<module:model/String>} [company] Filter by company
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [deprecatedNtrTerms] Filter by deprecated_ntr_terms
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [isA] Filter by is_a
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [ontology] Filter by ontology
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [sequencingKits] Filter by sequencing_kits
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<String>} [termId] Filter by term_id
     * @param {Array.<String>} [termName] Filter by term_name
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~platformTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlatformTermResults}
     */
    platformTerms(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling platformTerms");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'ancestors': this.apiClient.buildCollectionParam(opts['ancestors'], 'multi'),
        'company': this.apiClient.buildCollectionParam(opts['company'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'deprecated_ntr_terms': this.apiClient.buildCollectionParam(opts['deprecatedNtrTerms'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'is_a': this.apiClient.buildCollectionParam(opts['isA'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'ontology': this.apiClient.buildCollectionParam(opts['ontology'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'sequencing_kits': this.apiClient.buildCollectionParam(opts['sequencingKits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'term_id': this.apiClient.buildCollectionParam(opts['termId'], 'multi'),
        'term_name': this.apiClient.buildCollectionParam(opts['termName'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformTermResults;
      return this.apiClient.callApi(
        '/platform-terms/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionSets operation.
     * @callback module:api/IgvfApi~predictionSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionSetResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the PredictionSet collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PredictionSet items. Supports filtering on fields within PredictionSet items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [awardContactPiId] Filter by award.contact_pi.@id
     * @param {Array.<String>} [awardContactPiTitle] Filter by award.contact_pi.title
     * @param {Array.<String>} [awardTitle] Filter by award.title
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [controlForId] Filter by control_for.@id
     * @param {Array.<String>} [controlForAccession] Filter by control_for.accession
     * @param {Array.<String>} [controlForAliases] Filter by control_for.aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donorsId] Filter by donors.@id
     * @param {Array.<String>} [donorsAccession] Filter by donors.accession
     * @param {Array.<String>} [donorsAliases] Filter by donors.aliases
     * @param {Array.<module:model/String>} [donorsSex] Filter by donors.sex
     * @param {Array.<module:model/String>} [donorsStatus] Filter by donors.status
     * @param {Array.<String>} [donorsTaxa] Filter by donors.taxa
     * @param {Array.<module:model/String>} [fileSetType] Filter by file_set_type
     * @param {Array.<String>} [filesId] Filter by files.@id
     * @param {Array.<String>} [filesAccession] Filter by files.accession
     * @param {Array.<String>} [filesAliases] Filter by files.aliases
     * @param {Array.<String>} [filesContentType] Filter by files.content_type
     * @param {Array.<String>} [filesCreationTimestamp] Filter by files.creation_timestamp
     * @param {Array.<String>} [filesFileFormat] Filter by files.file_format
     * @param {Array.<Number>} [filesFileSize] Filter by files.file_size
     * @param {Array.<String>} [filesHref] Filter by files.href
     * @param {Array.<String>} [filesS3Uri] Filter by files.s3_uri
     * @param {Array.<String>} [filesSequencingPlatform] Filter by files.sequencing_platform
     * @param {Array.<String>} [filesSubmittedFileName] Filter by files.submitted_file_name
     * @param {Array.<module:model/String>} [filesUploadStatus] Filter by files.upload_status
     * @param {Array.<String>} [inputFileSetFor] Filter by input_file_set_for
     * @param {Array.<String>} [inputFileSets] Filter by input_file_sets
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [largeScaleGeneListId] Filter by large_scale_gene_list.@id
     * @param {Array.<String>} [largeScaleGeneListAccession] Filter by large_scale_gene_list.accession
     * @param {Array.<String>} [largeScaleGeneListAliases] Filter by large_scale_gene_list.aliases
     * @param {Array.<String>} [largeScaleLociListId] Filter by large_scale_loci_list.@id
     * @param {Array.<String>} [largeScaleLociListAccession] Filter by large_scale_loci_list.accession
     * @param {Array.<String>} [largeScaleLociListAliases] Filter by large_scale_loci_list.aliases
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [samplesId] Filter by samples.@id
     * @param {Array.<String>} [samplesAccession] Filter by samples.accession
     * @param {Array.<String>} [samplesAliases] Filter by samples.aliases
     * @param {Array.<String>} [samplesCellFateChangeTreatments] Filter by samples.cell_fate_change_treatments
     * @param {Array.<module:model/String>} [samplesClassifications] Filter by samples.classifications
     * @param {Array.<String>} [samplesConstructLibrarySetsId] Filter by samples.construct_library_sets.@id
     * @param {Array.<String>} [samplesConstructLibrarySetsAccession] Filter by samples.construct_library_sets.accession
     * @param {Array.<String>} [samplesConstructLibrarySetsSummary] Filter by samples.construct_library_sets.summary
     * @param {Array.<String>} [samplesDiseaseTermsId] Filter by samples.disease_terms.@id
     * @param {Array.<String>} [samplesDiseaseTermsTermName] Filter by samples.disease_terms.term_name
     * @param {Array.<String>} [samplesModifications] Filter by samples.modifications
     * @param {Array.<String>} [samplesSampleTermsId] Filter by samples.sample_terms.@id
     * @param {Array.<String>} [samplesSampleTermsAliases] Filter by samples.sample_terms.aliases
     * @param {Array.<module:model/String>} [samplesSampleTermsStatus] Filter by samples.sample_terms.status
     * @param {Array.<String>} [samplesSampleTermsSummary] Filter by samples.sample_terms.summary
     * @param {Array.<String>} [samplesSampleTermsTermName] Filter by samples.sample_terms.term_name
     * @param {Array.<module:model/String>} [samplesStatus] Filter by samples.status
     * @param {Array.<String>} [samplesSummary] Filter by samples.summary
     * @param {Array.<String>} [samplesTargetedSampleTermId] Filter by samples.targeted_sample_term.@id
     * @param {Array.<String>} [samplesTargetedSampleTermTermName] Filter by samples.targeted_sample_term.term_name
     * @param {Array.<module:model/String>} [samplesTaxa] Filter by samples.taxa
     * @param {Array.<String>} [samplesTreatments] Filter by samples.treatments
     * @param {Array.<module:model/String>} [scope] Filter by scope
     * @param {Array.<String>} [smallScaleGeneListId] Filter by small_scale_gene_list.@id
     * @param {Array.<String>} [smallScaleGeneListGeneid] Filter by small_scale_gene_list.geneid
     * @param {Array.<String>} [smallScaleGeneListName] Filter by small_scale_gene_list.name
     * @param {Array.<String>} [smallScaleGeneListSymbol] Filter by small_scale_gene_list.symbol
     * @param {Array.<String>} [smallScaleGeneListSynonyms] Filter by small_scale_gene_list.synonyms
     * @param {Array.<module:model/Locus>} [smallScaleLociList] Filter by small_scale_loci_list
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFilesTimestamp] Filter by submitted_files_timestamp
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~predictionSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionSetResults}
     */
    predictionSets(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling predictionSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'award.contact_pi.@id': this.apiClient.buildCollectionParam(opts['awardContactPiId'], 'multi'),
        'award.contact_pi.title': this.apiClient.buildCollectionParam(opts['awardContactPiTitle'], 'multi'),
        'award.title': this.apiClient.buildCollectionParam(opts['awardTitle'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'control_for.@id': this.apiClient.buildCollectionParam(opts['controlForId'], 'multi'),
        'control_for.accession': this.apiClient.buildCollectionParam(opts['controlForAccession'], 'multi'),
        'control_for.aliases': this.apiClient.buildCollectionParam(opts['controlForAliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors.@id': this.apiClient.buildCollectionParam(opts['donorsId'], 'multi'),
        'donors.accession': this.apiClient.buildCollectionParam(opts['donorsAccession'], 'multi'),
        'donors.aliases': this.apiClient.buildCollectionParam(opts['donorsAliases'], 'multi'),
        'donors.sex': this.apiClient.buildCollectionParam(opts['donorsSex'], 'multi'),
        'donors.status': this.apiClient.buildCollectionParam(opts['donorsStatus'], 'multi'),
        'donors.taxa': this.apiClient.buildCollectionParam(opts['donorsTaxa'], 'multi'),
        'file_set_type': this.apiClient.buildCollectionParam(opts['fileSetType'], 'multi'),
        'files.@id': this.apiClient.buildCollectionParam(opts['filesId'], 'multi'),
        'files.accession': this.apiClient.buildCollectionParam(opts['filesAccession'], 'multi'),
        'files.aliases': this.apiClient.buildCollectionParam(opts['filesAliases'], 'multi'),
        'files.content_type': this.apiClient.buildCollectionParam(opts['filesContentType'], 'multi'),
        'files.creation_timestamp': this.apiClient.buildCollectionParam(opts['filesCreationTimestamp'], 'multi'),
        'files.file_format': this.apiClient.buildCollectionParam(opts['filesFileFormat'], 'multi'),
        'files.file_size': this.apiClient.buildCollectionParam(opts['filesFileSize'], 'multi'),
        'files.href': this.apiClient.buildCollectionParam(opts['filesHref'], 'multi'),
        'files.s3_uri': this.apiClient.buildCollectionParam(opts['filesS3Uri'], 'multi'),
        'files.sequencing_platform': this.apiClient.buildCollectionParam(opts['filesSequencingPlatform'], 'multi'),
        'files.submitted_file_name': this.apiClient.buildCollectionParam(opts['filesSubmittedFileName'], 'multi'),
        'files.upload_status': this.apiClient.buildCollectionParam(opts['filesUploadStatus'], 'multi'),
        'input_file_set_for': this.apiClient.buildCollectionParam(opts['inputFileSetFor'], 'multi'),
        'input_file_sets': this.apiClient.buildCollectionParam(opts['inputFileSets'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'large_scale_gene_list.@id': this.apiClient.buildCollectionParam(opts['largeScaleGeneListId'], 'multi'),
        'large_scale_gene_list.accession': this.apiClient.buildCollectionParam(opts['largeScaleGeneListAccession'], 'multi'),
        'large_scale_gene_list.aliases': this.apiClient.buildCollectionParam(opts['largeScaleGeneListAliases'], 'multi'),
        'large_scale_loci_list.@id': this.apiClient.buildCollectionParam(opts['largeScaleLociListId'], 'multi'),
        'large_scale_loci_list.accession': this.apiClient.buildCollectionParam(opts['largeScaleLociListAccession'], 'multi'),
        'large_scale_loci_list.aliases': this.apiClient.buildCollectionParam(opts['largeScaleLociListAliases'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'samples.@id': this.apiClient.buildCollectionParam(opts['samplesId'], 'multi'),
        'samples.accession': this.apiClient.buildCollectionParam(opts['samplesAccession'], 'multi'),
        'samples.aliases': this.apiClient.buildCollectionParam(opts['samplesAliases'], 'multi'),
        'samples.cell_fate_change_treatments': this.apiClient.buildCollectionParam(opts['samplesCellFateChangeTreatments'], 'multi'),
        'samples.classifications': this.apiClient.buildCollectionParam(opts['samplesClassifications'], 'multi'),
        'samples.construct_library_sets.@id': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsId'], 'multi'),
        'samples.construct_library_sets.accession': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsAccession'], 'multi'),
        'samples.construct_library_sets.summary': this.apiClient.buildCollectionParam(opts['samplesConstructLibrarySetsSummary'], 'multi'),
        'samples.disease_terms.@id': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsId'], 'multi'),
        'samples.disease_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesDiseaseTermsTermName'], 'multi'),
        'samples.modifications': this.apiClient.buildCollectionParam(opts['samplesModifications'], 'multi'),
        'samples.sample_terms.@id': this.apiClient.buildCollectionParam(opts['samplesSampleTermsId'], 'multi'),
        'samples.sample_terms.aliases': this.apiClient.buildCollectionParam(opts['samplesSampleTermsAliases'], 'multi'),
        'samples.sample_terms.status': this.apiClient.buildCollectionParam(opts['samplesSampleTermsStatus'], 'multi'),
        'samples.sample_terms.summary': this.apiClient.buildCollectionParam(opts['samplesSampleTermsSummary'], 'multi'),
        'samples.sample_terms.term_name': this.apiClient.buildCollectionParam(opts['samplesSampleTermsTermName'], 'multi'),
        'samples.status': this.apiClient.buildCollectionParam(opts['samplesStatus'], 'multi'),
        'samples.summary': this.apiClient.buildCollectionParam(opts['samplesSummary'], 'multi'),
        'samples.targeted_sample_term.@id': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermId'], 'multi'),
        'samples.targeted_sample_term.term_name': this.apiClient.buildCollectionParam(opts['samplesTargetedSampleTermTermName'], 'multi'),
        'samples.taxa': this.apiClient.buildCollectionParam(opts['samplesTaxa'], 'multi'),
        'samples.treatments': this.apiClient.buildCollectionParam(opts['samplesTreatments'], 'multi'),
        'scope': this.apiClient.buildCollectionParam(opts['scope'], 'multi'),
        'small_scale_gene_list.@id': this.apiClient.buildCollectionParam(opts['smallScaleGeneListId'], 'multi'),
        'small_scale_gene_list.geneid': this.apiClient.buildCollectionParam(opts['smallScaleGeneListGeneid'], 'multi'),
        'small_scale_gene_list.name': this.apiClient.buildCollectionParam(opts['smallScaleGeneListName'], 'multi'),
        'small_scale_gene_list.symbol': this.apiClient.buildCollectionParam(opts['smallScaleGeneListSymbol'], 'multi'),
        'small_scale_gene_list.synonyms': this.apiClient.buildCollectionParam(opts['smallScaleGeneListSynonyms'], 'multi'),
        'small_scale_loci_list': this.apiClient.buildCollectionParam(opts['smallScaleLociList'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_files_timestamp': this.apiClient.buildCollectionParam(opts['submittedFilesTimestamp'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PredictionSetResults;
      return this.apiClient.callApi(
        '/prediction-sets/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the primaryCells operation.
     * @callback module:api/IgvfApi~primaryCellsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrimaryCellResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the PrimaryCell collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate PrimaryCell items. Supports filtering on fields within PrimaryCell items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [age] Filter by age
     * @param {Array.<module:model/String>} [ageUnits] Filter by age_units
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biomarkers] Filter by biomarkers
     * @param {Array.<String>} [cellularSubPool] Filter by cellular_sub_pool
     * @param {Array.<String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySets] Filter by construct_library_sets
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [diseaseTermsId] Filter by disease_terms.@id
     * @param {Array.<String>} [diseaseTermsTermName] Filter by disease_terms.term_name
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<Boolean>} [embryonic] Filter by embryonic
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<String>} [institutionalCertificatesId] Filter by institutional_certificates.@id
     * @param {Array.<String>} [institutionalCertificatesCertificateIdentifier] Filter by institutional_certificates.certificate_identifier
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [lowerBoundAge] Filter by lower_bound_age
     * @param {Array.<Number>} [lowerBoundAgeInHours] Filter by lower_bound_age_in_hours
     * @param {Array.<String>} [modificationsId] Filter by modifications.@id
     * @param {Array.<module:model/String>} [modificationsStatus] Filter by modifications.status
     * @param {Array.<String>} [modificationsSummary] Filter by modifications.summary
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [originatedFrom] Filter by originated_from
     * @param {Array.<String>} [partOf] Filter by part_of
     * @param {Array.<String>} [parts] Filter by parts
     * @param {Array.<Number>} [passageNumber] Filter by passage_number
     * @param {Array.<String>} [pooledFrom] Filter by pooled_from
     * @param {Array.<String>} [pooledIn] Filter by pooled_in
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [treatmentsId] Filter by treatments.@id
     * @param {Array.<module:model/String>} [treatmentsPurpose] Filter by treatments.purpose
     * @param {Array.<module:model/String>} [treatmentsStatus] Filter by treatments.status
     * @param {Array.<String>} [treatmentsSummary] Filter by treatments.summary
     * @param {Array.<module:model/String>} [treatmentsTreatmentType] Filter by treatments.treatment_type
     * @param {Array.<Number>} [upperBoundAge] Filter by upper_bound_age
     * @param {Array.<Number>} [upperBoundAgeInHours] Filter by upper_bound_age_in_hours
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~primaryCellsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrimaryCellResults}
     */
    primaryCells(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling primaryCells");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'age': this.apiClient.buildCollectionParam(opts['age'], 'multi'),
        'age_units': this.apiClient.buildCollectionParam(opts['ageUnits'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biomarkers': this.apiClient.buildCollectionParam(opts['biomarkers'], 'multi'),
        'cellular_sub_pool': this.apiClient.buildCollectionParam(opts['cellularSubPool'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets': this.apiClient.buildCollectionParam(opts['constructLibrarySets'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'disease_terms.@id': this.apiClient.buildCollectionParam(opts['diseaseTermsId'], 'multi'),
        'disease_terms.term_name': this.apiClient.buildCollectionParam(opts['diseaseTermsTermName'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'embryonic': this.apiClient.buildCollectionParam(opts['embryonic'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'institutional_certificates.@id': this.apiClient.buildCollectionParam(opts['institutionalCertificatesId'], 'multi'),
        'institutional_certificates.certificate_identifier': this.apiClient.buildCollectionParam(opts['institutionalCertificatesCertificateIdentifier'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'lower_bound_age': this.apiClient.buildCollectionParam(opts['lowerBoundAge'], 'multi'),
        'lower_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['lowerBoundAgeInHours'], 'multi'),
        'modifications.@id': this.apiClient.buildCollectionParam(opts['modificationsId'], 'multi'),
        'modifications.status': this.apiClient.buildCollectionParam(opts['modificationsStatus'], 'multi'),
        'modifications.summary': this.apiClient.buildCollectionParam(opts['modificationsSummary'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'originated_from': this.apiClient.buildCollectionParam(opts['originatedFrom'], 'multi'),
        'part_of': this.apiClient.buildCollectionParam(opts['partOf'], 'multi'),
        'parts': this.apiClient.buildCollectionParam(opts['parts'], 'multi'),
        'passage_number': this.apiClient.buildCollectionParam(opts['passageNumber'], 'multi'),
        'pooled_from': this.apiClient.buildCollectionParam(opts['pooledFrom'], 'multi'),
        'pooled_in': this.apiClient.buildCollectionParam(opts['pooledIn'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'treatments.@id': this.apiClient.buildCollectionParam(opts['treatmentsId'], 'multi'),
        'treatments.purpose': this.apiClient.buildCollectionParam(opts['treatmentsPurpose'], 'multi'),
        'treatments.status': this.apiClient.buildCollectionParam(opts['treatmentsStatus'], 'multi'),
        'treatments.summary': this.apiClient.buildCollectionParam(opts['treatmentsSummary'], 'multi'),
        'treatments.treatment_type': this.apiClient.buildCollectionParam(opts['treatmentsTreatmentType'], 'multi'),
        'upper_bound_age': this.apiClient.buildCollectionParam(opts['upperBoundAge'], 'multi'),
        'upper_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['upperBoundAgeInHours'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrimaryCellResults;
      return this.apiClient.callApi(
        '/primary-cells/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publications operation.
     * @callback module:api/IgvfApi~publicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Publication collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Publication items. Supports filtering on fields within Publication items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [_abstract] Filter by abstract
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [authors] Filter by authors
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [datePublished] Filter by date_published
     * @param {Array.<String>} [dateRevised] Filter by date_revised
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<String>} [fileSets] Filter by file_sets
     * @param {Array.<String>} [issue] Filter by issue
     * @param {Array.<String>} [journal] Filter by journal
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [page] Filter by page
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<Number>} [publicationYear] Filter by publication_year
     * @param {Array.<module:model/String>} [publishedBy] Filter by published_by
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [samples] Filter by samples
     * @param {Array.<String>} [software] Filter by software
     * @param {Array.<String>} [softwareVersions] Filter by software_versions
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [volume] Filter by volume
     * @param {Array.<String>} [workflows] Filter by workflows
     * @param {module:api/IgvfApi~publicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicationResults}
     */
    publications(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling publications");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'abstract': this.apiClient.buildCollectionParam(opts['_abstract'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'authors': this.apiClient.buildCollectionParam(opts['authors'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_published': this.apiClient.buildCollectionParam(opts['datePublished'], 'multi'),
        'date_revised': this.apiClient.buildCollectionParam(opts['dateRevised'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'file_sets': this.apiClient.buildCollectionParam(opts['fileSets'], 'multi'),
        'issue': this.apiClient.buildCollectionParam(opts['issue'], 'multi'),
        'journal': this.apiClient.buildCollectionParam(opts['journal'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'page': this.apiClient.buildCollectionParam(opts['page'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publication_year': this.apiClient.buildCollectionParam(opts['publicationYear'], 'multi'),
        'published_by': this.apiClient.buildCollectionParam(opts['publishedBy'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'samples': this.apiClient.buildCollectionParam(opts['samples'], 'multi'),
        'software': this.apiClient.buildCollectionParam(opts['software'], 'multi'),
        'software_versions': this.apiClient.buildCollectionParam(opts['softwareVersions'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'volume': this.apiClient.buildCollectionParam(opts['volume'], 'multi'),
        'workflows': this.apiClient.buildCollectionParam(opts['workflows'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicationResults;
      return this.apiClient.callApi(
        '/publications/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the referenceFiles operation.
     * @callback module:api/IgvfApi~referenceFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReferenceFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the ReferenceFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate ReferenceFile items. Supports filtering on fields within ReferenceFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [anvilUrl] Filter by anvil_url
     * @param {Array.<module:model/String>} [assembly] Filter by assembly
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<Boolean>} [external] Filter by external
     * @param {Array.<String>} [externalId] Filter by external_id
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<module:model/String>} [fileFormatType] Filter by file_format_type
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<String>} [sourceUrl] Filter by source_url
     * @param {Array.<String>} [sources] Filter by sources
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~referenceFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReferenceFileResults}
     */
    referenceFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling referenceFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'anvil_url': this.apiClient.buildCollectionParam(opts['anvilUrl'], 'multi'),
        'assembly': this.apiClient.buildCollectionParam(opts['assembly'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'external': this.apiClient.buildCollectionParam(opts['external'], 'multi'),
        'external_id': this.apiClient.buildCollectionParam(opts['externalId'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_format_type': this.apiClient.buildCollectionParam(opts['fileFormatType'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'source_url': this.apiClient.buildCollectionParam(opts['sourceUrl'], 'multi'),
        'sources': this.apiClient.buildCollectionParam(opts['sources'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReferenceFileResults;
      return this.apiClient.callApi(
        '/reference-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the report operation.
     * @callback module:api/IgvfApi~reportCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a report based on search query. All results are returned.
     * Like /search endpoint but returns a TSV file instead of JSON. Must specify item type(s).
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {Array.<String>} [type] Filter by item type.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
     * @param {Object.<String, Object>} [fieldFilters] Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
     * @param {Array.<String>} [include_fields] Fields to include in the response. Can be repeated for multiple fields.
     * @param {module:model/String} [frame] Object with links, or object with some links embedded.
     * @param {module:api/IgvfApi~reportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    report(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'field_filters': opts['fieldFilters'],
        'field': this.apiClient.buildCollectionParam(opts['include_fields'], 'multi'),
        'frame': opts['frame']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['text/tab-separated-values', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/multireport.tsv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rodentDonors operation.
     * @callback module:api/IgvfApi~rodentDonorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RodentDonorResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the RodentDonor collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate RodentDonor items. Supports filtering on fields within RodentDonor items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [genotype] Filter by genotype
     * @param {Array.<Boolean>} [individualRodent] Filter by individual_rodent
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [phenotypicFeaturesId] Filter by phenotypic_features.@id
     * @param {Array.<String>} [phenotypicFeaturesFeatureId] Filter by phenotypic_features.feature.@id
     * @param {Array.<String>} [phenotypicFeaturesFeatureTermId] Filter by phenotypic_features.feature.term_id
     * @param {Array.<String>} [phenotypicFeaturesFeatureTermName] Filter by phenotypic_features.feature.term_name
     * @param {Array.<String>} [phenotypicFeaturesObservationDate] Filter by phenotypic_features.observation_date
     * @param {Array.<module:model/String>} [phenotypicFeaturesQuantityUnits] Filter by phenotypic_features.quantity_units
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [rodentIdentifier] Filter by rodent_identifier
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [strain] Filter by strain
     * @param {Array.<module:model/String>} [strainBackground] Filter by strain_background
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~rodentDonorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RodentDonorResults}
     */
    rodentDonors(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling rodentDonors");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'genotype': this.apiClient.buildCollectionParam(opts['genotype'], 'multi'),
        'individual_rodent': this.apiClient.buildCollectionParam(opts['individualRodent'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'phenotypic_features.@id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesId'], 'multi'),
        'phenotypic_features.feature.@id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureId'], 'multi'),
        'phenotypic_features.feature.term_id': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureTermId'], 'multi'),
        'phenotypic_features.feature.term_name': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesFeatureTermName'], 'multi'),
        'phenotypic_features.observation_date': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesObservationDate'], 'multi'),
        'phenotypic_features.quantity_units': this.apiClient.buildCollectionParam(opts['phenotypicFeaturesQuantityUnits'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'rodent_identifier': this.apiClient.buildCollectionParam(opts['rodentIdentifier'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'strain': this.apiClient.buildCollectionParam(opts['strain'], 'multi'),
        'strain_background': this.apiClient.buildCollectionParam(opts['strainBackground'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RodentDonorResults;
      return this.apiClient.callApi(
        '/rodent-donors/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sampleTerms operation.
     * @callback module:api/IgvfApi~sampleTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SampleTermResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the SampleTerm collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SampleTerm items. Supports filtering on fields within SampleTerm items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [ancestors] Filter by ancestors
     * @param {Array.<String>} [cellSlims] Filter by cell_slims
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [deprecatedNtrTerms] Filter by deprecated_ntr_terms
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [developmentalSlims] Filter by developmental_slims
     * @param {Array.<String>} [isA] Filter by is_a
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [ontology] Filter by ontology
     * @param {Array.<String>} [organSlims] Filter by organ_slims
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [synonyms] Filter by synonyms
     * @param {Array.<String>} [systemSlims] Filter by system_slims
     * @param {Array.<String>} [termId] Filter by term_id
     * @param {Array.<String>} [termName] Filter by term_name
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~sampleTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SampleTermResults}
     */
    sampleTerms(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling sampleTerms");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'ancestors': this.apiClient.buildCollectionParam(opts['ancestors'], 'multi'),
        'cell_slims': this.apiClient.buildCollectionParam(opts['cellSlims'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'deprecated_ntr_terms': this.apiClient.buildCollectionParam(opts['deprecatedNtrTerms'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'developmental_slims': this.apiClient.buildCollectionParam(opts['developmentalSlims'], 'multi'),
        'is_a': this.apiClient.buildCollectionParam(opts['isA'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'ontology': this.apiClient.buildCollectionParam(opts['ontology'], 'multi'),
        'organ_slims': this.apiClient.buildCollectionParam(opts['organSlims'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'synonyms': this.apiClient.buildCollectionParam(opts['synonyms'], 'multi'),
        'system_slims': this.apiClient.buildCollectionParam(opts['systemSlims'], 'multi'),
        'term_id': this.apiClient.buildCollectionParam(opts['termId'], 'multi'),
        'term_name': this.apiClient.buildCollectionParam(opts['termName'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SampleTermResults;
      return this.apiClient.callApi(
        '/sample-terms/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemaForItemType operation.
     * @callback module:api/IgvfApi~schemaForItemTypeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve JSON schema for item type
     * Returns JSON schemas of all the item types defined in IGVF
     * @param {module:model/ItemType} itemType The name of the item type
     * @param {module:api/IgvfApi~schemaForItemTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    schemaForItemType(itemType, callback) {
      let postBody = null;
      // verify the required parameter 'itemType' is set
      if (itemType === undefined || itemType === null) {
        throw new Error("Missing the required parameter 'itemType' when calling schemaForItemType");
      }

      let pathParams = {
        'item_type': itemType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profiles/{item_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemas operation.
     * @callback module:api/IgvfApi~schemasCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve JSON schemas for all item types
     * Returns JSON schemas of all the item types defined in IGVF
     * @param {module:api/IgvfApi~schemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    schemas(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/IgvfApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for items in the IGVF Project.
     * Search endpoint that accepts various query parameters to filter, sort, and paginate results. Supports complex filtering on types and fields within JSON objects.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {Array.<String>} [type] Filter by item type.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Does not work with limit=all.
     * @param {Object.<String, Object>} [fieldFilters] Any field from any item type can be used as a filter. Use '!' at end of field name for negation and 'lt:', 'lte:', 'gt:', 'gte:' with value for range queries on numeric fields. Examples: {'status!': 'in progress', 'file_size': 'gte:30000'}
     * @param {module:api/IgvfApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResults}
     */
    search(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        'field_filters': opts['fieldFilters'],
        'frame': frame
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResults;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sequenceFiles operation.
     * @callback module:api/IgvfApi~sequenceFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SequenceFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the SequenceFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SequenceFile items. Supports filtering on fields within SequenceFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [anvilUrl] Filter by anvil_url
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [flowcellId] Filter by flowcell_id
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<module:model/String>} [illuminaReadType] Filter by illumina_read_type
     * @param {Array.<String>} [index] Filter by index
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<Number>} [lane] Filter by lane
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<Number>} [maximumReadLength] Filter by maximum_read_length
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<Number>} [meanReadLength] Filter by mean_read_length
     * @param {Array.<Number>} [minimumReadLength] Filter by minimum_read_length
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<Number>} [readCount] Filter by read_count
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<String>} [seqspecs] Filter by seqspecs
     * @param {Array.<module:model/String>} [sequencingKit] Filter by sequencing_kit
     * @param {Array.<String>} [sequencingPlatform] Filter by sequencing_platform
     * @param {Array.<Number>} [sequencingRun] Filter by sequencing_run
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~sequenceFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SequenceFileResults}
     */
    sequenceFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling sequenceFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'anvil_url': this.apiClient.buildCollectionParam(opts['anvilUrl'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'flowcell_id': this.apiClient.buildCollectionParam(opts['flowcellId'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'illumina_read_type': this.apiClient.buildCollectionParam(opts['illuminaReadType'], 'multi'),
        'index': this.apiClient.buildCollectionParam(opts['index'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lane': this.apiClient.buildCollectionParam(opts['lane'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'maximum_read_length': this.apiClient.buildCollectionParam(opts['maximumReadLength'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'mean_read_length': this.apiClient.buildCollectionParam(opts['meanReadLength'], 'multi'),
        'minimum_read_length': this.apiClient.buildCollectionParam(opts['minimumReadLength'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'read_count': this.apiClient.buildCollectionParam(opts['readCount'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'seqspecs': this.apiClient.buildCollectionParam(opts['seqspecs'], 'multi'),
        'sequencing_kit': this.apiClient.buildCollectionParam(opts['sequencingKit'], 'multi'),
        'sequencing_platform': this.apiClient.buildCollectionParam(opts['sequencingPlatform'], 'multi'),
        'sequencing_run': this.apiClient.buildCollectionParam(opts['sequencingRun'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SequenceFileResults;
      return this.apiClient.callApi(
        '/sequence-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalFiles operation.
     * @callback module:api/IgvfApi~signalFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the SignalFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SignalFile items. Supports filtering on fields within SignalFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<module:model/String>} [assembly] Filter by assembly
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentSummary] Filter by content_summary
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<Boolean>} [filtered] Filter by filtered
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<Boolean>} [normalized] Filter by normalized
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [referenceFiles] Filter by reference_files
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<String>} [startViewPosition] Filter by start_view_position
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<module:model/String>} [strandSpecificity] Filter by strand_specificity
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~signalFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalFileResults}
     */
    signalFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling signalFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'assembly': this.apiClient.buildCollectionParam(opts['assembly'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_summary': this.apiClient.buildCollectionParam(opts['contentSummary'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'filtered': this.apiClient.buildCollectionParam(opts['filtered'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'normalized': this.apiClient.buildCollectionParam(opts['normalized'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'reference_files': this.apiClient.buildCollectionParam(opts['referenceFiles'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'start_view_position': this.apiClient.buildCollectionParam(opts['startViewPosition'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'strand_specificity': this.apiClient.buildCollectionParam(opts['strandSpecificity'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SignalFileResults;
      return this.apiClient.callApi(
        '/signal-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the software operation.
     * @callback module:api/IgvfApi~softwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Software collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Software items. Supports filtering on fields within Software items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [sourceUrl] Filter by source_url
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<module:model/String>} [usedBy] Filter by used_by
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [versions] Filter by versions
     * @param {module:api/IgvfApi~softwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareResults}
     */
    software(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling software");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'source_url': this.apiClient.buildCollectionParam(opts['sourceUrl'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'used_by': this.apiClient.buildCollectionParam(opts['usedBy'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'versions': this.apiClient.buildCollectionParam(opts['versions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwareResults;
      return this.apiClient.callApi(
        '/software/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the softwareVersions operation.
     * @callback module:api/IgvfApi~softwareVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareVersionResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the SoftwareVersion collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate SoftwareVersion items. Supports filtering on fields within SoftwareVersion items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [downloadId] Filter by download_id
     * @param {Array.<String>} [downloadedUrl] Filter by downloaded_url
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [softwareId] Filter by software.@id
     * @param {Array.<String>} [softwareTitle] Filter by software.title
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [version] Filter by version
     * @param {module:api/IgvfApi~softwareVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareVersionResults}
     */
    softwareVersions(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling softwareVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'download_id': this.apiClient.buildCollectionParam(opts['downloadId'], 'multi'),
        'downloaded_url': this.apiClient.buildCollectionParam(opts['downloadedUrl'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'software.@id': this.apiClient.buildCollectionParam(opts['softwareId'], 'multi'),
        'software.title': this.apiClient.buildCollectionParam(opts['softwareTitle'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'version': this.apiClient.buildCollectionParam(opts['version'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwareVersionResults;
      return this.apiClient.callApi(
        '/software-versions/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sources operation.
     * @callback module:api/IgvfApi~sourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Source collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Source items. Supports filtering on fields within Source items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~sourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceResults}
     */
    sources(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling sources");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceResults;
      return this.apiClient.callApi(
        '/sources/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tabularFiles operation.
     * @callback module:api/IgvfApi~tabularFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TabularFileResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the TabularFile collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TabularFile items. Supports filtering on fields within TabularFile items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisStepVersion] Filter by analysis_step_version
     * @param {Array.<String>} [anvilUrl] Filter by anvil_url
     * @param {Array.<module:model/String>} [assembly] Filter by assembly
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [contentMd5sum] Filter by content_md5sum
     * @param {Array.<String>} [contentType] Filter by content_type
     * @param {Array.<Boolean>} [controlledAccess] Filter by controlled_access
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [derivedFrom] Filter by derived_from
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<module:model/String>} [fileFormat] Filter by file_format
     * @param {Array.<String>} [fileFormatSpecifications] Filter by file_format_specifications
     * @param {Array.<module:model/String>} [fileFormatType] Filter by file_format_type
     * @param {Array.<String>} [fileSet] Filter by file_set
     * @param {Array.<Number>} [fileSize] Filter by file_size
     * @param {Array.<String>} [geneListFor] Filter by gene_list_for
     * @param {Array.<String>} [href] Filter by href
     * @param {Array.<String>} [inputFileFor] Filter by input_file_for
     * @param {Array.<String>} [integratedIn] Filter by integrated_in
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lociListFor] Filter by loci_list_for
     * @param {Array.<String>} [md5sum] Filter by md5sum
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [s3Uri] Filter by s3_uri
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submittedFileName] Filter by submitted_file_name
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [transcriptomeAnnotation] Filter by transcriptome_annotation
     * @param {Array.<module:model/String>} [uploadStatus] Filter by upload_status
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [validationErrorDetail] Filter by validation_error_detail
     * @param {module:api/IgvfApi~tabularFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TabularFileResults}
     */
    tabularFiles(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling tabularFiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_step_version': this.apiClient.buildCollectionParam(opts['analysisStepVersion'], 'multi'),
        'anvil_url': this.apiClient.buildCollectionParam(opts['anvilUrl'], 'multi'),
        'assembly': this.apiClient.buildCollectionParam(opts['assembly'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'content_md5sum': this.apiClient.buildCollectionParam(opts['contentMd5sum'], 'multi'),
        'content_type': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'controlled_access': this.apiClient.buildCollectionParam(opts['controlledAccess'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'derived_from': this.apiClient.buildCollectionParam(opts['derivedFrom'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_format': this.apiClient.buildCollectionParam(opts['fileFormat'], 'multi'),
        'file_format_specifications': this.apiClient.buildCollectionParam(opts['fileFormatSpecifications'], 'multi'),
        'file_format_type': this.apiClient.buildCollectionParam(opts['fileFormatType'], 'multi'),
        'file_set': this.apiClient.buildCollectionParam(opts['fileSet'], 'multi'),
        'file_size': this.apiClient.buildCollectionParam(opts['fileSize'], 'multi'),
        'gene_list_for': this.apiClient.buildCollectionParam(opts['geneListFor'], 'multi'),
        'href': this.apiClient.buildCollectionParam(opts['href'], 'multi'),
        'input_file_for': this.apiClient.buildCollectionParam(opts['inputFileFor'], 'multi'),
        'integrated_in': this.apiClient.buildCollectionParam(opts['integratedIn'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'loci_list_for': this.apiClient.buildCollectionParam(opts['lociListFor'], 'multi'),
        'md5sum': this.apiClient.buildCollectionParam(opts['md5sum'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        's3_uri': this.apiClient.buildCollectionParam(opts['s3Uri'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitted_file_name': this.apiClient.buildCollectionParam(opts['submittedFileName'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'transcriptome_annotation': this.apiClient.buildCollectionParam(opts['transcriptomeAnnotation'], 'multi'),
        'upload_status': this.apiClient.buildCollectionParam(opts['uploadStatus'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'validation_error_detail': this.apiClient.buildCollectionParam(opts['validationErrorDetail'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TabularFileResults;
      return this.apiClient.callApi(
        '/tabular-files/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technicalSamples operation.
     * @callback module:api/IgvfApi~technicalSamplesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnicalSampleResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the TechnicalSample collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate TechnicalSample items. Supports filtering on fields within TechnicalSample items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySets] Filter by construct_library_sets
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<String>} [institutionalCertificates] Filter by institutional_certificates
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<module:model/String>} [sampleMaterial] Filter by sample_material
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~technicalSamplesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnicalSampleResults}
     */
    technicalSamples(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling technicalSamples");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets': this.apiClient.buildCollectionParam(opts['constructLibrarySets'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'institutional_certificates': this.apiClient.buildCollectionParam(opts['institutionalCertificates'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_material': this.apiClient.buildCollectionParam(opts['sampleMaterial'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnicalSampleResults;
      return this.apiClient.callApi(
        '/technical-samples/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tissues operation.
     * @callback module:api/IgvfApi~tissuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TissueResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Tissue collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Tissue items. Supports filtering on fields within Tissue items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [age] Filter by age
     * @param {Array.<module:model/String>} [ageUnits] Filter by age_units
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biomarkers] Filter by biomarkers
     * @param {Array.<String>} [ccfId] Filter by ccf_id
     * @param {Array.<String>} [cellularSubPool] Filter by cellular_sub_pool
     * @param {Array.<String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySets] Filter by construct_library_sets
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [diseaseTermsId] Filter by disease_terms.@id
     * @param {Array.<String>} [diseaseTermsTermName] Filter by disease_terms.term_name
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<Boolean>} [embryonic] Filter by embryonic
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<String>} [institutionalCertificatesId] Filter by institutional_certificates.@id
     * @param {Array.<String>} [institutionalCertificatesCertificateIdentifier] Filter by institutional_certificates.certificate_identifier
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [lowerBoundAge] Filter by lower_bound_age
     * @param {Array.<Number>} [lowerBoundAgeInHours] Filter by lower_bound_age_in_hours
     * @param {Array.<String>} [modificationsId] Filter by modifications.@id
     * @param {Array.<module:model/String>} [modificationsStatus] Filter by modifications.status
     * @param {Array.<String>} [modificationsSummary] Filter by modifications.summary
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [originatedFrom] Filter by originated_from
     * @param {Array.<String>} [partOf] Filter by part_of
     * @param {Array.<String>} [parts] Filter by parts
     * @param {Array.<Number>} [pmi] Filter by pmi
     * @param {Array.<module:model/String>} [pmiUnits] Filter by pmi_units
     * @param {Array.<String>} [pooledFrom] Filter by pooled_from
     * @param {Array.<String>} [pooledIn] Filter by pooled_in
     * @param {Array.<module:model/String>} [preservationMethod] Filter by preservation_method
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [treatmentsId] Filter by treatments.@id
     * @param {Array.<module:model/String>} [treatmentsPurpose] Filter by treatments.purpose
     * @param {Array.<module:model/String>} [treatmentsStatus] Filter by treatments.status
     * @param {Array.<String>} [treatmentsSummary] Filter by treatments.summary
     * @param {Array.<module:model/String>} [treatmentsTreatmentType] Filter by treatments.treatment_type
     * @param {Array.<Number>} [upperBoundAge] Filter by upper_bound_age
     * @param {Array.<Number>} [upperBoundAgeInHours] Filter by upper_bound_age_in_hours
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~tissuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TissueResults}
     */
    tissues(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling tissues");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'age': this.apiClient.buildCollectionParam(opts['age'], 'multi'),
        'age_units': this.apiClient.buildCollectionParam(opts['ageUnits'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biomarkers': this.apiClient.buildCollectionParam(opts['biomarkers'], 'multi'),
        'ccf_id': this.apiClient.buildCollectionParam(opts['ccfId'], 'multi'),
        'cellular_sub_pool': this.apiClient.buildCollectionParam(opts['cellularSubPool'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets': this.apiClient.buildCollectionParam(opts['constructLibrarySets'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'disease_terms.@id': this.apiClient.buildCollectionParam(opts['diseaseTermsId'], 'multi'),
        'disease_terms.term_name': this.apiClient.buildCollectionParam(opts['diseaseTermsTermName'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'embryonic': this.apiClient.buildCollectionParam(opts['embryonic'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'institutional_certificates.@id': this.apiClient.buildCollectionParam(opts['institutionalCertificatesId'], 'multi'),
        'institutional_certificates.certificate_identifier': this.apiClient.buildCollectionParam(opts['institutionalCertificatesCertificateIdentifier'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'lower_bound_age': this.apiClient.buildCollectionParam(opts['lowerBoundAge'], 'multi'),
        'lower_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['lowerBoundAgeInHours'], 'multi'),
        'modifications.@id': this.apiClient.buildCollectionParam(opts['modificationsId'], 'multi'),
        'modifications.status': this.apiClient.buildCollectionParam(opts['modificationsStatus'], 'multi'),
        'modifications.summary': this.apiClient.buildCollectionParam(opts['modificationsSummary'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'originated_from': this.apiClient.buildCollectionParam(opts['originatedFrom'], 'multi'),
        'part_of': this.apiClient.buildCollectionParam(opts['partOf'], 'multi'),
        'parts': this.apiClient.buildCollectionParam(opts['parts'], 'multi'),
        'pmi': this.apiClient.buildCollectionParam(opts['pmi'], 'multi'),
        'pmi_units': this.apiClient.buildCollectionParam(opts['pmiUnits'], 'multi'),
        'pooled_from': this.apiClient.buildCollectionParam(opts['pooledFrom'], 'multi'),
        'pooled_in': this.apiClient.buildCollectionParam(opts['pooledIn'], 'multi'),
        'preservation_method': this.apiClient.buildCollectionParam(opts['preservationMethod'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'treatments.@id': this.apiClient.buildCollectionParam(opts['treatmentsId'], 'multi'),
        'treatments.purpose': this.apiClient.buildCollectionParam(opts['treatmentsPurpose'], 'multi'),
        'treatments.status': this.apiClient.buildCollectionParam(opts['treatmentsStatus'], 'multi'),
        'treatments.summary': this.apiClient.buildCollectionParam(opts['treatmentsSummary'], 'multi'),
        'treatments.treatment_type': this.apiClient.buildCollectionParam(opts['treatmentsTreatmentType'], 'multi'),
        'upper_bound_age': this.apiClient.buildCollectionParam(opts['upperBoundAge'], 'multi'),
        'upper_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['upperBoundAgeInHours'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TissueResults;
      return this.apiClient.callApi(
        '/tissues/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the treatments operation.
     * @callback module:api/IgvfApi~treatmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TreatmentResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Treatment collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Treatment items. Supports filtering on fields within Treatment items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<Number>} [amount] Filter by amount
     * @param {Array.<module:model/String>} [amountUnits] Filter by amount_units
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biosamplesTreated] Filter by biosamples_treated
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<Boolean>} [depletion] Filter by depletion
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<Number>} [duration] Filter by duration
     * @param {Array.<module:model/String>} [durationUnits] Filter by duration_units
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<Number>} [pH] Filter by pH
     * @param {Array.<Number>} [postTreatmentTime] Filter by post_treatment_time
     * @param {Array.<module:model/String>} [postTreatmentTimeUnits] Filter by post_treatment_time_units
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<module:model/String>} [purpose] Filter by purpose
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<Number>} [temperature] Filter by temperature
     * @param {Array.<module:model/String>} [temperatureUnits] Filter by temperature_units
     * @param {Array.<String>} [treatmentTermId] Filter by treatment_term_id
     * @param {Array.<String>} [treatmentTermName] Filter by treatment_term_name
     * @param {Array.<module:model/String>} [treatmentType] Filter by treatment_type
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {module:api/IgvfApi~treatmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TreatmentResults}
     */
    treatments(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling treatments");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'amount': this.apiClient.buildCollectionParam(opts['amount'], 'multi'),
        'amount_units': this.apiClient.buildCollectionParam(opts['amountUnits'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biosamples_treated': this.apiClient.buildCollectionParam(opts['biosamplesTreated'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'depletion': this.apiClient.buildCollectionParam(opts['depletion'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'duration': this.apiClient.buildCollectionParam(opts['duration'], 'multi'),
        'duration_units': this.apiClient.buildCollectionParam(opts['durationUnits'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'pH': this.apiClient.buildCollectionParam(opts['pH'], 'multi'),
        'post_treatment_time': this.apiClient.buildCollectionParam(opts['postTreatmentTime'], 'multi'),
        'post_treatment_time_units': this.apiClient.buildCollectionParam(opts['postTreatmentTimeUnits'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'purpose': this.apiClient.buildCollectionParam(opts['purpose'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'temperature': this.apiClient.buildCollectionParam(opts['temperature'], 'multi'),
        'temperature_units': this.apiClient.buildCollectionParam(opts['temperatureUnits'], 'multi'),
        'treatment_term_id': this.apiClient.buildCollectionParam(opts['treatmentTermId'], 'multi'),
        'treatment_term_name': this.apiClient.buildCollectionParam(opts['treatmentTermName'], 'multi'),
        'treatment_type': this.apiClient.buildCollectionParam(opts['treatmentType'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TreatmentResults;
      return this.apiClient.callApi(
        '/treatments/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the users operation.
     * @callback module:api/IgvfApi~usersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the User collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate User items. Supports filtering on fields within User items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [email] Filter by email
     * @param {Array.<String>} [firstName] Filter by first_name
     * @param {Array.<module:model/String>} [groups] Filter by groups
     * @param {Array.<module:model/String>} [jobTitle] Filter by job_title
     * @param {Array.<String>} [lab] Filter by lab
     * @param {Array.<String>} [lastName] Filter by last_name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submitsFor] Filter by submits_for
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [title] Filter by title
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<module:model/String>} [viewingGroups] Filter by viewing_groups
     * @param {module:api/IgvfApi~usersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResults}
     */
    users(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling users");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'email': this.apiClient.buildCollectionParam(opts['email'], 'multi'),
        'first_name': this.apiClient.buildCollectionParam(opts['firstName'], 'multi'),
        'groups': this.apiClient.buildCollectionParam(opts['groups'], 'multi'),
        'job_title': this.apiClient.buildCollectionParam(opts['jobTitle'], 'multi'),
        'lab': this.apiClient.buildCollectionParam(opts['lab'], 'multi'),
        'last_name': this.apiClient.buildCollectionParam(opts['lastName'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submits_for': this.apiClient.buildCollectionParam(opts['submitsFor'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'title': this.apiClient.buildCollectionParam(opts['title'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'viewing_groups': this.apiClient.buildCollectionParam(opts['viewingGroups'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserResults;
      return this.apiClient.callApi(
        '/users/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wholeOrganisms operation.
     * @callback module:api/IgvfApi~wholeOrganismsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WholeOrganismResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the WholeOrganism collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate WholeOrganism items. Supports filtering on fields within WholeOrganism items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [age] Filter by age
     * @param {Array.<module:model/String>} [ageUnits] Filter by age_units
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<String>} [biomarkers] Filter by biomarkers
     * @param {Array.<String>} [cellularSubPool] Filter by cellular_sub_pool
     * @param {Array.<String>} [classifications] Filter by classifications
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [constructLibrarySets] Filter by construct_library_sets
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [dateObtained] Filter by date_obtained
     * @param {Array.<String>} [dbxrefs] Filter by dbxrefs
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [diseaseTermsId] Filter by disease_terms.@id
     * @param {Array.<String>} [diseaseTermsTermName] Filter by disease_terms.term_name
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [donors] Filter by donors
     * @param {Array.<Boolean>} [embryonic] Filter by embryonic
     * @param {Array.<String>} [fileSetsId] Filter by file_sets.@id
     * @param {Array.<String>} [fileSetsAccession] Filter by file_sets.accession
     * @param {Array.<String>} [fileSetsAliases] Filter by file_sets.aliases
     * @param {Array.<String>} [fileSetsAssayTermTermName] Filter by file_sets.assay_term.term_name
     * @param {Array.<String>} [fileSetsLabTitle] Filter by file_sets.lab.title
     * @param {Array.<module:model/String>} [fileSetsStatus] Filter by file_sets.status
     * @param {Array.<String>} [fileSetsSummary] Filter by file_sets.summary
     * @param {Array.<String>} [institutionalCertificatesId] Filter by institutional_certificates.@id
     * @param {Array.<String>} [institutionalCertificatesCertificateIdentifier] Filter by institutional_certificates.certificate_identifier
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [lotId] Filter by lot_id
     * @param {Array.<Number>} [lowerBoundAge] Filter by lower_bound_age
     * @param {Array.<Number>} [lowerBoundAgeInHours] Filter by lower_bound_age_in_hours
     * @param {Array.<String>} [modificationsId] Filter by modifications.@id
     * @param {Array.<module:model/String>} [modificationsStatus] Filter by modifications.status
     * @param {Array.<String>} [modificationsSummary] Filter by modifications.summary
     * @param {Array.<Number>} [moi] Filter by moi
     * @param {Array.<String>} [multiplexedInId] Filter by multiplexed_in.@id
     * @param {Array.<String>} [multiplexedInAccession] Filter by multiplexed_in.accession
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<module:model/String>} [nucleicAcidDelivery] Filter by nucleic_acid_delivery
     * @param {Array.<String>} [originOf] Filter by origin_of
     * @param {Array.<String>} [originatedFrom] Filter by originated_from
     * @param {Array.<String>} [partOf] Filter by part_of
     * @param {Array.<String>} [parts] Filter by parts
     * @param {Array.<String>} [pooledFrom] Filter by pooled_from
     * @param {Array.<String>} [pooledIn] Filter by pooled_in
     * @param {Array.<String>} [productId] Filter by product_id
     * @param {Array.<String>} [protocols] Filter by protocols
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sampleTermsId] Filter by sample_terms.@id
     * @param {Array.<String>} [sampleTermsTermName] Filter by sample_terms.term_name
     * @param {Array.<module:model/String>} [sex] Filter by sex
     * @param {Array.<String>} [sortedFractions] Filter by sorted_fractions
     * @param {Array.<String>} [sortedFromId] Filter by sorted_from.@id
     * @param {Array.<String>} [sortedFromAccession] Filter by sorted_from.accession
     * @param {Array.<String>} [sortedFromDetail] Filter by sorted_from_detail
     * @param {Array.<String>} [sourcesId] Filter by sources.@id
     * @param {Array.<Number>} [startingAmount] Filter by starting_amount
     * @param {Array.<module:model/String>} [startingAmountUnits] Filter by starting_amount_units
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<module:model/String>} [taxa] Filter by taxa
     * @param {Array.<Number>} [timePostLibraryDelivery] Filter by time_post_library_delivery
     * @param {Array.<module:model/String>} [timePostLibraryDeliveryUnits] Filter by time_post_library_delivery_units
     * @param {Array.<String>} [treatmentsId] Filter by treatments.@id
     * @param {Array.<module:model/String>} [treatmentsPurpose] Filter by treatments.purpose
     * @param {Array.<module:model/String>} [treatmentsStatus] Filter by treatments.status
     * @param {Array.<String>} [treatmentsSummary] Filter by treatments.summary
     * @param {Array.<module:model/String>} [treatmentsTreatmentType] Filter by treatments.treatment_type
     * @param {Array.<Number>} [upperBoundAge] Filter by upper_bound_age
     * @param {Array.<Number>} [upperBoundAgeInHours] Filter by upper_bound_age_in_hours
     * @param {Array.<String>} [url] Filter by url
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<Boolean>} [virtual] Filter by virtual
     * @param {module:api/IgvfApi~wholeOrganismsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WholeOrganismResults}
     */
    wholeOrganisms(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling wholeOrganisms");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'age': this.apiClient.buildCollectionParam(opts['age'], 'multi'),
        'age_units': this.apiClient.buildCollectionParam(opts['ageUnits'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'biomarkers': this.apiClient.buildCollectionParam(opts['biomarkers'], 'multi'),
        'cellular_sub_pool': this.apiClient.buildCollectionParam(opts['cellularSubPool'], 'multi'),
        'classifications': this.apiClient.buildCollectionParam(opts['classifications'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'construct_library_sets': this.apiClient.buildCollectionParam(opts['constructLibrarySets'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'date_obtained': this.apiClient.buildCollectionParam(opts['dateObtained'], 'multi'),
        'dbxrefs': this.apiClient.buildCollectionParam(opts['dbxrefs'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'disease_terms.@id': this.apiClient.buildCollectionParam(opts['diseaseTermsId'], 'multi'),
        'disease_terms.term_name': this.apiClient.buildCollectionParam(opts['diseaseTermsTermName'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'donors': this.apiClient.buildCollectionParam(opts['donors'], 'multi'),
        'embryonic': this.apiClient.buildCollectionParam(opts['embryonic'], 'multi'),
        'file_sets.@id': this.apiClient.buildCollectionParam(opts['fileSetsId'], 'multi'),
        'file_sets.accession': this.apiClient.buildCollectionParam(opts['fileSetsAccession'], 'multi'),
        'file_sets.aliases': this.apiClient.buildCollectionParam(opts['fileSetsAliases'], 'multi'),
        'file_sets.assay_term.term_name': this.apiClient.buildCollectionParam(opts['fileSetsAssayTermTermName'], 'multi'),
        'file_sets.lab.title': this.apiClient.buildCollectionParam(opts['fileSetsLabTitle'], 'multi'),
        'file_sets.status': this.apiClient.buildCollectionParam(opts['fileSetsStatus'], 'multi'),
        'file_sets.summary': this.apiClient.buildCollectionParam(opts['fileSetsSummary'], 'multi'),
        'institutional_certificates.@id': this.apiClient.buildCollectionParam(opts['institutionalCertificatesId'], 'multi'),
        'institutional_certificates.certificate_identifier': this.apiClient.buildCollectionParam(opts['institutionalCertificatesCertificateIdentifier'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'lot_id': this.apiClient.buildCollectionParam(opts['lotId'], 'multi'),
        'lower_bound_age': this.apiClient.buildCollectionParam(opts['lowerBoundAge'], 'multi'),
        'lower_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['lowerBoundAgeInHours'], 'multi'),
        'modifications.@id': this.apiClient.buildCollectionParam(opts['modificationsId'], 'multi'),
        'modifications.status': this.apiClient.buildCollectionParam(opts['modificationsStatus'], 'multi'),
        'modifications.summary': this.apiClient.buildCollectionParam(opts['modificationsSummary'], 'multi'),
        'moi': this.apiClient.buildCollectionParam(opts['moi'], 'multi'),
        'multiplexed_in.@id': this.apiClient.buildCollectionParam(opts['multiplexedInId'], 'multi'),
        'multiplexed_in.accession': this.apiClient.buildCollectionParam(opts['multiplexedInAccession'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'nucleic_acid_delivery': this.apiClient.buildCollectionParam(opts['nucleicAcidDelivery'], 'multi'),
        'origin_of': this.apiClient.buildCollectionParam(opts['originOf'], 'multi'),
        'originated_from': this.apiClient.buildCollectionParam(opts['originatedFrom'], 'multi'),
        'part_of': this.apiClient.buildCollectionParam(opts['partOf'], 'multi'),
        'parts': this.apiClient.buildCollectionParam(opts['parts'], 'multi'),
        'pooled_from': this.apiClient.buildCollectionParam(opts['pooledFrom'], 'multi'),
        'pooled_in': this.apiClient.buildCollectionParam(opts['pooledIn'], 'multi'),
        'product_id': this.apiClient.buildCollectionParam(opts['productId'], 'multi'),
        'protocols': this.apiClient.buildCollectionParam(opts['protocols'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'sample_terms.@id': this.apiClient.buildCollectionParam(opts['sampleTermsId'], 'multi'),
        'sample_terms.term_name': this.apiClient.buildCollectionParam(opts['sampleTermsTermName'], 'multi'),
        'sex': this.apiClient.buildCollectionParam(opts['sex'], 'multi'),
        'sorted_fractions': this.apiClient.buildCollectionParam(opts['sortedFractions'], 'multi'),
        'sorted_from.@id': this.apiClient.buildCollectionParam(opts['sortedFromId'], 'multi'),
        'sorted_from.accession': this.apiClient.buildCollectionParam(opts['sortedFromAccession'], 'multi'),
        'sorted_from_detail': this.apiClient.buildCollectionParam(opts['sortedFromDetail'], 'multi'),
        'sources.@id': this.apiClient.buildCollectionParam(opts['sourcesId'], 'multi'),
        'starting_amount': this.apiClient.buildCollectionParam(opts['startingAmount'], 'multi'),
        'starting_amount_units': this.apiClient.buildCollectionParam(opts['startingAmountUnits'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'taxa': this.apiClient.buildCollectionParam(opts['taxa'], 'multi'),
        'time_post_library_delivery': this.apiClient.buildCollectionParam(opts['timePostLibraryDelivery'], 'multi'),
        'time_post_library_delivery_units': this.apiClient.buildCollectionParam(opts['timePostLibraryDeliveryUnits'], 'multi'),
        'treatments.@id': this.apiClient.buildCollectionParam(opts['treatmentsId'], 'multi'),
        'treatments.purpose': this.apiClient.buildCollectionParam(opts['treatmentsPurpose'], 'multi'),
        'treatments.status': this.apiClient.buildCollectionParam(opts['treatmentsStatus'], 'multi'),
        'treatments.summary': this.apiClient.buildCollectionParam(opts['treatmentsSummary'], 'multi'),
        'treatments.treatment_type': this.apiClient.buildCollectionParam(opts['treatmentsTreatmentType'], 'multi'),
        'upper_bound_age': this.apiClient.buildCollectionParam(opts['upperBoundAge'], 'multi'),
        'upper_bound_age_in_hours': this.apiClient.buildCollectionParam(opts['upperBoundAgeInHours'], 'multi'),
        'url': this.apiClient.buildCollectionParam(opts['url'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'virtual': this.apiClient.buildCollectionParam(opts['virtual'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WholeOrganismResults;
      return this.apiClient.callApi(
        '/whole-organisms/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflows operation.
     * @callback module:api/IgvfApi~workflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in the Workflow collection.
     * Collection endpoint that accepts various query parameters to filter, sort, and paginate Workflow items. Supports filtering on fields within Workflow items.
     * @param {module:model/String} frame Constant value. Do not set.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Query string for searching.
     * @param {module:model/Limit} [limit] Maximum number of results to return. Default is 25. Use 'all' for all results.
     * @param {Array.<String>} [sort] Fields to sort results by. Prefix with '-' for descending order. Can be repeated for multiple sort fields. Does not work with limit=all.
     * @param {Array.<String>} [id] Filter by @id
     * @param {Array.<String>} [accession] Filter by accession
     * @param {Array.<String>} [aliases] Filter by aliases
     * @param {Array.<String>} [alternateAccessions] Filter by alternate_accessions
     * @param {Array.<String>} [analysisSteps] Filter by analysis_steps
     * @param {Array.<String>} [awardId] Filter by award.@id
     * @param {Array.<module:model/String>} [awardComponent] Filter by award.component
     * @param {Array.<module:model/String>} [collections] Filter by collections
     * @param {Array.<String>} [creationTimestamp] Filter by creation_timestamp
     * @param {Array.<String>} [description] Filter by description
     * @param {Array.<String>} [documents] Filter by documents
     * @param {Array.<String>} [labId] Filter by lab.@id
     * @param {Array.<String>} [labTitle] Filter by lab.title
     * @param {Array.<String>} [name] Filter by name
     * @param {Array.<String>} [notes] Filter by notes
     * @param {Array.<String>} [publicationIdentifiers] Filter by publication_identifiers
     * @param {Array.<String>} [publications] Filter by publications
     * @param {Array.<String>} [releaseTimestamp] Filter by release_timestamp
     * @param {Array.<String>} [revokeDetail] Filter by revoke_detail
     * @param {Array.<String>} [sourceUrl] Filter by source_url
     * @param {Array.<String>} [standardsPageId] Filter by standards_page.@id
     * @param {Array.<String>} [standardsPageTitle] Filter by standards_page.title
     * @param {Array.<module:model/String>} [status] Filter by status
     * @param {Array.<String>} [submittedById] Filter by submitted_by.@id
     * @param {Array.<String>} [submittedByTitle] Filter by submitted_by.title
     * @param {Array.<String>} [submitterComment] Filter by submitter_comment
     * @param {Array.<String>} [summary] Filter by summary
     * @param {Array.<String>} [uuid] Filter by uuid
     * @param {Array.<String>} [workflowRepositories] Filter by workflow_repositories
     * @param {Array.<Number>} [workflowVersion] Filter by workflow_version
     * @param {module:api/IgvfApi~workflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowResults}
     */
    workflows(frame, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'frame' is set
      if (frame === undefined || frame === null) {
        throw new Error("Missing the required parameter 'frame' when calling workflows");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'frame': frame,
        'limit': opts['limit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'multi'),
        '@id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'accession': this.apiClient.buildCollectionParam(opts['accession'], 'multi'),
        'aliases': this.apiClient.buildCollectionParam(opts['aliases'], 'multi'),
        'alternate_accessions': this.apiClient.buildCollectionParam(opts['alternateAccessions'], 'multi'),
        'analysis_steps': this.apiClient.buildCollectionParam(opts['analysisSteps'], 'multi'),
        'award.@id': this.apiClient.buildCollectionParam(opts['awardId'], 'multi'),
        'award.component': this.apiClient.buildCollectionParam(opts['awardComponent'], 'multi'),
        'collections': this.apiClient.buildCollectionParam(opts['collections'], 'multi'),
        'creation_timestamp': this.apiClient.buildCollectionParam(opts['creationTimestamp'], 'multi'),
        'description': this.apiClient.buildCollectionParam(opts['description'], 'multi'),
        'documents': this.apiClient.buildCollectionParam(opts['documents'], 'multi'),
        'lab.@id': this.apiClient.buildCollectionParam(opts['labId'], 'multi'),
        'lab.title': this.apiClient.buildCollectionParam(opts['labTitle'], 'multi'),
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'notes': this.apiClient.buildCollectionParam(opts['notes'], 'multi'),
        'publication_identifiers': this.apiClient.buildCollectionParam(opts['publicationIdentifiers'], 'multi'),
        'publications': this.apiClient.buildCollectionParam(opts['publications'], 'multi'),
        'release_timestamp': this.apiClient.buildCollectionParam(opts['releaseTimestamp'], 'multi'),
        'revoke_detail': this.apiClient.buildCollectionParam(opts['revokeDetail'], 'multi'),
        'source_url': this.apiClient.buildCollectionParam(opts['sourceUrl'], 'multi'),
        'standards_page.@id': this.apiClient.buildCollectionParam(opts['standardsPageId'], 'multi'),
        'standards_page.title': this.apiClient.buildCollectionParam(opts['standardsPageTitle'], 'multi'),
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'submitted_by.@id': this.apiClient.buildCollectionParam(opts['submittedById'], 'multi'),
        'submitted_by.title': this.apiClient.buildCollectionParam(opts['submittedByTitle'], 'multi'),
        'submitter_comment': this.apiClient.buildCollectionParam(opts['submitterComment'], 'multi'),
        'summary': this.apiClient.buildCollectionParam(opts['summary'], 'multi'),
        'uuid': this.apiClient.buildCollectionParam(opts['uuid'], 'multi'),
        'workflow_repositories': this.apiClient.buildCollectionParam(opts['workflowRepositories'], 'multi'),
        'workflow_version': this.apiClient.buildCollectionParam(opts['workflowVersion'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowResults;
      return this.apiClient.callApi(
        '/workflows/@@listing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
