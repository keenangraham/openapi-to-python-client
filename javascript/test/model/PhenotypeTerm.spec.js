/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IgvfProjectApi);
  }
}(this, function(expect, IgvfProjectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IgvfProjectApi.PhenotypeTerm();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PhenotypeTerm', function() {
    it('should create an instance of PhenotypeTerm', function() {
      // uncomment below and update the code to test PhenotypeTerm
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be.a(IgvfProjectApi.PhenotypeTerm);
    });

    it('should have the property releaseTimestamp (base name: "release_timestamp")', function() {
      // uncomment below and update the code to test the property releaseTimestamp
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property schemaVersion (base name: "schema_version")', function() {
      // uncomment below and update the code to test the property schemaVersion
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property aliases (base name: "aliases")', function() {
      // uncomment below and update the code to test the property aliases
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property creationTimestamp (base name: "creation_timestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property submittedBy (base name: "submitted_by")', function() {
      // uncomment below and update the code to test the property submittedBy
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property submitterComment (base name: "submitter_comment")', function() {
      // uncomment below and update the code to test the property submitterComment
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property termId (base name: "term_id")', function() {
      // uncomment below and update the code to test the property termId
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property termName (base name: "term_name")', function() {
      // uncomment below and update the code to test the property termName
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property deprecatedNtrTerms (base name: "deprecated_ntr_terms")', function() {
      // uncomment below and update the code to test the property deprecatedNtrTerms
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property isA (base name: "is_a")', function() {
      // uncomment below and update the code to test the property isA
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "@id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "@type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property synonyms (base name: "synonyms")', function() {
      // uncomment below and update the code to test the property synonyms
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property ancestors (base name: "ancestors")', function() {
      // uncomment below and update the code to test the property ancestors
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

    it('should have the property ontology (base name: "ontology")', function() {
      // uncomment below and update the code to test the property ontology
      //var instance = new IgvfProjectApi.PhenotypeTerm();
      //expect(instance).to.be();
    });

  });

}));
