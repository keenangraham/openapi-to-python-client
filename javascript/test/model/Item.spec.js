/**
 * IGVF Project API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IgvfProjectApi);
  }
}(this, function(expect, IgvfProjectApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IgvfProjectApi.Item();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item', function() {
    it('should create an instance of Item', function() {
      // uncomment below and update the code to test Item
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be.a(IgvfProjectApi.Item);
    });

    it('should have the property schemaVersion (base name: "schema_version")', function() {
      // uncomment below and update the code to test the property schemaVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property aliases (base name: "aliases")', function() {
      // uncomment below and update the code to test the property aliases
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property creationTimestamp (base name: "creation_timestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property submittedBy (base name: "submitted_by")', function() {
      // uncomment below and update the code to test the property submittedBy
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property submitterComment (base name: "submitter_comment")', function() {
      // uncomment below and update the code to test the property submitterComment
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property accessKeyId (base name: "access_key_id")', function() {
      // uncomment below and update the code to test the property accessKeyId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property secretAccessKeyHash (base name: "secret_access_key_hash")', function() {
      // uncomment below and update the code to test the property secretAccessKeyHash
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "@id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "@type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property summary (base name: "summary")', function() {
      // uncomment below and update the code to test the property summary
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property releaseTimestamp (base name: "release_timestamp")', function() {
      // uncomment below and update the code to test the property releaseTimestamp
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lab (base name: "lab")', function() {
      // uncomment below and update the code to test the property lab
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property award (base name: "award")', function() {
      // uncomment below and update the code to test the property award
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property analysisStepTypes (base name: "analysis_step_types")', function() {
      // uncomment below and update the code to test the property analysisStepTypes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property stepLabel (base name: "step_label")', function() {
      // uncomment below and update the code to test the property stepLabel
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property workflow (base name: "workflow")', function() {
      // uncomment below and update the code to test the property workflow
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property parents (base name: "parents")', function() {
      // uncomment below and update the code to test the property parents
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property inputContentTypes (base name: "input_content_types")', function() {
      // uncomment below and update the code to test the property inputContentTypes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property outputContentTypes (base name: "output_content_types")', function() {
      // uncomment below and update the code to test the property outputContentTypes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property analysisStep (base name: "analysis_step")', function() {
      // uncomment below and update the code to test the property analysisStep
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property softwareVersions (base name: "software_versions")', function() {
      // uncomment below and update the code to test the property softwareVersions
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "end_date")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pis (base name: "pis")', function() {
      // uncomment below and update the code to test the property pis
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property contactPi (base name: "contact_pi")', function() {
      // uncomment below and update the code to test the property contactPi
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property viewingGroup (base name: "viewing_group")', function() {
      // uncomment below and update the code to test the property viewingGroup
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property component (base name: "component")', function() {
      // uncomment below and update the code to test the property component
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantification (base name: "quantification")', function() {
      // uncomment below and update the code to test the property quantification
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property synonyms (base name: "synonyms")', function() {
      // uncomment below and update the code to test the property synonyms
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property gene (base name: "gene")', function() {
      // uncomment below and update the code to test the property gene
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property nameQuantification (base name: "name_quantification")', function() {
      // uncomment below and update the code to test the property nameQuantification
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property biomarkerFor (base name: "biomarker_for")', function() {
      // uncomment below and update the code to test the property biomarkerFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property attachment (base name: "attachment")', function() {
      // uncomment below and update the code to test the property attachment
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property documentType (base name: "document_type")', function() {
      // uncomment below and update the code to test the property documentType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property characterizationMethod (base name: "characterization_method")', function() {
      // uncomment below and update the code to test the property characterizationMethod
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property urls (base name: "urls")', function() {
      // uncomment below and update the code to test the property urls
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property taxa (base name: "taxa")', function() {
      // uncomment below and update the code to test the property taxa
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property publications (base name: "publications")', function() {
      // uncomment below and update the code to test the property publications
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property publicationIdentifiers (base name: "publication_identifiers")', function() {
      // uncomment below and update the code to test the property publicationIdentifiers
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property documents (base name: "documents")', function() {
      // uncomment below and update the code to test the property documents
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property accession (base name: "accession")', function() {
      // uncomment below and update the code to test the property accession
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property alternateAccessions (base name: "alternate_accessions")', function() {
      // uncomment below and update the code to test the property alternateAccessions
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property collections (base name: "collections")', function() {
      // uncomment below and update the code to test the property collections
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property revokeDetail (base name: "revoke_detail")', function() {
      // uncomment below and update the code to test the property revokeDetail
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dbxrefs (base name: "dbxrefs")', function() {
      // uncomment below and update the code to test the property dbxrefs
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sex (base name: "sex")', function() {
      // uncomment below and update the code to test the property sex
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property phenotypicFeatures (base name: "phenotypic_features")', function() {
      // uncomment below and update the code to test the property phenotypicFeatures
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property virtual (base name: "virtual")', function() {
      // uncomment below and update the code to test the property virtual
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property relatedDonors (base name: "related_donors")', function() {
      // uncomment below and update the code to test the property relatedDonors
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ethnicities (base name: "ethnicities")', function() {
      // uncomment below and update the code to test the property ethnicities
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property humanDonorIdentifiers (base name: "human_donor_identifiers")', function() {
      // uncomment below and update the code to test the property humanDonorIdentifiers
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sources (base name: "sources")', function() {
      // uncomment below and update the code to test the property sources
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lotId (base name: "lot_id")', function() {
      // uncomment below and update the code to test the property lotId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "product_id")', function() {
      // uncomment below and update the code to test the property productId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property strainBackground (base name: "strain_background")', function() {
      // uncomment below and update the code to test the property strainBackground
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property strain (base name: "strain")', function() {
      // uncomment below and update the code to test the property strain
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property genotype (base name: "genotype")', function() {
      // uncomment below and update the code to test the property genotype
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property individualRodent (base name: "individual_rodent")', function() {
      // uncomment below and update the code to test the property individualRodent
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property rodentIdentifier (base name: "rodent_identifier")', function() {
      // uncomment below and update the code to test the property rodentIdentifier
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property controlledAccess (base name: "controlled_access")', function() {
      // uncomment below and update the code to test the property controlledAccess
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property anvilUrl (base name: "anvil_url")', function() {
      // uncomment below and update the code to test the property anvilUrl
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property transcriptomeAnnotation (base name: "transcriptome_annotation")', function() {
      // uncomment below and update the code to test the property transcriptomeAnnotation
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assembly (base name: "assembly")', function() {
      // uncomment below and update the code to test the property assembly
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property referenceFiles (base name: "reference_files")', function() {
      // uncomment below and update the code to test the property referenceFiles
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property analysisStepVersion (base name: "analysis_step_version")', function() {
      // uncomment below and update the code to test the property analysisStepVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property contentMd5sum (base name: "content_md5sum")', function() {
      // uncomment below and update the code to test the property contentMd5sum
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property contentType (base name: "content_type")', function() {
      // uncomment below and update the code to test the property contentType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property derivedFrom (base name: "derived_from")', function() {
      // uncomment below and update the code to test the property derivedFrom
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileFormat (base name: "file_format")', function() {
      // uncomment below and update the code to test the property fileFormat
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileFormatSpecifications (base name: "file_format_specifications")', function() {
      // uncomment below and update the code to test the property fileFormatSpecifications
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileSet (base name: "file_set")', function() {
      // uncomment below and update the code to test the property fileSet
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileSize (base name: "file_size")', function() {
      // uncomment below and update the code to test the property fileSize
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property md5sum (base name: "md5sum")', function() {
      // uncomment below and update the code to test the property md5sum
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property submittedFileName (base name: "submitted_file_name")', function() {
      // uncomment below and update the code to test the property submittedFileName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property uploadStatus (base name: "upload_status")', function() {
      // uncomment below and update the code to test the property uploadStatus
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property validationErrorDetail (base name: "validation_error_detail")', function() {
      // uncomment below and update the code to test the property validationErrorDetail
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property redacted (base name: "redacted")', function() {
      // uncomment below and update the code to test the property redacted
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property filtered (base name: "filtered")', function() {
      // uncomment below and update the code to test the property filtered
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property integratedIn (base name: "integrated_in")', function() {
      // uncomment below and update the code to test the property integratedIn
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property inputFileFor (base name: "input_file_for")', function() {
      // uncomment below and update the code to test the property inputFileFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property geneListFor (base name: "gene_list_for")', function() {
      // uncomment below and update the code to test the property geneListFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lociListFor (base name: "loci_list_for")', function() {
      // uncomment below and update the code to test the property lociListFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property href (base name: "href")', function() {
      // uncomment below and update the code to test the property href
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property s3Uri (base name: "s3_uri")', function() {
      // uncomment below and update the code to test the property s3Uri
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property uploadCredentials (base name: "upload_credentials")', function() {
      // uncomment below and update the code to test the property uploadCredentials
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property contentSummary (base name: "content_summary")', function() {
      // uncomment below and update the code to test the property contentSummary
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property seqspecOf (base name: "seqspec_of")', function() {
      // uncomment below and update the code to test the property seqspecOf
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileFormatType (base name: "file_format_type")', function() {
      // uncomment below and update the code to test the property fileFormatType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dimension1 (base name: "dimension1")', function() {
      // uncomment below and update the code to test the property dimension1
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dimension2 (base name: "dimension2")', function() {
      // uncomment below and update the code to test the property dimension2
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sourceUrl (base name: "source_url")', function() {
      // uncomment below and update the code to test the property sourceUrl
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property external (base name: "external")', function() {
      // uncomment below and update the code to test the property external
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "external_id")', function() {
      // uncomment below and update the code to test the property externalId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property flowcellId (base name: "flowcell_id")', function() {
      // uncomment below and update the code to test the property flowcellId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lane (base name: "lane")', function() {
      // uncomment below and update the code to test the property lane
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property readCount (base name: "read_count")', function() {
      // uncomment below and update the code to test the property readCount
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property minimumReadLength (base name: "minimum_read_length")', function() {
      // uncomment below and update the code to test the property minimumReadLength
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property maximumReadLength (base name: "maximum_read_length")', function() {
      // uncomment below and update the code to test the property maximumReadLength
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property meanReadLength (base name: "mean_read_length")', function() {
      // uncomment below and update the code to test the property meanReadLength
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sequencingPlatform (base name: "sequencing_platform")', function() {
      // uncomment below and update the code to test the property sequencingPlatform
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sequencingKit (base name: "sequencing_kit")', function() {
      // uncomment below and update the code to test the property sequencingKit
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sequencingRun (base name: "sequencing_run")', function() {
      // uncomment below and update the code to test the property sequencingRun
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property illuminaReadType (base name: "illumina_read_type")', function() {
      // uncomment below and update the code to test the property illuminaReadType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property index (base name: "index")', function() {
      // uncomment below and update the code to test the property index
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property seqspecs (base name: "seqspecs")', function() {
      // uncomment below and update the code to test the property seqspecs
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property strandSpecificity (base name: "strand_specificity")', function() {
      // uncomment below and update the code to test the property strandSpecificity
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property normalized (base name: "normalized")', function() {
      // uncomment below and update the code to test the property normalized
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property startViewPosition (base name: "start_view_position")', function() {
      // uncomment below and update the code to test the property startViewPosition
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property inputFileSets (base name: "input_file_sets")', function() {
      // uncomment below and update the code to test the property inputFileSets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property samples (base name: "samples")', function() {
      // uncomment below and update the code to test the property samples
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property donors (base name: "donors")', function() {
      // uncomment below and update the code to test the property donors
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileSetType (base name: "file_set_type")', function() {
      // uncomment below and update the code to test the property fileSetType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property files (base name: "files")', function() {
      // uncomment below and update the code to test the property files
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property controlFor (base name: "control_for")', function() {
      // uncomment below and update the code to test the property controlFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property submittedFilesTimestamp (base name: "submitted_files_timestamp")', function() {
      // uncomment below and update the code to test the property submittedFilesTimestamp
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property inputFileSetFor (base name: "input_file_set_for")', function() {
      // uncomment below and update the code to test the property inputFileSetFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assayTitles (base name: "assay_titles")', function() {
      // uncomment below and update the code to test the property assayTitles
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property libraryConstructionPlatform (base name: "library_construction_platform")', function() {
      // uncomment below and update the code to test the property libraryConstructionPlatform
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property measurementSets (base name: "measurement_sets")', function() {
      // uncomment below and update the code to test the property measurementSets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property smallScaleLociList (base name: "small_scale_loci_list")', function() {
      // uncomment below and update the code to test the property smallScaleLociList
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property largeScaleLociList (base name: "large_scale_loci_list")', function() {
      // uncomment below and update the code to test the property largeScaleLociList
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property smallScaleGeneList (base name: "small_scale_gene_list")', function() {
      // uncomment below and update the code to test the property smallScaleGeneList
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property largeScaleGeneList (base name: "large_scale_gene_list")', function() {
      // uncomment below and update the code to test the property largeScaleGeneList
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property selectionCriteria (base name: "selection_criteria")', function() {
      // uncomment below and update the code to test the property selectionCriteria
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property integratedContentFiles (base name: "integrated_content_files")', function() {
      // uncomment below and update the code to test the property integratedContentFiles
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property associatedPhenotypes (base name: "associated_phenotypes")', function() {
      // uncomment below and update the code to test the property associatedPhenotypes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property orfList (base name: "orf_list")', function() {
      // uncomment below and update the code to test the property orfList
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property exon (base name: "exon")', function() {
      // uncomment below and update the code to test the property exon
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property tile (base name: "tile")', function() {
      // uncomment below and update the code to test the property tile
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property guideType (base name: "guide_type")', function() {
      // uncomment below and update the code to test the property guideType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property tilingModality (base name: "tiling_modality")', function() {
      // uncomment below and update the code to test the property tilingModality
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property averageGuideCoverage (base name: "average_guide_coverage")', function() {
      // uncomment below and update the code to test the property averageGuideCoverage
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowerBoundGuideCoverage (base name: "lower_bound_guide_coverage")', function() {
      // uncomment below and update the code to test the property lowerBoundGuideCoverage
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property upperBoundGuideCoverage (base name: "upper_bound_guide_coverage")', function() {
      // uncomment below and update the code to test the property upperBoundGuideCoverage
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property averageInsertSize (base name: "average_insert_size")', function() {
      // uncomment below and update the code to test the property averageInsertSize
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowerBoundInsertSize (base name: "lower_bound_insert_size")', function() {
      // uncomment below and update the code to test the property lowerBoundInsertSize
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property upperBoundInsertSize (base name: "upper_bound_insert_size")', function() {
      // uncomment below and update the code to test the property upperBoundInsertSize
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property targeton (base name: "targeton")', function() {
      // uncomment below and update the code to test the property targeton
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property appliedToSamples (base name: "applied_to_samples")', function() {
      // uncomment below and update the code to test the property appliedToSamples
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assemblies (base name: "assemblies")', function() {
      // uncomment below and update the code to test the property assemblies
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property transcriptomeAnnotations (base name: "transcriptome_annotations")', function() {
      // uncomment below and update the code to test the property transcriptomeAnnotations
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assayTerm (base name: "assay_term")', function() {
      // uncomment below and update the code to test the property assayTerm
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property protocols (base name: "protocols")', function() {
      // uncomment below and update the code to test the property protocols
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property preferredAssayTitle (base name: "preferred_assay_title")', function() {
      // uncomment below and update the code to test the property preferredAssayTitle
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property multiomeSize (base name: "multiome_size")', function() {
      // uncomment below and update the code to test the property multiomeSize
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property controlFileSets (base name: "control_file_sets")', function() {
      // uncomment below and update the code to test the property controlFileSets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sequencingLibraryTypes (base name: "sequencing_library_types")', function() {
      // uncomment below and update the code to test the property sequencingLibraryTypes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property auxiliarySets (base name: "auxiliary_sets")', function() {
      // uncomment below and update the code to test the property auxiliarySets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property externalImageUrl (base name: "external_image_url")', function() {
      // uncomment below and update the code to test the property externalImageUrl
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property targetedGenes (base name: "targeted_genes")', function() {
      // uncomment below and update the code to test the property targetedGenes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property relatedMultiomeDatasets (base name: "related_multiome_datasets")', function() {
      // uncomment below and update the code to test the property relatedMultiomeDatasets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property modelName (base name: "model_name")', function() {
      // uncomment below and update the code to test the property modelName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property modelVersion (base name: "model_version")', function() {
      // uncomment below and update the code to test the property modelVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property predictionObjects (base name: "prediction_objects")', function() {
      // uncomment below and update the code to test the property predictionObjects
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property modelZooLocation (base name: "model_zoo_location")', function() {
      // uncomment below and update the code to test the property modelZooLocation
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property softwareVersion (base name: "software_version")', function() {
      // uncomment below and update the code to test the property softwareVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assessedGenes (base name: "assessed_genes")', function() {
      // uncomment below and update the code to test the property assessedGenes
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property geneid (base name: "geneid")', function() {
      // uncomment below and update the code to test the property geneid
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property versionNumber (base name: "version_number")', function() {
      // uncomment below and update the code to test the property versionNumber
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property geneidWithVersion (base name: "geneid_with_version")', function() {
      // uncomment below and update the code to test the property geneidWithVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property caption (base name: "caption")', function() {
      // uncomment below and update the code to test the property caption
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property thumbNail (base name: "thumb_nail")', function() {
      // uncomment below and update the code to test the property thumbNail
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property downloadUrl (base name: "download_url")', function() {
      // uncomment below and update the code to test the property downloadUrl
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property certificateIdentifier (base name: "certificate_identifier")', function() {
      // uncomment below and update the code to test the property certificateIdentifier
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dataUseLimitation (base name: "data_use_limitation")', function() {
      // uncomment below and update the code to test the property dataUseLimitation
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dataUseLimitationModifiers (base name: "data_use_limitation_modifiers")', function() {
      // uncomment below and update the code to test the property dataUseLimitationModifiers
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pi (base name: "pi")', function() {
      // uncomment below and update the code to test the property pi
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property awards (base name: "awards")', function() {
      // uncomment below and update the code to test the property awards
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property instituteLabel (base name: "institute_label")', function() {
      // uncomment below and update the code to test the property instituteLabel
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property activated (base name: "activated")', function() {
      // uncomment below and update the code to test the property activated
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property activatingAgentTermId (base name: "activating_agent_term_id")', function() {
      // uncomment below and update the code to test the property activatingAgentTermId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property activatingAgentTermName (base name: "activating_agent_term_name")', function() {
      // uncomment below and update the code to test the property activatingAgentTermName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property modality (base name: "modality")', function() {
      // uncomment below and update the code to test the property modality
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property cas (base name: "cas")', function() {
      // uncomment below and update the code to test the property cas
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fusedDomain (base name: "fused_domain")', function() {
      // uncomment below and update the code to test the property fusedDomain
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property taggedProtein (base name: "tagged_protein")', function() {
      // uncomment below and update the code to test the property taggedProtein
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property casSpecies (base name: "cas_species")', function() {
      // uncomment below and update the code to test the property casSpecies
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property biosamplesModified (base name: "biosamples_modified")', function() {
      // uncomment below and update the code to test the property biosamplesModified
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property degronSystem (base name: "degron_system")', function() {
      // uncomment below and update the code to test the property degronSystem
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property taggedProteins (base name: "tagged_proteins")', function() {
      // uncomment below and update the code to test the property taggedProteins
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property termId (base name: "term_id")', function() {
      // uncomment below and update the code to test the property termId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property termName (base name: "term_name")', function() {
      // uncomment below and update the code to test the property termName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property deprecatedNtrTerms (base name: "deprecated_ntr_terms")', function() {
      // uncomment below and update the code to test the property deprecatedNtrTerms
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property isA (base name: "is_a")', function() {
      // uncomment below and update the code to test the property isA
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property preferredAssayTitles (base name: "preferred_assay_titles")', function() {
      // uncomment below and update the code to test the property preferredAssayTitles
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ancestors (base name: "ancestors")', function() {
      // uncomment below and update the code to test the property ancestors
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ontology (base name: "ontology")', function() {
      // uncomment below and update the code to test the property ontology
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assaySlims (base name: "assay_slims")', function() {
      // uncomment below and update the code to test the property assaySlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property categorySlims (base name: "category_slims")', function() {
      // uncomment below and update the code to test the property categorySlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property objectiveSlims (base name: "objective_slims")', function() {
      // uncomment below and update the code to test the property objectiveSlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "company")', function() {
      // uncomment below and update the code to test the property company
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sequencingKits (base name: "sequencing_kits")', function() {
      // uncomment below and update the code to test the property sequencingKits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property organSlims (base name: "organ_slims")', function() {
      // uncomment below and update the code to test the property organSlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property cellSlims (base name: "cell_slims")', function() {
      // uncomment below and update the code to test the property cellSlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property developmentalSlims (base name: "developmental_slims")', function() {
      // uncomment below and update the code to test the property developmentalSlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property systemSlims (base name: "system_slims")', function() {
      // uncomment below and update the code to test the property systemSlims
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property orfId (base name: "orf_id")', function() {
      // uncomment below and update the code to test the property orfId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property proteinId (base name: "protein_id")', function() {
      // uncomment below and update the code to test the property proteinId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pctIdenticalProtein (base name: "pct_identical_protein")', function() {
      // uncomment below and update the code to test the property pctIdenticalProtein
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pctCoverageProtein (base name: "pct_coverage_protein")', function() {
      // uncomment below and update the code to test the property pctCoverageProtein
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pctCoverageOrf (base name: "pct_coverage_orf")', function() {
      // uncomment below and update the code to test the property pctCoverageOrf
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property layout (base name: "layout")', function() {
      // uncomment below and update the code to test the property layout
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property canonicalUri (base name: "canonical_uri")', function() {
      // uncomment below and update the code to test the property canonicalUri
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property feature (base name: "feature")', function() {
      // uncomment below and update the code to test the property feature
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantityUnits (base name: "quantity_units")', function() {
      // uncomment below and update the code to test the property quantityUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property observationDate (base name: "observation_date")', function() {
      // uncomment below and update the code to test the property observationDate
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property _abstract (base name: "abstract")', function() {
      // uncomment below and update the code to test the property _abstract
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property authors (base name: "authors")', function() {
      // uncomment below and update the code to test the property authors
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property datePublished (base name: "date_published")', function() {
      // uncomment below and update the code to test the property datePublished
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dateRevised (base name: "date_revised")', function() {
      // uncomment below and update the code to test the property dateRevised
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property issue (base name: "issue")', function() {
      // uncomment below and update the code to test the property issue
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property page (base name: "page")', function() {
      // uncomment below and update the code to test the property page
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property volume (base name: "volume")', function() {
      // uncomment below and update the code to test the property volume
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property journal (base name: "journal")', function() {
      // uncomment below and update the code to test the property journal
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property publishedBy (base name: "published_by")', function() {
      // uncomment below and update the code to test the property publishedBy
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property publicationYear (base name: "publication_year")', function() {
      // uncomment below and update the code to test the property publicationYear
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property fileSets (base name: "file_sets")', function() {
      // uncomment below and update the code to test the property fileSets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property workflows (base name: "workflows")', function() {
      // uncomment below and update the code to test the property workflows
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property software (base name: "software")', function() {
      // uncomment below and update the code to test the property software
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowerBoundAge (base name: "lower_bound_age")', function() {
      // uncomment below and update the code to test the property lowerBoundAge
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property upperBoundAge (base name: "upper_bound_age")', function() {
      // uncomment below and update the code to test the property upperBoundAge
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ageUnits (base name: "age_units")', function() {
      // uncomment below and update the code to test the property ageUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sampleTerms (base name: "sample_terms")', function() {
      // uncomment below and update the code to test the property sampleTerms
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property diseaseTerms (base name: "disease_terms")', function() {
      // uncomment below and update the code to test the property diseaseTerms
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pooledFrom (base name: "pooled_from")', function() {
      // uncomment below and update the code to test the property pooledFrom
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property partOf (base name: "part_of")', function() {
      // uncomment below and update the code to test the property partOf
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property originatedFrom (base name: "originated_from")', function() {
      // uncomment below and update the code to test the property originatedFrom
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property treatments (base name: "treatments")', function() {
      // uncomment below and update the code to test the property treatments
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property biomarkers (base name: "biomarkers")', function() {
      // uncomment below and update the code to test the property biomarkers
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property embryonic (base name: "embryonic")', function() {
      // uncomment below and update the code to test the property embryonic
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property modifications (base name: "modifications")', function() {
      // uncomment below and update the code to test the property modifications
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property cellularSubPool (base name: "cellular_sub_pool")', function() {
      // uncomment below and update the code to test the property cellularSubPool
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property startingAmount (base name: "starting_amount")', function() {
      // uncomment below and update the code to test the property startingAmount
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property startingAmountUnits (base name: "starting_amount_units")', function() {
      // uncomment below and update the code to test the property startingAmountUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property dateObtained (base name: "date_obtained")', function() {
      // uncomment below and update the code to test the property dateObtained
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sortedFrom (base name: "sorted_from")', function() {
      // uncomment below and update the code to test the property sortedFrom
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sortedFromDetail (base name: "sorted_from_detail")', function() {
      // uncomment below and update the code to test the property sortedFromDetail
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property constructLibrarySets (base name: "construct_library_sets")', function() {
      // uncomment below and update the code to test the property constructLibrarySets
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property moi (base name: "moi")', function() {
      // uncomment below and update the code to test the property moi
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property nucleicAcidDelivery (base name: "nucleic_acid_delivery")', function() {
      // uncomment below and update the code to test the property nucleicAcidDelivery
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property timePostLibraryDelivery (base name: "time_post_library_delivery")', function() {
      // uncomment below and update the code to test the property timePostLibraryDelivery
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property timePostLibraryDeliveryUnits (base name: "time_post_library_delivery_units")', function() {
      // uncomment below and update the code to test the property timePostLibraryDeliveryUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property classifications (base name: "classifications")', function() {
      // uncomment below and update the code to test the property classifications
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property timePostChange (base name: "time_post_change")', function() {
      // uncomment below and update the code to test the property timePostChange
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property timePostChangeUnits (base name: "time_post_change_units")', function() {
      // uncomment below and update the code to test the property timePostChangeUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property cellFateChangeTreatments (base name: "cell_fate_change_treatments")', function() {
      // uncomment below and update the code to test the property cellFateChangeTreatments
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property cellFateChangeProtocol (base name: "cell_fate_change_protocol")', function() {
      // uncomment below and update the code to test the property cellFateChangeProtocol
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property demultiplexedFrom (base name: "demultiplexed_from")', function() {
      // uncomment below and update the code to test the property demultiplexedFrom
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property passageNumber (base name: "passage_number")', function() {
      // uncomment below and update the code to test the property passageNumber
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property targetedSampleTerm (base name: "targeted_sample_term")', function() {
      // uncomment below and update the code to test the property targetedSampleTerm
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property growthMedium (base name: "growth_medium")', function() {
      // uncomment below and update the code to test the property growthMedium
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property multiplexedIn (base name: "multiplexed_in")', function() {
      // uncomment below and update the code to test the property multiplexedIn
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sortedFractions (base name: "sorted_fractions")', function() {
      // uncomment below and update the code to test the property sortedFractions
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property originOf (base name: "origin_of")', function() {
      // uncomment below and update the code to test the property originOf
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property institutionalCertificates (base name: "institutional_certificates")', function() {
      // uncomment below and update the code to test the property institutionalCertificates
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property age (base name: "age")', function() {
      // uncomment below and update the code to test the property age
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property upperBoundAgeInHours (base name: "upper_bound_age_in_hours")', function() {
      // uncomment below and update the code to test the property upperBoundAgeInHours
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowerBoundAgeInHours (base name: "lower_bound_age_in_hours")', function() {
      // uncomment below and update the code to test the property lowerBoundAgeInHours
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property parts (base name: "parts")', function() {
      // uncomment below and update the code to test the property parts
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pooledIn (base name: "pooled_in")', function() {
      // uncomment below and update the code to test the property pooledIn
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property demultiplexedTo (base name: "demultiplexed_to")', function() {
      // uncomment below and update the code to test the property demultiplexedTo
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property multiplexedSamples (base name: "multiplexed_samples")', function() {
      // uncomment below and update the code to test the property multiplexedSamples
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property barcodeSampleMap (base name: "barcode_sample_map")', function() {
      // uncomment below and update the code to test the property barcodeSampleMap
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sampleMaterial (base name: "sample_material")', function() {
      // uncomment below and update the code to test the property sampleMaterial
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pmi (base name: "pmi")', function() {
      // uncomment below and update the code to test the property pmi
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pmiUnits (base name: "pmi_units")', function() {
      // uncomment below and update the code to test the property pmiUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ccfId (base name: "ccf_id")', function() {
      // uncomment below and update the code to test the property ccfId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property preservationMethod (base name: "preservation_method")', function() {
      // uncomment below and update the code to test the property preservationMethod
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property usedBy (base name: "used_by")', function() {
      // uncomment below and update the code to test the property usedBy
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property versions (base name: "versions")', function() {
      // uncomment below and update the code to test the property versions
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property downloadId (base name: "download_id")', function() {
      // uncomment below and update the code to test the property downloadId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property downloadedUrl (base name: "downloaded_url")', function() {
      // uncomment below and update the code to test the property downloadedUrl
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property amountUnits (base name: "amount_units")', function() {
      // uncomment below and update the code to test the property amountUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property durationUnits (base name: "duration_units")', function() {
      // uncomment below and update the code to test the property durationUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property pH (base name: "pH")', function() {
      // uncomment below and update the code to test the property pH
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property purpose (base name: "purpose")', function() {
      // uncomment below and update the code to test the property purpose
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property postTreatmentTime (base name: "post_treatment_time")', function() {
      // uncomment below and update the code to test the property postTreatmentTime
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property postTreatmentTimeUnits (base name: "post_treatment_time_units")', function() {
      // uncomment below and update the code to test the property postTreatmentTimeUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property temperature (base name: "temperature")', function() {
      // uncomment below and update the code to test the property temperature
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property temperatureUnits (base name: "temperature_units")', function() {
      // uncomment below and update the code to test the property temperatureUnits
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property treatmentType (base name: "treatment_type")', function() {
      // uncomment below and update the code to test the property treatmentType
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property treatmentTermId (base name: "treatment_term_id")', function() {
      // uncomment below and update the code to test the property treatmentTermId
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property treatmentTermName (base name: "treatment_term_name")', function() {
      // uncomment below and update the code to test the property treatmentTermName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property depletion (base name: "depletion")', function() {
      // uncomment below and update the code to test the property depletion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property biosamplesTreated (base name: "biosamples_treated")', function() {
      // uncomment below and update the code to test the property biosamplesTreated
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property firstName (base name: "first_name")', function() {
      // uncomment below and update the code to test the property firstName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lastName (base name: "last_name")', function() {
      // uncomment below and update the code to test the property lastName
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property submitsFor (base name: "submits_for")', function() {
      // uncomment below and update the code to test the property submitsFor
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property viewingGroups (base name: "viewing_groups")', function() {
      // uncomment below and update the code to test the property viewingGroups
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property jobTitle (base name: "job_title")', function() {
      // uncomment below and update the code to test the property jobTitle
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property workflowRepositories (base name: "workflow_repositories")', function() {
      // uncomment below and update the code to test the property workflowRepositories
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property standardsPage (base name: "standards_page")', function() {
      // uncomment below and update the code to test the property standardsPage
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property workflowVersion (base name: "workflow_version")', function() {
      // uncomment below and update the code to test the property workflowVersion
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property analysisSteps (base name: "analysis_steps")', function() {
      // uncomment below and update the code to test the property analysisSteps
      //var instance = new IgvfProjectApi.Item();
      //expect(instance).to.be();
    });

  });

}));
